using IMPSTransactionRouter.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Xml;
using System.Xml.Serialization;
using MaxiSwitch.DALC.Configuration;
using IMPSTransactionRouter.FCUBSAccService;
using System.Xml.Linq;
using System.Threading.Tasks;
using MaxiSwitch.DALC.ConsumerTransactions;
using HSMCommunicationChanel;
using System.Drawing;
using System.Collections;
using System.Data;
using DALC;
using System.Collections.Specialized;
using Owin.Web.Providers;
using Newtonsoft.Json;
using System.Web;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Configuration;
using BIPS.Communication;

namespace IMPSTransactionRouter.Controllers
{
    public class MobileBankingController : ApiController
    {
        SSM _SSM = new SSM();
        CommanDetails _CommanDetails = new CommanDetails();
        Authentication _Authentication = new Authentication();
        ProcessMessage _ProcessMessage = new ProcessMessage();
        ProcessHost _ProcessHost = new ProcessHost();
        ProcessPayment _ProcessPayment = new ProcessPayment();
        string MobileResponseData = string.Empty;
        private double totalInterest = 0;
        private double totalPrincipal = 0;
        string MonthlyPayment = "";
        public MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg _SwitchConsumerRequestReqMsg = null;
        ProcessPortalRequest _ProcessPortalRequest = new ProcessPortalRequest();
        HTTPCommunicationChanel _HTTPCommunicationChanel = new HTTPCommunicationChanel();

        #region Financial & non-financial

        [HttpPost]
        public MOBILEBANKING_RESP Balanceinquiry([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Balance inquiry Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost("119");
                        //(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        //  _ProcessMessage.ProcessUnsuccessfullTransactionBLQ(ref _MOBILEBANKING_RESP, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }


                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessBalanceEnquiry(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Balance inquiry Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_RESP.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP Ministatement([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Ministatement Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        //  _ProcessMessage.ProcessUnsuccessfullTransactionMINI(ref _MOBILEBANKING_RESP, _REQUESTACCSTMT_IOFS_REQ, _REQUESTACCSTMT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _ProcessMessage.TransactionGenerateMiniStatement((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessMiniStatement(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Ministatement Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_RESP.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionGenerateMiniStatement((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP IntraFundTransfer([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Intra Fund Transfer Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion Loger

                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                if (!DataValidator(enumTransactionType.FundTransfer, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                if (_MOBILEBANKING_REQ.REMITTERACC == _MOBILEBANKING_REQ.BENIFICIARYACC)
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.PayerAndPayeeShouldNotSame);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;
                    _MOBILEBANKING_RESP.BENIFICIARYACC = _MOBILEBANKING_REQ.BENIFICIARYACC;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                    return _MOBILEBANKING_RESP;
                }
                #region Account Transfer 
                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                        _ProcessMessage.ProcessFundTransfer(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                        _ProcessMessage.TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 4);
                    });
                    task.Wait();
                }
                #endregion Account Transfer

                #region Mobile Transfer
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                        _ProcessMessage.ProcessFundTransfer(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                        _ProcessMessage.TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 4);
                    });
                    task.Wait();
                }
                #endregion Mobile Transfer
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidTransaction);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _ProcessMessage.TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Intra Fund Transfer Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP AccountVerification([FromBody] MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            //_MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumberNew();
            _MOBILEBANKING_REQ.ReferenceNumber = RMA_RRNGenerateReferenceNumber();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Account Verification Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                
                #region LastTransactionVerification
                //try
                //{
                //    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                //    {
                //        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                //    }
                //    else
                //    {
                //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                //        _MOBILEBANKING_RESP.ResponseData = null;
                //        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //        //  _ProcessMessage.ProcessUnsuccessfullTransactionMINI(ref _MOBILEBANKING_RESP, _REQUESTACCSTMT_IOFS_REQ, _REQUESTACCSTMT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
                //        return _MOBILEBANKING_RESP;
                //    }
                //}
                //catch (Exception Ex)
                //{
                //    _CommanDetails.SystemLogger.WriteErrorLog(null, Ex);
                //}
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessAccountVerificationTransaction(ref _MOBILEBANKING_RESP , _MOBILEBANKING_REQ);

                });
                task.Wait();

            }
            catch (Exception Ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, Ex);
            }
            IMPSTransactions.GetRRNCheck(_MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.DeviceID, "BipsOutwardAccountVerification",_MOBILEBANKING_RESP.ResponseCode, "Insert");
            _ProcessMessage.TransactionAccountVerification((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Account Verification Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP QRCodeVerification([FromBody] MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
           // _MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumberNew();
            _MOBILEBANKING_REQ.ReferenceNumber = RMA_RRNGenerateReferenceNumber();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** QR Code Verification Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                string bankqrcode = string.Empty;
                bankqrcode = ConfigurationManager.AppSettings["BankQRBIN"].ToString() + ConfigurationManager.AppSettings["BankQRBankCode"].ToString();
                if (_MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 8) == bankqrcode)
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.Approved);
                    return _MOBILEBANKING_RESP;
                }
                else
                {
                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.ProcessQRCodeVerificationTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    });
                    task.Wait();
                }
            }
            catch (Exception Ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, Ex);
            }
            IMPSTransactions.GetRRNCheck(_MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.DeviceID, "BipsOutwardQRVerification",_MOBILEBANKING_RESP.ResponseCode, "Insert");
            _ProcessMessage.TransactionAccountVerification((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Account Verification Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP OutwardFundTransfer([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                //added for fetching Last RRN
                DataTable GetbipslastRRN = new DataTable();
                GetbipslastRRN = null;
                GetbipslastRRN = IMPSTransactions.GetRRNCheck(_MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.DeviceID, "BipsOutTransaction","00", "GetoutwardRRN");
                //_MOBILEBANKING_REQ.LastTransactionReferenceNumber = IMPSTransactions.VERIFYLASTRRN(_MOBILEBANKING_REQ.DeviceID, 2);
                _MOBILEBANKING_REQ.LastTransactionReferenceNumber = GetbipslastRRN.Rows[0][0].ToString();
                //_MOBILEBANKING_REQ.LastTransactionReferenceNumber = IMPSTransactions.VERIFYLASTRRN(_MOBILEBANKING_REQ.DeviceID, 2);
                //_MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumber();
                //_MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumberNew();
                _MOBILEBANKING_REQ.ReferenceNumber = RMA_RRNGenerateReferenceNumber();
                _MOBILEBANKING_REQ.DeliveryChannel = "IMP";
                _MOBILEBANKING_REQ.FundTransferType = "P2A/0000|IMPS-OUT/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.BENIFICIARYACC + "/" + "0000000000";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Outward Fund Transfer Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                DataTable GetAcqBankdetails = IMPSTransactions.GetACQBankCodeDetails(_MOBILEBANKING_REQ.AcquirerBankID);
                if (GetAcqBankdetails != null && GetAcqBankdetails.Rows.Count > 0)
                {
                    _MOBILEBANKING_REQ.NQRCBankName = GetAcqBankdetails.Rows[0][1].ToString();
                }
                if (!DataValidator(enumTransactionType.OtherBank, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {

                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessOutwardTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Outward Fund Transfer Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 6);

            return _MOBILEBANKING_RESP;
        }
        
        [HttpPost]
        public MOBILEBANKING_RESP SchedulePayments([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Schedule Payments Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                if (!DataValidator(enumTransactionType.FundTransfer, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessSchedulePaymentsTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Schedule Payments Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            ////_ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP GetSchedulePaymentsList([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetSchedulePaymentsList Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessGetScheduledPaymentsList(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetSchedulePaymentsList Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            ////_ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP BHIMInward([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _ProcessMessage.TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessBHIMTransactions(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_RESP.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            // _ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 4);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP BHIMIStatusCheck([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM Status Check Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessBHIMStatusCheckTransactions(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM Status Check Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_RESP.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            // _ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 4);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP StandingInstructions([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {

            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Standing Instructions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                if (!DataValidator(enumTransactionType.FundTransfer, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessStandingInstructionsTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Standing Instructions Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            ////_ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP AccountStatement([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** AccountStatement Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (ConfigurationManager.AppSettings["STATEMENTACTIVE"]=="false")
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToProcess);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    return _MOBILEBANKING_RESP;
                }

                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                _MOBILEBANKING_REQ.PAN = "9999999999999999";
                _MOBILEBANKING_REQ.Merchantidentifier = "9999999999999999";
                _MOBILEBANKING_REQ.TransType = _MOBILEBANKING_REQ.DateRange;//enumTransactionType.StatementRequest.ToString();
                _MOBILEBANKING_REQ.FundTransferType = _MOBILEBANKING_REQ.DateRange;
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _ProcessMessage.TransactionAccountStatement((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                var task = Task.Factory.StartNew(() =>
                {
                     _ProcessHost.ProcessAccountStatementToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    //_MOBILEBANKING_RESP.MinistatementData = "|20201130  S745468  13TIPC20201130           165.00110020000332:Int.Pd:01-11-2020 to 30-11-2020      20201130181125                         33540.53|20201031  S629662  12TIPC20201031           169.00110020000332:Int.Pd:01-10-2020 to 31-10-2020      20201031182627                         33375.53|20200930  S539248  12TIPC20200930           163.00110020000332:Int.Pd:01-09-2020 to 30-09-2020      20200930195316                         33206.53|20200831  S470359  12TIPC20200831           168.00110020000332:Int.Pd:01-08-2020 to 31-08-2020      20200831203147                         33043.53|20200731  S415050  13TIPC20200731           167.00110020000332:Int.Pd:01-07-2020 to 31-07-2020      20200731185619                         32875.53|20200629  S329106  12TIPC20200630           161.00110020000332:Int.Pd:01-06-2020 to 30-06-2020      20200629191516                         32708.53|20200616  S296602   1TCID20200616             1.00IMPS-OUT/016808332222/100471523/0000000000        20200616204522                         32547.53|20200530  S255622   1TCID20200530             1.00IMPS-OUT/015108320561/100471523/0000000000        20200530202504                         32548.53|20200530  S254478  12TIPC20200531           171.00110020000332:Int.Pd:01-05-2020 to 31-05-2020      20200530145616                         32549.53|20200521  S235227   1TCID20200521             1.00IMPS-OUT/014208314833/100471523/0000000000        20200521205156                         32378.53|20200520  S232406   1TCID20200520          3000.00110020000332 To: 110020001216                     20200520114825                         32379.53|20200505  S199513   1TCID20200505             1.00IMPS-OUT/012611305790/100471523/0000000000        20200505114625                         35379.53|20200430  S187854   2TSID20200430         21000.00      D18733                                      20200430195046                         35380.53|20200430  S187620  12TIPC20200430           256.00110020000332:Int.Pd:01-04-2020 to 30-04-2020      20200430194543                         56380.53|20200406  S138849   2TCIC20200406         21000.00IMPS-IN/009706440114//CHENEY  DEMA                20200406185753                         56124.53|20200331  S124215   2TSID20200331         21000.00      D18733                                      20200331184332                         35124.53|20200331  S123756  12TIPC20200331           252.00110020000332:Int.Pd:01-03-2020 to 31-03-2020      20200331181226                         56124.53|20200325     M626   2TBIC20200325          7375.00REV OF SWS CONTRIBUTION,                          20200325143811                         55872.53|20200323  S104688   2TCIC20200323             1.00110020000323 To: 110020000332                     20200323180156                         48497.53|20200229   S38499   2TSID20200229         21000.00      D18733                                      20200229153717                         48496.53|20201130  S745468  13TIPC20201130           165.00110020000332:Int.Pd:01-11-2020 to 30-11-2020      20201130181125                         33540.53|20201031  S629662  12TIPC20201031           169.00110020000332:Int.Pd:01-10-2020 to 31-10-2020      20201031182627                         33375.53|20200930  S539248  12TIPC20200930           163.00110020000332:Int.Pd:01-09-2020 to 30-09-2020      20200930195316                         33206.53|20200831  S470359  12TIPC20200831           168.00110020000332:Int.Pd:01-08-2020 to 31-08-2020      20200831203147                         33043.53|20200731  S415050  13TIPC20200731           167.00110020000332:Int.Pd:01-07-2020 to 31-07-2020      20200731185619                         32875.53|20200629  S329106  12TIPC20200630           161.00110020000332:Int.Pd:01-06-2020 to 30-06-2020      20200629191516                         32708.53|20200616  S296602   1TCID20200616             1.00IMPS-OUT/016808332222/100471523/0000000000        20200616204522                         32547.53|20200530  S255622   1TCID20200530             1.00IMPS-OUT/015108320561/100471523/0000000000        20200530202504                         32548.53|20200530  S254478  12TIPC20200531           171.00110020000332:Int.Pd:01-05-2020 to 31-05-2020      20200530145616                         32549.53|20200521  S235227   1TCID20200521             1.00IMPS-OUT/014208314833/100471523/0000000000        20200521205156                         32378.53|20200520  S232406   1TCID20200520          3000.00110020000332 To: 110020001216                     20200520114825                         32379.53|20200505  S199513   1TCID20200505             1.00IMPS-OUT/012611305790/100471523/0000000000        20200505114625                         35379.53|20200430  S187854   2TSID20200430         21000.00      D18733                                      20200430195046                         35380.53|20200430  S187620  12TIPC20200430           256.00110020000332:Int.Pd:01-04-2020 to 30-04-2020      20200430194543                         56380.53|20200406  S138849   2TCIC20200406         21000.00IMPS-IN/009706440114//CHENEY  DEMA                20200406185753                         56124.53|20200331  S124215   2TSID20200331         21000.00      D18733                                      20200331184332                         35124.53|20200331  S123756  12TIPC20200331           252.00110020000332:Int.Pd:01-03-2020 to 31-03-2020      20200331181226                         56124.53|20200325     M626   2TBIC20200325          7375.00REV OF SWS CONTRIBUTION,                          20200325143811                         55872.53|20200323  S104688   2TCIC20200323             1.00110020000323 To: 110020000332                     20200323180156                         48497.53|20200229   S38499   2TSID20200229         21000.00      D18733                                      20200229153717                         48496.53|20201130  S745468  13TIPC20201130           165.00110020000332:Int.Pd:01-11-2020 to 30-11-2020      20201130181125                         33540.53|20201031  S629662  12TIPC20201031           169.00110020000332:Int.Pd:01-10-2020 to 31-10-2020      20201031182627                         33375.53|20200930  S539248  12TIPC20200930           163.00110020000332:Int.Pd:01-09-2020 to 30-09-2020      20200930195316                         33206.53|20200831  S470359  12TIPC20200831           168.00110020000332:Int.Pd:01-08-2020 to 31-08-2020      20200831203147                         33043.53|20200731  S415050  13TIPC20200731           167.00110020000332:Int.Pd:01-07-2020 to 31-07-2020      20200731185619                         32875.53|20200629  S329106  12TIPC20200630           161.00110020000332:Int.Pd:01-06-2020 to 30-06-2020      20200629191516                         32708.53|20200616  S296602   1TCID20200616             1.00IMPS-OUT/016808332222/100471523/0000000000        20200616204522                         32547.53|20200530  S255622   1TCID20200530             1.00IMPS-OUT/015108320561/100471523/0000000000        20200530202504                         32548.53|20200530  S254478  12TIPC20200531           171.00110020000332:Int.Pd:01-05-2020 to 31-05-2020      20200530145616                         32549.53|20200521  S235227   1TCID20200521             1.00IMPS-OUT/014208314833/100471523/0000000000        20200521205156                         32378.53|20200520  S232406   1TCID20200520          3000.00110020000332 To: 110020001216                     20200520114825                         32379.53|20200505  S199513   1TCID20200505             1.00IMPS-OUT/012611305790/100471523/0000000000        20200505114625                         35379.53|20200430  S187854   2TSID20200430         21000.00      D18733                                      20200430195046                         35380.53|20200430  S187620  12TIPC20200430           256.00110020000332:Int.Pd:01-04-2020 to 30-04-2020      20200430194543                         56380.53|20200406  S138849   2TCIC20200406         21000.00IMPS-IN/009706440114//CHENEY  DEMA                20200406185753                         56124.53|20200331  S124215   2TSID20200331         21000.00      D18733                                      20200331184332                         35124.53|20200331  S123756  12TIPC20200331           252.00110020000332:Int.Pd:01-03-2020 to 31-03-2020      20200331181226                         56124.53|20200325     M626   2TBIC20200325          7375.00REV OF SWS CONTRIBUTION,                          20200325143811                         55872.53|20200323  S104688   2TCIC20200323             1.00110020000323 To: 110020000332                     20200323180156                         48497.53|20200229   S38499   2TSID20200229         21000.00      D18733                                      20200229153717                         48496.53|20201130  S745468  13TIPC20201130           165.00110020000332:Int.Pd:01-11-2020 to 30-11-2020      20201130181125                         33540.53|20201031  S629662  12TIPC20201031           169.00110020000332:Int.Pd:01-10-2020 to 31-10-2020      20201031182627                         33375.53|20200930  S539248  12TIPC20200930           163.00110020000332:Int.Pd:01-09-2020 to 30-09-2020      20200930195316                         33206.53|20200831  S470359  12TIPC20200831           168.00110020000332:Int.Pd:01-08-2020 to 31-08-2020      20200831203147                         33043.53|20200731  S415050  13TIPC20200731           167.00110020000332:Int.Pd:01-07-2020 to 31-07-2020      20200731185619                         32875.53|20200629  S329106  12TIPC20200630           161.00110020000332:Int.Pd:01-06-2020 to 30-06-2020      20200629191516                         32708.53|20200616  S296602   1TCID20200616             1.00IMPS-OUT/016808332222/100471523/0000000000        20200616204522                         32547.53|20200530  S255622   1TCID20200530             1.00IMPS-OUT/015108320561/100471523/0000000000        20200530202504                         32548.53|20200530  S254478  12TIPC20200531           171.00110020000332:Int.Pd:01-05-2020 to 31-05-2020      20200530145616                         32549.53|20200521  S235227   1TCID20200521             1.00IMPS-OUT/014208314833/100471523/0000000000        20200521205156                         32378.53|20200520  S232406   1TCID20200520          3000.00110020000332 To: 110020001216                     20200520114825                         32379.53|20200505  S199513   1TCID20200505             1.00IMPS-OUT/012611305790/100471523/0000000000        20200505114625                         35379.53|20200430  S187854   2TSID20200430         21000.00      D18733                                      20200430195046                         35380.53|20200430  S187620  12TIPC20200430           256.00110020000332:Int.Pd:01-04-2020 to 30-04-2020      20200430194543                         56380.53|20200406  S138849   2TCIC20200406         21000.00IMPS-IN/009706440114//CHENEY  DEMA                20200406185753                         56124.53|20200331  S124215   2TSID20200331         21000.00      D18733                                      20200331184332                         35124.53|20200331  S123756  12TIPC20200331           252.00110020000332:Int.Pd:01-03-2020 to 31-03-2020      20200331181226                         56124.53|20200325     M626   2TBIC20200325          7375.00REV OF SWS CONTRIBUTION,                          20200325143811                         55872.53|20200323  S104688   2TCIC20200323             1.00110020000323 To: 110020000332                     20200323180156                         48497.53|20200229   S38499   2TSID20200229         21000.00      D18733                                      20200229153717                         48496.53|20201130  S745468  13TIPC20201130           165.00110020000332:Int.Pd:01-11-2020 to 30-11-2020      20201130181125                         33540.53|20201031  S629662  12TIPC20201031           169.00110020000332:Int.Pd:01-10-2020 to 31-10-2020      20201031182627                         33375.53|20200930  S539248  12TIPC20200930           163.00110020000332:Int.Pd:01-09-2020 to 30-09-2020      20200930195316                         33206.53|20200831  S470359  12TIPC20200831           168.00110020000332:Int.Pd:01-08-2020 to 31-08-2020      20200831203147                         33043.53|20200731  S415050  13TIPC20200731           167.00110020000332:Int.Pd:01-07-2020 to 31-07-2020      20200731185619                         32875.53|20200629  S329106  12TIPC20200630           161.00110020000332:Int.Pd:01-06-2020 to 30-06-2020      20200629191516                         32708.53|20200616  S296602   1TCID20200616             1.00IMPS-OUT/016808332222/100471523/0000000000        20200616204522                         32547.53|20200530  S255622   1TCID20200530             1.00IMPS-OUT/015108320561/100471523/0000000000        20200530202504                         32548.53|20200530  S254478  12TIPC20200531           171.00110020000332:Int.Pd:01-05-2020 to 31-05-2020      20200530145616                         32549.53|20200521  S235227   1TCID20200521             1.00IMPS-OUT/014208314833/100471523/0000000000        20200521205156                         32378.53|20200520  S232406   1TCID20200520          3000.00110020000332 To: 110020001216                     20200520114825                         32379.53|20200505  S199513   1TCID20200505             1.00IMPS-OUT/012611305790/100471523/0000000000        20200505114625                         35379.53|20200430  S187854   2TSID20200430         21000.00      D18733                                      20200430195046                         35380.53|20200430  S187620  12TIPC20200430           256.00110020000332:Int.Pd:01-04-2020 to 30-04-2020      20200430194543                         56380.53|20200406  S138849   2TCIC20200406         21000.00IMPS-IN/009706440114//CHENEY  DEMA                20200406185753                         56124.53|20200331  S124215   2TSID20200331         21000.00      D18733                                      20200331184332                         35124.53|20200331  S123756  12TIPC20200331           252.00110020000332:Int.Pd:01-03-2020 to 31-03-2020      20200331181226                         56124.53|20200325     M626   2TBIC20200325          7375.00REV OF SWS CONTRIBUTION,                          20200325143811                         55872.53|20200323  S104688   2TCIC20200323             1.00110020000323 To: 110020000332                     20200323180156                         48497.53|20200229   S38499   2TSID20200229         21000.00      D18733                                      20200229153717                         48496.53";
                    //_MOBILEBANKING_RESP.ResponseCode = "00";
                    //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                });
                task.Wait();

                #region Loger
                try
                {
                    string MobileResponseData = string.Empty;
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** AccountStatement Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_RESP.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                _ProcessMessage.TransactionAccountStatement((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            return _MOBILEBANKING_RESP;
        }


        #endregion Financial & non-financial

        #region Manage Benificiary
        [HttpPost]
        public REGISTRATION_RES AddBenificiary([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddBenificiary.ToString(), 1);
            if (_REGISTRATION_REQ.IsAccountReg)
            {
                #region Add Benificiary for Account
                try
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Add Benificiary  For Account Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    #region LastTransactionVerification
                    try
                    {
                        if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                        {
                            IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                        }
                        else
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            return _REGISTRATION_RES;
                        }
                    }
                    catch { }
                    #endregion LastTransactionVerification

                    if (_REGISTRATION_REQ.AccountNumber == _REGISTRATION_REQ.BenificiaryAccountNumber)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountAndBeneficiaryshouldnotsame);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return _REGISTRATION_RES;
                    }
                    if (_REGISTRATION_REQ.BenificiaryBankCode == ConfigurationManager.AppSettings["BankCode"].ToString())
                    {
                        _REGISTRATION_REQ.AccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                        _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Acccount Query Response Code : " + _REGISTRATION_RES.ResponseCode));
                    }
                    var task = Task.Factory.StartNew(() =>
                    {
                        if (_REGISTRATION_RES.ResponseCode == "00" || _REGISTRATION_RES.ResponseCode == "000")
                        {
                            _ProcessMessage.AddBenificiary_Account(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        }
                        else if (_REGISTRATION_REQ.BenificiaryBankCode != ConfigurationManager.AppSettings["BankCode"].ToString())
                        {
                            _ProcessMessage.AddBenificiary_Account(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidBenificiary);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        }
                        //_ProcessMessage.AddBenificiary_Account(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                ///////////////// Process Add Benificiary Response //////////////////////////

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Add Benificiary  For Account Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #endregion
            }
            else if (_REGISTRATION_REQ.IsMobileReg)
            {
                #region Add Benificiary for Mobile
                try
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Add Beneficiary For Mobile Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    #region LastTransactionVerification
                    try
                    {
                        if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                        {
                            IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                        }
                        else
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            return _REGISTRATION_RES;
                        }
                    }
                    catch { }
                    #endregion LastTransactionVerification

                    if (_REGISTRATION_REQ.MobileNumber == _REGISTRATION_REQ.BenificiaryMobileNumber)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MobileAndBeneficiaryShouldNotSame);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return _REGISTRATION_RES;
                    }

                    var task = Task.Factory.StartNew(() =>
                    {
                        _REGISTRATION_REQ.BenificiaryBankCode = ConfigurationManager.AppSettings["BankCode"].ToString();// CONFIGURATIONCONFIGDATA.BankCode;
                        _ProcessMessage.AddBenificiary_Mobile(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                ///////////////// Process Ministatement Response //////////////////////////

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Add Beneficiary  For Mobile Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #endregion
            }
            else
            {
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Invalid Transaction Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Invalid Transaction Response send To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
            }
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddBenificiary.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GetBenificiary([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBenificiary.ToString(), 1);
            if (_REGISTRATION_REQ.allbenificiarydetails)
            {
                #region Get Account Benificiary
                try
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.GetBenificiary(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                ///////////////// Process Ministatement Response //////////////////////////

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #endregion
            }
            else if (_REGISTRATION_REQ.IsAccountReg)
            {
                #region Get Account Benificiary
                try
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary For Account Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.GetBenificiary_Account(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                ///////////////// Process Get Benificiary Response //////////////////////////

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary  For Account Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #endregion
            }
            else if (_REGISTRATION_REQ.IsMobileReg)
            {
                #region Get Mobile Benificiary
                try
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary For Mobile Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    #region LastTransactionVerification
                    try
                    {
                        if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                        {
                            IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                        }
                        else
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            return _REGISTRATION_RES;
                        }
                    }
                    catch { }
                    #endregion LastTransactionVerification


                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.GetBenificiary_Mobile(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                ///////////////// Process Ministatement Response //////////////////////////

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Beneficiary  For Mobile Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #endregion
            }
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBenificiary.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES DeleteBenificiary([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.DeleteBenificiary.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Delete Beneficiary Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.DeleteBenificiary(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Delete Beneficiary  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.DeleteBenificiary.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion anage Benificiary

        #region Bank & customer Details
        [HttpPost]
        public REGISTRATION_RES GetBranchAtmLocation([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBranchAtmLocation.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Branch & Atm Location Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.BankDetails = IMPSTransactions.GetBranchAtmLocation();
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Branch & Atm Location  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBranchAtmLocation.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GetBankDetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBankDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Bank Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.BankDetails = IMPSTransactions.GetBankDetails(_REGISTRATION_REQ.IsOtherBank);
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Bank Details  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBankDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GetBenificiaryDetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBenificiaryDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                var task = Task.Factory.StartNew(() =>
                {
                    if (string.IsNullOrEmpty(_REGISTRATION_REQ.BenificiaryBankCode))
                        _REGISTRATION_REQ.BenificiaryBankCode = CONFIGURATIONCONFIGDATA.BankCode;

                    if (_REGISTRATION_REQ.IsAccountReg && _REGISTRATION_REQ.BenificiaryBankCode != CONFIGURATIONCONFIGDATA.BankCode)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                        _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.CustomerDetails = IMPSTransactions.GetDefaultDetails();
                        if (_REGISTRATION_REQ.IsMobileReg)
                            _REGISTRATION_RES.BankName = CommanDetails.GetBankName(CONFIGURATIONCONFIGDATA.BankCode);
                        else
                            _REGISTRATION_RES.BankName = CommanDetails.GetBankName(_REGISTRATION_REQ.BenificiaryBankCode);

                        _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                        return;
                    }
                    int status = -1;
                    if (_REGISTRATION_REQ.IsMobileReg && _REGISTRATION_REQ.IsFundTrasfer)
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Checking Benificiary data in switch database for mobile number : " + _REGISTRATION_REQ.BenificiaryMobileNumber);
                        _REGISTRATION_RES.CustomerDetails = IMPSTransactions.VERIFYBENIFICIARY(_REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.UserID, out status);
                        if (status == 0)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary data found in switch database for mobile number : " + _REGISTRATION_REQ.BenificiaryMobileNumber);
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                            _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;

                            if (_REGISTRATION_REQ.IsMobileReg)
                                _REGISTRATION_RES.BankName = CommanDetails.GetBankName(CONFIGURATIONCONFIGDATA.BankCode);
                            else
                                _REGISTRATION_RES.BankName = CommanDetails.GetBankName(_REGISTRATION_REQ.BenificiaryBankCode);

                            _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_RES.CustomerDetails.Rows[0]["CUST_AC_NO"].ToString();
                            _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_RES.CustomerDetails.Rows[0]["MOBILE_NUMBER"].ToString();
                            return;
                        }
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary data not found in switch database for mobile number : " + _REGISTRATION_REQ.BenificiaryMobileNumber);
                    }
                    if (_REGISTRATION_REQ.IsMobileReg)
                        _REGISTRATION_RES.CustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_MOB(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, out status);
                    else if (_REGISTRATION_REQ.IsLoanPayment)
                        _REGISTRATION_RES.CustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_LOAN(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, out status);
                    else
                        _REGISTRATION_RES.CustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_ACC(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, out status);

                    _CommanDetails.SystemLogger.WriteTransLog(this, "Status for beneficiary details is " + status);
                    if (status == 0)
                    {
                        ProcessMessage._BenificiaryDetails = new Dictionary<string, System.Data.DataTable>();
                        if (_REGISTRATION_REQ.IsLoanPayment)
                        { }
                        else if (_REGISTRATION_REQ.IsAccountReg)
                            ProcessMessage._BenificiaryDetails.Add(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_RES.CustomerDetails);
                        else
                            ProcessMessage._BenificiaryDetails.Add(_REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_RES.CustomerDetails);

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                        _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                        _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;

                        if (_REGISTRATION_REQ.IsMobileReg)
                            _REGISTRATION_RES.BankName = CommanDetails.GetBankName(CONFIGURATIONCONFIGDATA.BankCode);
                        else
                            _REGISTRATION_RES.BankName = CommanDetails.GetBankName(_REGISTRATION_REQ.BenificiaryBankCode);
                        if (!_REGISTRATION_REQ.IsLoanPayment)
                        {
                            _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_RES.CustomerDetails.Rows[0]["CUST_AC_NO"].ToString();
                            _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_RES.CustomerDetails.Rows[0]["MOBILE_NUMBER"].ToString();
                        }
                    }
                    else if (status == 74)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidCurrencyCode);
                        _REGISTRATION_RES.ResponseDesc = "This Currency will not be allowed for fund transfer.";
                        _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                        _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    }
                    else if (status == 1)
                    {
                        if (_REGISTRATION_REQ.Text == "RequestMoney")
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                            _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;

                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidAccount);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;

                        }

                    }
                    else
                    {
                        if (_REGISTRATION_REQ.Text == "RequestMoney")
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                            _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        }

                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidAccount);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                _REGISTRATION_RES.CustomerDetails.TableName = "CustomerName";
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer Details Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetBenificiaryDetails.ToString(), 2);
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES CheckCustomerdetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ACCOUNTQUERY.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CheckBeneficary  Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CheckBeneficary Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ACCOUNTQUERY.ToString(), 2);
            return _REGISTRATION_RES;
        }


        #endregion Bank & customer Details

        #region Registration & Login Process

        [HttpPost]
        public async Task<REGISTRATION_RES> GetKeys([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetKeys.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetKeys Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    Authentication AuthReq = new Authentication();
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Getkeys send to db for refno : " + _REGISTRATION_REQ.ReferenceNumber);
                    //if (CONFIGURATIONCONFIGDATA.GetKeys(ref AuthReq.SsmComkey, ref AuthReq.SsmMasterKey, ref AuthReq.SsmPvk, ref AuthReq.HsmZpk, ref AuthReq.HsmPvk, ref AuthReq.HsmComkey, ref AuthReq.HsmCvv1, ref AuthReq.HsmCvv2, ref AuthReq.TmkEncryptedKey))
                    //{
                    //_REGISTRATION_RES.EncryptionKey = AuthReq.SsmMasterKey;
                         _REGISTRATION_RES.EncryptionKey = ConfigurationManager.AppSettings["SSMMK"].ToString();
                         _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                         _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    //}
                    //else
                    //{
                      //  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                      //  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    //}
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Getkeys response from db for refno : " + _REGISTRATION_REQ.ReferenceNumber);
                    //// }
                });
                task.Wait(30000);
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetKeys Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetKeys.ToString(), 2);
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES GetData([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETDATA.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetData Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    string DATA = null;
                    Authentication AuthReq = new Authentication();
                    DataTable details = CONFIGURATIONCONFIGDATA.GetData(_REGISTRATION_REQ.DeviceID);
                    if (details != null && details.Rows.Count > 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.CardDetails = details.Rows[0][0] + "|" + details.Rows[0][1] + "," + details.Rows[1][0] + "|" + details.Rows[1][1]
                            + "," + details.Rows[2][0] + "|" + details.Rows[2][1] + "," + details.Rows[3][0] + "|" + details.Rows[3][1].ToString();
                    }

                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetData Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETDATA.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SIGNUP([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SIGNUP.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SIGNUP  Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessSignUp(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SIGNUP Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SIGNUP.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES VERIFYOTP([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.VERIFYOTP.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** VERIFY OTP Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.VERIFYOTP(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** VERIFY OTP Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.VERIFYOTP.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES CREATEPASSWORD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CREATEPASSWORD.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CREATE PASSWORD Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.CREATEPASSWORD, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "Login password should be 4 characters";
                    return _REGISTRATION_RES;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessCreatePassword(ref _REGISTRATION_RES, _REGISTRATION_REQ);

                    //_CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****MPIN IS: " + _REGISTRATION_REQ.mPIN + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                });
                task.Wait();
                //if (int.Parse(_REGISTRATION_RES.ResponseCode) == (int)enumResponseCode.Approved)
                //{
                //    var task1 = Task.Factory.StartNew(() =>
                //    {
                //        _ProcessMessage.SyncAccounts(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                //    });
                //}

            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CREATE PASSWORD Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CREATEPASSWORD.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES FORGOTPASSWORD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotPassword.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT PASSWORD Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ForgotPassword(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT PASSWORD Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotPassword.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES CHANGEPASSWORD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChangePassword.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Change Password Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.ChangePassword, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "Login password should be 4 characters";

                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                                _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Change Password Transaction Response Send To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    return _REGISTRATION_RES;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ChangePassword(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Change Password Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChangePassword.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES LOGIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            //System.Threading.Thread.Sleep(120000);
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            //_REGISTRATION_REQ.MobileNumber = "97517851855";// for testing purpose
            if (_REGISTRATION_REQ.Isbiometric)
            {
                _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.BiometricLOGIN.ToString(), 1);
            }
            else
            {
                _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.LOGIN.ToString(), 1);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Login Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RegisterTokenID(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    _ProcessMessage.ProcessLogin(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Login Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            if (_REGISTRATION_REQ.Isbiometric)
            {
                _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.BiometricLOGIN.ToString(), 2);
            }
            else
            {
                _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.LOGIN.ToString(), 2);
            }
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES SIGNIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SIGNIN.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SIGN IN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessSignIn(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    // _ProcessMessage.RegisterTokenID(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SIGN IN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SIGNIN.ToString(), 2);
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES CHANGEMPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChangeMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Change mPIN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.ChangeMpin, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "mPIN should be 4 characters";
                    return _REGISTRATION_RES;
                }
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ChangeMpin(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Change mPIN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChangeMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SETMPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateNewMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create New mPIN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.CreateNewMpin, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "mPIN should be 4 characters";
                    return _REGISTRATION_RES;
                }
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CreateNewMpin(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create New mPIN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateNewMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES REQUESTUSERID([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            Authentication AuthReq = new Authentication();
            CONFIGURATIONCONFIGDATA.GetKeys(ref AuthReq.SsmComkey, ref AuthReq.SsmMasterKey, ref AuthReq.SsmPvk, ref AuthReq.HsmZpk, ref AuthReq.HsmPvk, ref AuthReq.HsmComkey, ref AuthReq.HsmCvv1, ref AuthReq.HsmCvv2, ref AuthReq.TmkEncryptedKey);
            _REGISTRATION_RES.EncryptionKey = AuthReq.SsmMasterKey;
            //PASWSWORD = MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.Password, AuthReq.SsmMasterKey);
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.REQUESTUSERID.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** REQUESTUSERID Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessREQUESTUSERID(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** REQUESTUSERID Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SIGNIN.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES VERIFYRESETMPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** VERIFYRESETMPIN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.VERIFYRESETTPIN(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** VERIFYRESETMPIN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES RESETPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** RESETMPIN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RESETPIN(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** RESETMPIN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES UPDATEACCCOUNTDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdateAccountDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** UPDATEACCCOUNT  Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.UpdateAccount(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** UPDATEACCCOUNT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdateAccountDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES PUSHNOTIFICATION([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** PushNotification Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    //_ProcessMessage.ProcessPushNotification(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    _ProcessMessage.ProcessPushNotificationNew(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();

                #region Loger
                try
                {
                    string MobileResponseData = string.Empty;
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** PushNotification Transaction Response To Terminal For Reference Number : " + _REGISTRATION_RES.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public REGISTRATION_RES GETIMAGES([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetImages.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetImages Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.SelectImage(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetImages Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetKeys.ToString(), 2);
            return _REGISTRATION_RES;
        }

        #endregion Registration & Login Process

        #region Manage Accounts

        [HttpPost]
        public REGISTRATION_RES GetCustomerAccounts([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.Get_ManageAccount.ToString(), 1);
            #region Get Account details
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer Account Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //if (_REGISTRATION_REQ.IsCardless && _REGISTRATION_REQ.CustomerID != "000036404")
                //{
                //    _REGISTRATION_RES.ResponseCode = "105";
                //    _REGISTRATION_RES.ResponseDesc = "Coming Soon....";
                //    return _REGISTRATION_RES;
                //}
                var task = Task.Factory.StartNew(() =>
                {
                    if (_REGISTRATION_REQ.IsCreditCard)
                    {
                        _REGISTRATION_REQ.IsCC = true;
                        _ProcessMessage.GET_MANAGEACCOUNT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        if (_REGISTRATION_RES.CustomerDetails.Rows.Count > 0)
                        {
                            _REGISTRATION_REQ.IsCC = false;
                            _REGISTRATION_REQ.IsCreditCard = true;
                            _ProcessMessage.GET_MANAGEACCOUNT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        }
                        else
                        {
                            _REGISTRATION_REQ.IsCC = false;
                            _REGISTRATION_REQ.IsCreditCard = true;
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoCreditCardAccuntFound);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        }
                    }
                    else
                    {
                        _ProcessMessage.GET_MANAGEACCOUNT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    }

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer Account Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.Get_ManageAccount.ToString(), 2);
            return _REGISTRATION_RES;
            #endregion Get Account details
        }

        [HttpPost]
        public REGISTRATION_RES SyncAccounts([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.Get_ManageAccount.ToString(), 1);
            #region Get Account details
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Sync All Accounts Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                var task = Task.Factory.StartNew(() =>
                {
                    //_ProcessMessage.SyncAccounts(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Sync All Accounts Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.Get_ManageAccount.ToString(), 2);
            return _REGISTRATION_RES;
            #endregion Get Account details
        }

        #endregion Manage Account

        #region card Controller
        [HttpPost]
        public REGISTRATION_RES GET_CARDDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetCardDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Card Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.GETCARDDETAILS(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Card Details Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetCardDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES BLOCKCARD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.BlockCard.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Block Card Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.BLOCKCARD(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Block Card Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.BlockCard.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES UNBLOCKCARD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UnBlockCard.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** UnBlock Card Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.UNBLOCKCARD(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** UnBlock Card Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UnBlockCard.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SET_ATMLIMIT([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETATMLIMIT.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET ATM LIMIT Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.SETATMLIMIT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET ATM LIMIT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETATMLIMIT.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SET_POSLIMIT([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETPOSLIMIT.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET POS LIMIT Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.SETPOSLIMIT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET POS LIMIT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETPOSLIMIT.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SET_ATMSTATUS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETATMSTATUS.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET ATM STATUS Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.SETATMSTATUS(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET ATM STATUS Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETATMSTATUS.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SET_POSSTATUS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETPOSSTATUS.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET POS STATUS Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.SETPOSSTATUS(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SET POS STATUS Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SETPOSSTATUS.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GET_ACTIVITYHISTORY([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetActivityHistory.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET ACTIVITY HISTORY Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.GET_ACTIVITYHISTORY(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****GET ACTIVITY HISTORY Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetActivityHistory.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion card Controller

        #region check deposit
        #region Demo Code
        //[ActionName("Upload")]
        //public async Task<HttpResponseMessage> Upload()
        //{
        //    Dictionary<string, object> dict = new Dictionary<string, object>();
        //    REGISTRATION_REQ _REGISTRATION_REQ = new REGISTRATION_REQ();
        //    try
        //    {
        //        var httpRequest = HttpContext.Current.Request;
        //        string[] _ReferenceNumber = httpRequest.Headers.GetValues("ReferenceNumber");
        //        _REGISTRATION_REQ.ReferenceNumber = _ReferenceNumber[0].ToString();
        //        foreach (string file in httpRequest.Files)
        //        {
        //            HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.Created);

        //            var postedFile = httpRequest.Files[file];
        //            try
        //            {
        //                using (var stringWriter = new StringWriter())
        //                {
        //                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Cheque Deposit Transaction Request Received From Terminal For Reference Number : " + postedFile.FileName + Environment.NewLine + Environment.NewLine));
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //            }
        //            if (postedFile != null && postedFile.ContentLength > 0)
        //            {

        //                int MaxContentLength = 1024 * 1024 * 1; //Size = 1 MB  

        //                IList<string> AllowedFileExtensions = new List<string> { ".jpg", ".gif", ".png" };
        //                var ext = postedFile.FileName.Substring(postedFile.FileName.LastIndexOf('.'));
        //                var extension = ext.ToLower();
        //                if (!AllowedFileExtensions.Contains(extension))
        //                {

        //                    var message = string.Format("Please Upload image of type .jpg,.gif,.png.");

        //                    dict.Add("error", message);
        //                    return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
        //                }

        //                var filePath = HttpContext.Current.Server.MapPath("~/" + postedFile.FileName + extension);

        //                postedFile.SaveAs(filePath);

        //            }

        //        }
        //        var message1 = string.Format("Image Updated Successfully.");
        //        return Request.CreateErrorResponse(HttpStatusCode.Created, message1); ;
        //        //var res = string.Format("Please Upload a image.");
        //        //dict.Add("error", res);
        //        //return Request.CreateResponse(HttpStatusCode.NotFound, dict);
        //    }
        //    catch (Exception ex)
        //    {
        //        var res = string.Format("some Message");
        //        dict.Add("error", res);
        //        return Request.CreateResponse(HttpStatusCode.NotFound, dict);
        //    }
        //}
        #endregion Demo Code

        [HttpPost]
        [ActionName("ChequeDeposit")]
        public REGISTRATION_RES ChequeDeposit()
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            REGISTRATION_REQ _REGISTRATION_REQ = new REGISTRATION_REQ();
            try
            {
                var httpRequest = HttpContext.Current.Request;
                string[] _DeviceID = { }; string[] _ReferenceNumber = { }; string[] _CustomerID = { }; string[] _UserID = { }; string[] _MobileNumber = { };
                string[] _AccountNumber = { }; string[] _mPIN = { }; string[] _ChequeNumber = { }; string[] _DepositAmount = { }; string[] _DepositAccountNumber = { }; string[] _ChequeAccountNumber = { };
                string[] _ChequeDate = { };

                try
                { _DeviceID = httpRequest.Headers.GetValues("DeviceID"); }
                catch { }
                try
                { _ReferenceNumber = httpRequest.Headers.GetValues("ReferenceNumber"); }
                catch { }
                try
                { _CustomerID = httpRequest.Headers.GetValues("CustomerID"); }
                catch { }
                try
                { _UserID = httpRequest.Headers.GetValues("UserID"); }
                catch { }
                try
                { _MobileNumber = httpRequest.Headers.GetValues("MobileNumber"); }
                catch { }
                try
                { _AccountNumber = httpRequest.Headers.GetValues("AccountNumber"); }
                catch { }
                try
                { _mPIN = httpRequest.Headers.GetValues("mPIN"); }
                catch { }
                try
                { _ChequeNumber = httpRequest.Headers.GetValues("ChequeNumber"); }
                catch { }
                try
                { _DepositAmount = httpRequest.Headers.GetValues("DepositAmount"); }
                catch { }
                try
                { _DepositAccountNumber = httpRequest.Headers.GetValues("DepositAccountNumber"); }
                catch { }
                try
                { _ChequeAccountNumber = httpRequest.Headers.GetValues("ChequeAccountNumber"); }
                catch { }


                try
                { _ChequeDate = httpRequest.Headers.GetValues("ChequeDate"); }
                catch { }

                try
                { _REGISTRATION_REQ.DeviceID = _DeviceID[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.ReferenceNumber = _ReferenceNumber[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.CustomerID = _CustomerID[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.UserID = _UserID[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.MobileNumber = _MobileNumber[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.AccountNumber = _AccountNumber[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.mPIN = _mPIN[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.ChequeNumber = _ChequeNumber[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.DepositAmount = _DepositAmount[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.DepositAccountNumber = _DepositAccountNumber[0].ToString(); }
                catch { }
                try
                { _REGISTRATION_REQ.ChequeAccountNumber = _ChequeAccountNumber[0].ToString(); }
                catch { }

                try
                { _REGISTRATION_REQ.ChequeDate = _ChequeDate[0].ToString(); }
                catch { }



                foreach (string file in httpRequest.Files)
                {
                    var PostedFile = httpRequest.Files[file];

                    if (PostedFile != null && PostedFile.ContentLength > 0)
                    {
                        int MaxContentLength = 1024 * 1024 * 1; //Size = 1 MB  

                        if (PostedFile.FileName.Contains("FrontImage"))
                        {
                            _REGISTRATION_REQ.FrontImage = PostedFile.FileName;
                            System.IO.Stream fs = PostedFile.InputStream;
                            //byte[] bytes = ReduceImageSize(0.5, fs);
                            //System.IO.BinaryReader br = new System.IO.BinaryReader(fs);
                            //Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            //FrontImage = bytes;
                            _REGISTRATION_REQ.FrontImage = "FrontImage_" + _REGISTRATION_REQ.ReferenceNumber + _REGISTRATION_REQ.DepositAccountNumber + _REGISTRATION_REQ.ChequeNumber + _REGISTRATION_REQ.AccountNumber + ".jpg";


                            //FrontImage = Convert.ToBase64String(bytes, 0, bytes.Length);
                            var filePath = HttpContext.Current.Server.MapPath("~/ChequeImages/" + _REGISTRATION_REQ.FrontImage);
                            ReduceImageSize(0.5, fs, filePath);
                            //PostedFile.SaveAs(filePath);
                        }
                        else if (PostedFile.FileName.Contains("BackImage"))
                        {
                            _REGISTRATION_REQ.BackImage = PostedFile.FileName;
                            System.IO.Stream fs = PostedFile.InputStream;
                            //byte[] bytes = ReduceImageSize(0.5, fs);
                            //System.IO.BinaryReader br = new System.IO.BinaryReader(fs);
                            //Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            //FrontImage = bytes;
                            _REGISTRATION_REQ.BackImage = "BackImage_" + _REGISTRATION_REQ.ReferenceNumber + _REGISTRATION_REQ.DepositAccountNumber + _REGISTRATION_REQ.ChequeNumber + _REGISTRATION_REQ.AccountNumber + ".jpg";
                            //FrontImage = Convert.ToBase64String(bytes, 0, bytes.Length);
                            var filePath = HttpContext.Current.Server.MapPath("~/ChequeImages/" + _REGISTRATION_REQ.BackImage);
                            ReduceImageSize(0.5, fs, filePath);
                            //PostedFile.SaveAs(filePath);
                        }
                    }
                }

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Cheque Deposit Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ChequeDeposit(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****Cheque Deposit Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChequeDeposit.ToString(), 2);
            return _REGISTRATION_RES;

        }

        private void ReduceImageSize(double scaleFactor, Stream sourcePath, string targetPath)
        {
            using (var image = System.Drawing.Image.FromStream(sourcePath))
            {
                var newWidth = (int)(image.Width * scaleFactor);
                var newHeight = (int)(image.Height * scaleFactor);
                var thumbnailImg = new Bitmap(newWidth, newHeight);
                var thumbGraph = Graphics.FromImage(thumbnailImg);
                thumbGraph.CompositingQuality = CompositingQuality.HighQuality;
                thumbGraph.SmoothingMode = SmoothingMode.HighQuality;
                thumbGraph.InterpolationMode = InterpolationMode.HighQualityBicubic;
                var imageRectangle = new Rectangle(0, 0, newWidth, newHeight);
                thumbGraph.DrawImage(image, imageRectangle);
                thumbnailImg.Save(targetPath, image.RawFormat);
            }
        }

        #endregion check deposit

        #region Add & Get secondary account
        [HttpPost]
        public REGISTRATION_RES GET_ADDACCDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETADDACCOUNT.ToString(), 1);
            _REGISTRATION_REQ.AccountNumber = _REGISTRATION_REQ.NewAccountNumber;
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET ADD ACCOUNT Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    int status = -1;
                    DataTable dt = new DataTable();
                    dt.Columns.Add("FIRST_NAME");
                    dt.Columns.Add("CUST_NO");
                    dt.Columns.Add("CCY");
                    dt.Columns.Add("CUST_AC_NO");
                    dt.Columns.Add("MOBILE_NUMBER");
                    dt.Columns.Add("ACCOUNT_TYPE");
                    dt.Columns.Add("ACCOUNT_STATUS");
                    dt.Columns.Add("BRANCHCODE");
                    DataRow row = dt.NewRow();
                    row["FIRST_NAME"] = _REGISTRATION_RES.CustomerName;
                    row["CUST_NO"] = _REGISTRATION_RES.CustomerID;
                    row["CCY"] = "BTN";
                    row["CUST_AC_NO"] = _REGISTRATION_RES.AccountNumber;
                    row["MOBILE_NUMBER"] = _REGISTRATION_RES.MobileNumber;
                    row["ACCOUNT_TYPE"] = _REGISTRATION_RES.AccountType;
                    row["ACCOUNT_STATUS"] = _REGISTRATION_RES.AccountStatus;
                    row["BRANCHCODE"] = _REGISTRATION_RES.BranchCode;
                    dt.Rows.Add(row);
                    // DataRow row2 = dt.NewRow();
                    // dt.Rows.Add(row2);
                    //dt.Rows[0]["index"] = 5;

                    _REGISTRATION_RES.CustomerDetails = dt;//IMPSTransactions.GETCUSTOMERDETAILS_ADDACC(_REGISTRATION_REQ.NewAccountNumber, out status);
                    if (_REGISTRATION_RES.ResponseCode == "00" && _REGISTRATION_REQ.CustomerID == _REGISTRATION_RES.CustomerID)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _ProcessMessage.processAddAccount(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    }
                    else
                    {
                        _REGISTRATION_RES.CustomerDetails = null;
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidAccount);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET ADD ACCOUNT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETADDACCOUNT.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES ADDNEWACCOUNT([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ADDACCOUNT.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** ADD ACCOUNT Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (_REGISTRATION_REQ.AccountNumber == _REGISTRATION_REQ.NewAccountNumber)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = "This account already exist.";
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return _REGISTRATION_RES;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    int status = -1;
                    // _ProcessMessage.processAddAccount(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    //if(_REGISTRATION_RES.ResponseCode==CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved))
                    // {
                    IMPSTransactions.ADDACCOUNT(_REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.NewMobileNumber, _REGISTRATION_REQ.NewAccountNumber, _REGISTRATION_REQ.AccountType, _REGISTRATION_REQ.CurrencyCode, _REGISTRATION_REQ.AccountStatus, _REGISTRATION_REQ.BranchCode, out status);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Status : " + status);
                    if (status == 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountAddedSuccess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountAddedSuccess);
                    }
                    else if (status == 2)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidAccount);
                        _REGISTRATION_RES.ResponseDesc = "This account already exist.";
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** ADD ACCOUNT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ADDACCOUNT.ToString(), 2);
            return _REGISTRATION_RES;
        }
        #endregion Add & Get secondary account

        #region Calculator

        [HttpPost]
        public REGISTRATION_RES LoanCalculator([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {
                double principal = Convert.ToDouble(_REGISTRATION_REQ.LoanAmount);
                double Downpayment = Convert.ToDouble(0);
                double duration = _REGISTRATION_REQ.Months;
                double InterestRate = Convert.ToDouble(_REGISTRATION_REQ.InterestRate);
                double AmoutToBePaid = 0;
                AmoutToBePaid = Calculate_Amount(principal - Downpayment, duration, InterestRate);
                _REGISTRATION_RES.MonthlyPayment = AmoutToBePaid.ToString("f2");
                MonthlyPayment = _REGISTRATION_RES.MonthlyPayment;
                _REGISTRATION_RES.LoanAmount = _REGISTRATION_REQ.LoanAmount;
                _REGISTRATION_RES.InterestRate = _REGISTRATION_REQ.InterestRate.ToString();
                _REGISTRATION_RES.Months = _REGISTRATION_REQ.Months;
                _REGISTRATION_RES.DtBrekegofloan = ProcessLoanDetails(principal - Downpayment, duration, InterestRate, AmoutToBePaid);
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            return _REGISTRATION_RES;

        }

        private static double Calculate_Amount(double principal, double duration, double interestRate)
        {
            try
            {
                double amttobepaid = 0;
                double irate = 0;
                irate = (interestRate / 100) * (1.0 / 12.0);
                amttobepaid = (principal * irate) / (1 - 1 / Math.Pow((1 + irate), duration));
                return amttobepaid;
            }
            catch
            {
                return 0.0;
            }

        }

        private DataTable ProcessLoanDetails(double pPrincipal, double pDuration, double interestRate, double monthlyPayment)
        {
            try
            {
                totalInterest = 0;
                totalPrincipal = 0;
                ArrayList paymentList = CalculatePayments(pPrincipal, pDuration, interestRate, monthlyPayment);
                int nodeCount = paymentList.Count;
                DataTable DtDetails = new DataTable();
                DtDetails.Columns.Add("Month");
                DtDetails.Columns.Add("Balance");
                DtDetails.Columns.Add("Payment");
                DtDetails.Columns.Add("InterestPaid");
                DtDetails.Columns.Add("PrincipalPaid");

                for (int count = 0; count <= nodeCount - 1; count++)
                {
                    MonthlyDetail monthlyDetail = (MonthlyDetail)paymentList[count];
                    DtDetails.Rows.Add(Convert.ToString(count + 1), Convert.ToDouble(monthlyDetail.getBalance()).ToString("N2"), Convert.ToDouble(monthlyDetail.getPayment()).ToString("N2"), Convert.ToDouble(monthlyDetail.getInterestPaid()).ToString("N2"), Convert.ToDouble(monthlyDetail.getPrincipalPaid()).ToString("N2"));
                }
                //Total Details 

                DtDetails.Rows.Add("Total ", "", "", Convert.ToDouble(totalInterest.ToString("f2")).ToString("N2"), Convert.ToDouble(totalPrincipal.ToString("f2")).ToString("N2"));
                return DtDetails;
            }
            catch { return null; }
        }

        private ArrayList CalculatePayments(double pPrincipal, double pDuration, double interestRate, double monthlyPayment)
        {
            double monthinterest;
            double monthprincipal;

            MonthlyDetail monthlyDetail = null;

            double balanceamount = pPrincipal;
            double months = pDuration;

            ArrayList paymentList = new ArrayList();

            for (int count = 0; count <= pDuration - 1; count++)
            {
                monthinterest = getInterestamt(balanceamount, interestRate);
                monthprincipal = monthlyPayment - monthinterest;
                balanceamount = balanceamount - monthprincipal;
                monthlyDetail = new MonthlyDetail();
                monthlyDetail.setMonths(Convert.ToString(count));
                monthlyDetail.setBalance(balanceamount.ToString("f2"));
                totalPrincipal = totalPrincipal + monthprincipal;
                monthlyDetail.setPrincipalPaid(monthprincipal.ToString("f2"));
                totalInterest = totalInterest + monthinterest;
                monthlyDetail.setInterestPaid(monthinterest.ToString("f2"));
                monthlyDetail.setPayment(MonthlyPayment);
                paymentList.Add(monthlyDetail);
            }
            return paymentList;
        }

        public double getInterestamt(double principal, double interest)
        {
            return principal * ((interest / 100) * (1.0 / 12.0));
        }

        [HttpPost]
        public REGISTRATION_RES RecuringCalculator([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Recuring Deposit Calculator Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {


                DataTable DtCalcValues = IMPSTransactions.CalulatorValues(enumCalcType.Recurring.ToString(), _REGISTRATION_REQ.Months);
                _REGISTRATION_REQ.InterestRate = Convert.ToDouble(DtCalcValues.Rows[0]["RATE"].ToString());



                /*calculate*/

                DataTable MinMaxData = IMPSTransactions.GetMinMaxData("", "", "", "", "", _REGISTRATION_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());


                if (MinMaxData != null && MinMaxData.Rows.Count > 0)
                {

                    int month = _REGISTRATION_REQ.Months;
                    double amount = _REGISTRATION_REQ.DepositAmt;
                    if (Convert.ToInt16(MinMaxData.Rows[0][6]) <= month)
                    {
                        if (Convert.ToDouble(MinMaxData.Rows[0][7]) <= amount)
                        {
                            double principal = Convert.ToDouble(_REGISTRATION_REQ.DepositAmt);
                            double Downpayment = Convert.ToDouble(0);
                            double duration = _REGISTRATION_REQ.Months;
                            double InterestRate = Convert.ToDouble(_REGISTRATION_REQ.InterestRate);
                            double quaters = Math.Floor(duration / 1);

                            double FinalAmt = 0.0;
                            int i = 1;
                            for (i = 1; i < quaters + 1; i++)
                            {
                                double MonthlyAmount = Convert.ToInt32(principal * i) * ((Math.Pow(InterestRate / 1200 + 1, 1) - 1) / 1);
                                FinalAmt = FinalAmt + MonthlyAmount;
                            }

                            double newpayment = FinalAmt + (principal * duration);
                            string MaturityAmt = newpayment.ToString("N2");
                            string IntrestAmt = FinalAmt.ToString("N2");
                            string Deposit = (Convert.ToDouble(newpayment.ToString("N2")) - Convert.ToDouble(newpayment.ToString("N2"))).ToString();

                            _REGISTRATION_RES.MaturityAmount = MaturityAmt.ToString();
                            _REGISTRATION_RES.InterestAmount = IntrestAmt.ToString();
                            _REGISTRATION_RES.TotalDepositAmount = (principal * duration).ToString("N2");
                            _REGISTRATION_RES.InterestRate = _REGISTRATION_REQ.InterestRate.ToString("N2");

                            _REGISTRATION_RES.MaturityAmount = Convert.ToDouble(_REGISTRATION_RES.MaturityAmount).ToString("N");
                            _REGISTRATION_RES.InterestAmount = Convert.ToDouble(_REGISTRATION_RES.InterestAmount).ToString("N");
                            _REGISTRATION_RES.TotalDepositAmount = Convert.ToDouble(_REGISTRATION_RES.TotalDepositAmount).ToString("N");


                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        }
                        else
                        {
                            //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDTDAmount);
                            //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDAmount);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedRDAmount).Replace("@Amount", Convert.ToDouble(MinMaxData.Rows[0][7]).ToString());



                            _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for RD");
                        }

                    }
                    else
                    {
                        //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDTDMonth);
                        //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);


                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDMonth);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedRDMonth).Replace("@Month", Convert.ToInt16(MinMaxData.Rows[0][6]).ToString());



                        _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for RD");
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for RD");
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Recuring Deposit Calculator Transaction Response Send To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES FixDepositCalculator([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Fix Deposit Calculator Deposit Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();



            try
            {
                DataTable DtCalcValues = IMPSTransactions.CalulatorValues(enumCalcType.Fixed.ToString(), _REGISTRATION_REQ.Days);
                _REGISTRATION_REQ.InterestRate = Convert.ToDouble(DtCalcValues.Rows[0]["RATE"].ToString());


                /*calculate*/
                // DataTable MinMaxData;
                //MinMaxData = IMPSTransactions.GetMinMaxData("", "", "", "", "", _REGISTRATION_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());
                DataTable MinMaxData = IMPSTransactions.GetMinMaxData("", "", "", "", "", _REGISTRATION_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());


                if (MinMaxData != null && MinMaxData.Rows.Count > 0)
                {

                    int days = _REGISTRATION_REQ.Days;
                    _CommanDetails.SystemLogger.WriteTransLog(this, "days TD " + days);

                    double amount = _REGISTRATION_REQ.DepositAmt;
                    if (Convert.ToInt16(MinMaxData.Rows[0][8]) <= days)
                    {
                        if (Convert.ToDouble(MinMaxData.Rows[0][9]) <= amount)
                        {


                            double principal = Convert.ToDouble(_REGISTRATION_REQ.DepositAmt);
                            double Downpayment = Convert.ToDouble(0);
                            double duration = Convert.ToDouble(_REGISTRATION_REQ.Days);
                            double InterestRate = _REGISTRATION_REQ.InterestRate;
                            double Intrest = Convert.ToInt32(principal * InterestRate) * duration / 36525;
                            double Maturity = Intrest + principal;

                            string MaturityAmt = Maturity.ToString("N2");
                            string IntrestAmt = Intrest.ToString("N2");
                            string Deposit = principal.ToString("N2");

                            _REGISTRATION_RES.MaturityAmount = MaturityAmt.ToString();
                            _REGISTRATION_RES.InterestAmount = IntrestAmt.ToString();
                            _REGISTRATION_RES.TotalDepositAmount = Deposit.ToString();
                            _REGISTRATION_RES.InterestRate = _REGISTRATION_REQ.InterestRate.ToString("N2");

                            _REGISTRATION_RES.MaturityAmount = Convert.ToDouble(_REGISTRATION_RES.MaturityAmount).ToString("N");
                            _REGISTRATION_RES.InterestAmount = Convert.ToDouble(_REGISTRATION_RES.InterestAmount).ToString("N");
                            _REGISTRATION_RES.TotalDepositAmount = Convert.ToDouble(_REGISTRATION_RES.TotalDepositAmount).ToString("N");

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);


                        }
                        else
                        {
                            //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDTDAmount);
                            //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedTDAmount);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedTDAmount).Replace("@Amount", Convert.ToDouble(MinMaxData.Rows[0][9]).ToString());



                            _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for TD");
                        }

                    }
                    else
                    {
                        //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedRDTDMonth);
                        //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedTDMonth);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedTDMonth).Replace("@Month", Convert.ToInt16(MinMaxData.Rows[0][8]).ToString());

                        _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for TD ");
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "No data fount for TD ");
                }


            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Fixed Deposit Calculator Transaction Response Send To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _REGISTRATION_RES;

        }

        #endregion Calculator

        #region Offline Request

        [HttpPost]
        public REGISTRATION_RES AccountStatementRequest([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AccountStatementRequest.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Account Statement Get Bank Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                if (!DataValidator(enumTransactionType.AccountStatementRequest, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.StatementValidation);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    return _REGISTRATION_RES;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    int status = -1;
                    _ProcessMessage.StatementRequest(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Account Statement Request Status is : " + status.ToString() + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Account Statement Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AccountStatementRequest.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES ChequeBookRequest([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChequeBook.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Cheque Book Request Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    int status = -1;
                    if (CONFIGURATIONCONFIGDATA.SKIPMPIN)
                    {
                        IMPSTransactions.OfflineRequest(_REGISTRATION_REQ.REMITTERACC, _REGISTRATION_REQ.MobileNumber, enumTransactionType.ChequeBook.ToString(), _REGISTRATION_REQ.FromDate, _REGISTRATION_REQ.ToDate, "", _REGISTRATION_REQ.State, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Cheque Book Request Status is : " + status.ToString() + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber);
                        if (status != 0)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(status.ToString());
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeBookRequestAccepted);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeBookRequestAccepted);
                        }
                    }
                    else
                    {
                        _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _SSM.VerifyPin(ref _Authentication, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID);

                        if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                        {
                            IMPSTransactions.OfflineRequest(_REGISTRATION_REQ.REMITTERACC, _REGISTRATION_REQ.MobileNumber, enumTransactionType.ChequeBook.ToString(), _REGISTRATION_REQ.FromDate, _REGISTRATION_REQ.ToDate, "", _REGISTRATION_REQ.State, out status);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Cheque Book Request Status is : " + status.ToString() + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber);
                            if (status != 0)
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(status.ToString());
                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeBookRequestAccepted);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeBookRequestAccepted);
                            }
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            return;
                        }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Cheque Book Request Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ChequeBook.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES DebitCardRequest([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.DebitCard.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Debit Card Request Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    int status = -1;
                    if (CONFIGURATIONCONFIGDATA.SKIPMPIN)
                    {
                        IMPSTransactions.OfflineRequest(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.CARDTYPE, _REGISTRATION_REQ.FromDate, _REGISTRATION_REQ.ToDate, "", _REGISTRATION_REQ.State, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Debit Card Request Status is : " + status.ToString() + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber);
                        if (status != 0)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(status.ToString());
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DebitCardRequestAccepted);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DebitCardRequestAccepted);
                        }
                    }
                    else
                    {
                        _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _SSM.VerifyPin(ref _Authentication, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID);
                        if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                        {
                            IMPSTransactions.OfflineRequest(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.CARDTYPE, _REGISTRATION_REQ.FromDate, _REGISTRATION_REQ.ToDate, "", _REGISTRATION_REQ.State, out status);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Debit Card Request Status is : " + status.ToString() + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber);
                            if (status != 0)
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(status.ToString());
                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DebitCardRequestAccepted);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DebitCardRequestAccepted);
                            }
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            return;
                        }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Debit Card Request Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.DebitCard.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES CardLessRequest([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CardLess.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Card Less Request Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                if (Convert.ToInt64(_REGISTRATION_REQ.WDLAMOUNT) % 100 != 0 && Convert.ToInt64(_REGISTRATION_REQ.WDLAMOUNT) > 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MultipleOf100);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.MultipleOf100);
                    return _REGISTRATION_RES;
                }
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CardLessRequest(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Card Less Request Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CardLess.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Offline Request

        #region Other Process

        public string GenerateMSGID()
        {
            DateTime date = DateTime.Now;
            int m = date.Month;
            int d = date.Day;
            int y = date.Year;
            int jjj = date.DayOfYear;
            string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') +
                        DateTime.Now.Hour.ToString().PadLeft(2, '0') + DateTime.Now.Minute.ToString().PadLeft(2, '0') + DateTime.Now.Second.ToString().PadLeft(2, '0') + DateTime.Now.Millisecond.ToString().PadLeft(3, '0');
            return jd.PadLeft(14, '0');

        }

        public string GenerateReferenceNumber()
        {
            DateTime date = DateTime.Now;
            int m = date.Month;
            int d = date.Day;
            int y = date.Year;
            int jjj = date.DayOfYear;
            string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') +
                        DateTime.Now.Hour.ToString().PadLeft(2, '0') + DateTime.Now.Minute.ToString().PadLeft(2, '0') + DateTime.Now.Second.ToString().PadLeft(2, '0');
            return jd.PadLeft(12, '0');

        }

        public string NQRCGenerateReferenceNumber()
        {
            DateTime date = DateTime.Now;
            int m = date.Month;
            int d = date.Day;
            int y = date.Year;
            int jjj = date.DayOfYear;

            string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') + DateTime.Now.Hour.ToString().PadLeft(2, '0')
                        //  + DateTime.Now.Minute.ToString().PadLeft(2, '0') + DateTime.Now.Second.ToString().PadLeft(2, '0') + DateTime.Now.Millisecond.ToString().Substring(0, 2).PadLeft(2, '0');
                        + DateTime.Now.Minute.ToString().PadLeft(2, '0') + ClsSequenceNo.SequenceNo.ToString().PadLeft(4, '0');

            ClsSequenceNo.SequenceNo = ClsSequenceNo.SequenceNo + 1;
            _CommanDetails.SystemLogger.WriteTransLog(this, "after SequenceNo" + ClsSequenceNo.SequenceNo.ToString());
            _CommanDetails.SystemLogger.WriteTransLog(this, "Return rrn  :: " + jd.PadLeft(12, '0'));
            return jd.PadLeft(12, '0');

        }

        public string NQRCGenerateReferenceNumberNew()
        {
            DateTime date = DateTime.Now;
            int m = date.Month;
            int d = date.Day;
            int y = date.Year;
            int jjj = date.DayOfYear;

            string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0')
           + DateTime.Now.Hour.ToString().PadLeft(2, '0') + ConfigurationManager.AppSettings["BankIdentifier"]
           + ClsSequenceNoRMA.SequenceNo.ToString().PadLeft(5, '0');

            ClsSequenceNoRMA.SequenceNo = ClsSequenceNoRMA.SequenceNo + 1;
            _CommanDetails.SystemLogger.WriteTransLog(this, "after SequenceNo" + ClsSequenceNoRMA.SequenceNo.ToString());
            _CommanDetails.SystemLogger.WriteTransLog(this, "Return rrn  :: " + jd.PadLeft(12, '0'));
            return jd.PadLeft(12, '0');

        }

        public string RMA_RRNGenerateReferenceNumber()
        {
            try
            {
                DateTime date = DateTime.Now;
                int m = date.Month;
                int d = date.Day;
                int y = date.Year;
                int jjj = date.DayOfYear;
                int Psequanceout = -1;
                int SequenceNo = 1;
                DataTable DBSequance = IMPSTransactions.GetSequeanceNumber(out Psequanceout);
                if (DBSequance.Rows.Count > 0)
                {
                    SequenceNo = Convert.ToInt32(DBSequance.Rows[0][0].ToString());
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "SequenceNo get from DB :" + SequenceNo.ToString());

                //if (SequenceNo == 99998)
                //{
                //    SequenceNo = 1;
                //}
                string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') + DateTime.Now.Hour.ToString().PadLeft(2, '0')
                    + ConfigurationManager.AppSettings["BankIdentifier"].ToString() + SequenceNo.ToString().PadLeft(5, '0');

                _CommanDetails.SystemLogger.WriteTransLog(this, "Return rrn  :: " + jd.PadLeft(12, '0'));

                //SequenceNo = SequenceNo + 1;
                //IMPSTransactions.NextSequanceNumberUpdate(SequenceNo);
                return jd.PadLeft(12, '0');
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                return null;
            }
        }

        class ClsSequenceNo
        {
            public static int _sequenceNo;
            public static int SequenceNo
            {
                get
                {
                    if (_sequenceNo == 0 || _sequenceNo >= 9998)
                    {
                        _sequenceNo = 1;
                    }
                    return _sequenceNo;
                }
                set
                {
                    _sequenceNo = value;
                }
            }
        }

        class ClsSequenceNoRMA
        {
            public static int _sequenceNo;
            public static int SequenceNo
            {
                get
                {
                    if (_sequenceNo == 0 || _sequenceNo >= 99998)
                    {
                        _sequenceNo = 1;
                    }
                    return _sequenceNo;
                }
                set
                {
                    _sequenceNo = value;
                }
            }
        }


        //public bool DataValidator(enumTransactionType _TransType, REGISTRATION_REQ _REGISTRATION_REQ, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        //{
        //    bool status = false;
        //    Authentication AuthReq = new Authentication();
        //    CONFIGURATIONCONFIGDATA.GetKeys(ref AuthReq.SsmComkey, ref AuthReq.SsmMasterKey, ref AuthReq.SsmPvk, ref AuthReq.HsmZpk, ref AuthReq.HsmPvk, ref AuthReq.HsmComkey, ref AuthReq.HsmCvv1, ref AuthReq.HsmCvv2, ref AuthReq.TmkEncryptedKey);
        //    try
        //    {
        //        switch (_TransType)
        //        {
        //            case enumTransactionType.CreateNewMpin:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.NewMPIN))
        //                    return false;
        //                else
        //                    return true;
        //                break;


        //            case enumTransactionType.FundTransfer:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;



        //              case enumTransactionType.MpayAccountBlock:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.CustomerID))
        //                    return status = false;
        //                 if (string.IsNullOrEmpty(_REGISTRATION_REQ.DeviceID))
        //                    return status = false;
        //                   if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
        //                    return status = false;
        //                else
        //                    return true;

        //                break;


        //              case enumTransactionType.RequestMoneyBlockMobileNumber:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.BenificiaryMobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.REMITTERACC))
        //                    return status = false;

        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.CustomerID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.REMITTERNAME))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.flag))
        //                    return status = false;
        //                else
        //                    return true;

        //                break;








        //            case enumTransactionType.CreateGreenpin:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
        //                    return status = false;

        //                if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.ATMPIN, AuthReq.SsmMasterKey).Length != 4)
        //                    return false;
        //                else
        //                    return true;

        //                break;


        //            case enumTransactionType.CreateGreenpinValidation:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
        //                    return status = false;

        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.CARDNUMBER))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.CARDEXP))
        //                    return status = false;

        //                else
        //                    return true;

        //                break;



        //            case enumTransactionType.ContestantDetails:
        //                if (string.IsNullOrEmpty(_REGISTRATION_REQ.SHOWID))
        //                    return status = false;

        //                else
        //                    return status = true;
        //                break;



        //            case enumTransactionType.BNgul:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;



        //            case enumTransactionType.RequestMoney:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;


        //            case enumTransactionType.GetBenificiaryDetails:
        //                if (!_REGISTRATION_REQ.IsMobileReg && !_REGISTRATION_REQ.IsAccountReg)
        //                    return false;
        //                else
        //                    return true;
        //                break;


        //            case enumTransactionType.CREATEPASSWORD:
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "Key : " + AuthReq.SsmMasterKey + " For RRN : " + _REGISTRATION_REQ.ReferenceNumber);
        //                if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.Password, AuthReq.SsmMasterKey).Length != 4)
        //                    return false;
        //                else
        //                    return true;
        //                break;

        //            case enumTransactionType.ChangePassword:
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "Key : " + AuthReq.SsmMasterKey + " For RRN : " + _REGISTRATION_REQ.ReferenceNumber);
        //                if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.NewPassword, AuthReq.SsmMasterKey).Length != 4)
        //                    return false;
        //                else
        //                    return true;
        //                break;

        //            case enumTransactionType.ChangeMpin:
        //                if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.NewMPIN, AuthReq.SsmMasterKey).Length != 4)
        //                    return false;
        //                else
        //                    return true;
        //                break;
        //            case enumTransactionType.BTRecharge:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.GetBPCOutstandingAmount:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.BPCPayment:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TCELLPREPAID:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TCELLPOSTPAID:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TCELLLEASELINEPAYMENT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TCELLPOSTPAIDOUTSTANDINGAMOUNT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TCELLLEASELINEOUTSTANDINGAMOUNT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber.ToString()))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.CREDITCARDPAYMENT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CREDITCARDACC.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.DRUKCOM:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.GetListOfCustomerID:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.GetListOfLoanAccount:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CustomerBaseNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.ViewLoanDetails:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LoanAccountNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.GetListOfProducts:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.GetListOfNppfLoanAccount:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.NPPFPayment:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.ETHOMETHO:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.WaterOutstandingDetails:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.WaterBillNumber.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerName.ToString()))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.WaterBillPay:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.WaterBillNumber.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.TAXOUTSTANDING:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.VOUCHERNUMBER.ToString()))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.TAXPAYMENT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.VOUCHERNUMBER.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.DONATION:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DONORID.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.ShowPayment:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ShowID.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;


        //            case enumTransactionType.AccountStatementRequest:
        //                if ((DateTime.ParseExact(_REGISTRATION_REQ.ToDate, "d/M/yyyy", CultureInfo.InvariantCulture) - DateTime.ParseExact(_REGISTRATION_REQ.FromDate, "d/M/yyyy", CultureInfo.InvariantCulture)).TotalDays > 90)
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.BTPOSTPAID:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;


        //            case enumTransactionType.BTLeaseLine:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.BTPOSTPAIDPAYMENT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;
        //            case enumTransactionType.GetRICBOutstandingAmount:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber.ToString()))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //            case enumTransactionType.RICBPAYMENT:
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.SERIALNO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber.ToString()))
        //                    return status = false;
        //                if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERNAME.ToString()))
        //                    return status = false;
        //                if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
        //                    return status = false;
        //                else
        //                    return status = true;
        //                break;

        //        }
        //        return status;
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        return false;
        //    }
        //}

        //public static string NQRCGenerateReferenceNumber()
        //{
        //    DateTime date = DateTime.Now;
        //    int m = date.Month;
        //    int d = date.Day;
        //    int y = date.Year;
        //    int jjj = date.DayOfYear;

        //    string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') +
        //               DateTime.Now.Hour.ToString().PadLeft(2, '0') + DateTime.Now.Minute.ToString().PadLeft(2, '0')
        //               + DateTime.Now.Second.ToString().PadLeft(2, '0') + DateTime.Now.Millisecond.ToString().Substring(0, 2).PadLeft(2, '0');
        //    return jd.PadLeft(12, '0');


        //    //string jd = y.ToString().Substring(y.ToString().Length - 1) + jjj.ToString().PadLeft(3, '0') +
        //    //            date.ToString("HH").PadLeft(2, '0') + date.ToString("HHmmss").PadLeft(6, '0');
        //    //return jd.PadLeft(12, '0');

        //}

        public bool DataValidator(enumTransactionType _TransType, REGISTRATION_REQ _REGISTRATION_REQ, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            bool status = false;
            Authentication AuthReq = new Authentication();
            CONFIGURATIONCONFIGDATA.GetKeys(ref AuthReq.SsmComkey, ref AuthReq.SsmMasterKey, ref AuthReq.SsmPvk, ref AuthReq.HsmZpk, ref AuthReq.HsmPvk, ref AuthReq.HsmComkey, ref AuthReq.HsmCvv1, ref AuthReq.HsmCvv2, ref AuthReq.TmkEncryptedKey);
            try
            {
                switch (_TransType)
                {
                    case enumTransactionType.CreateNewMpin:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.NewMPIN))
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.FundTransfer:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.OtherBank:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.AcquirerBankID))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.MpayAccountBlock:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.CustomerID))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.DeviceID))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
                            return status = false;
                        else
                            return true;
                        break;
                    case enumTransactionType.RequestMoneyBlockMobileNumber:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.BenificiaryMobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.CustomerID))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.REMITTERNAME))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.flag))
                            return status = false;
                        else
                            return true;
                        break;
                    case enumTransactionType.CreateGreenpin:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
                            return status = false;
                        if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.ATMPIN, AuthReq.SsmMasterKey).Length != 4)
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.CreateGreenpinValidation:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.AccountNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.CARDNUMBER))
                            return status = false;
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.CARDEXP))
                            return status = false;
                        else
                            return true;
                        break;
                    case enumTransactionType.ContestantDetails:
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.SHOWID))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.BNgul:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.RequestMoney:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetBenificiaryDetails:
                        if (!_REGISTRATION_REQ.IsMobileReg && !_REGISTRATION_REQ.IsAccountReg)
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.CREATEPASSWORD:
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Key : " + AuthReq.SsmMasterKey + " For RRN : " + _REGISTRATION_REQ.ReferenceNumber);
                        if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.Password, AuthReq.SsmMasterKey).Length != 4)
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.ChangePassword:
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Key : " + AuthReq.SsmMasterKey + " For RRN : " + _REGISTRATION_REQ.ReferenceNumber);
                        if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.NewPassword, AuthReq.SsmMasterKey).Length != 4)
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.ChangeMpin:
                        if (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.NewMPIN, AuthReq.SsmMasterKey).Length != 4)
                            return false;
                        else
                            return true;
                        break;
                    case enumTransactionType.BTRecharge:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetBPCOutstandingAmount:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.BPCPayment:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TCELLPREPAID:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TCELLPOSTPAID:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TCELLLEASELINEPAYMENT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TCELLPOSTPAIDOUTSTANDINGAMOUNT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber.ToString()))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TCELLLEASELINEOUTSTANDINGAMOUNT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber.ToString()))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.CREDITCARDPAYMENT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CREDITCARDACC.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.DRUKCOM:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetListOfCustomerID:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetListOfLoanAccount:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CustomerBaseNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.ViewLoanDetails:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LoanAccountNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetListOfProducts:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetListOfNppfLoanAccount:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.NPPFPayment:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DeviceID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUSTOMERID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.ETHOMETHO:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.WaterOutstandingDetails:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.WaterBillNumber.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ConsumerName.ToString()))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.WaterBillPay:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.WaterBillNumber.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TAXOUTSTANDING:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.VOUCHERNUMBER.ToString()))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.TAXPAYMENT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.VOUCHERNUMBER.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.DONATION:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.DONORID.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.ShowPayment:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ShowID.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.AccountStatementRequest:
                        if ((DateTime.ParseExact(_REGISTRATION_REQ.ToDate, "d/M/yyyy", CultureInfo.InvariantCulture) - DateTime.ParseExact(_REGISTRATION_REQ.FromDate, "d/M/yyyy", CultureInfo.InvariantCulture)).TotalDays > 90)
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.BTPOSTPAID:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.BTLeaseLine:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.LeaseLineNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.BTPOSTPAIDPAYMENT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.RechargeMobileNumber))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.GetRICBOutstandingAmount:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NationalID))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.ReferenceNumber.ToString()))
                            return status = false;
                        else
                            return status = true;
                        break;
                    case enumTransactionType.NQRCIntraFundTransfer:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC))
                            return status = false;
                        if (_MOBILEBANKING_REQ.QRTYPE == "OnUs")
                        {
                            if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
                            {
                                return status = false;
                            }
                        }
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.QRValue))
                            return status = false;

                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TXNAMT.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.Merchantidentifier))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MerchantCategoryCode))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.TransactionCurrencyCode))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CountryCode))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MerchantName))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.NQRCcity))
                            return status = false;
                        //if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CRC))
                        //    return status = false;
                        else
                            return status = true;

                        break;
                    case enumTransactionType.RICBPAYMENT:
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.SERIALNO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.CUST_AC_NO))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERACC.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.MobileNumber.ToString()))
                            return status = false;
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.REMITTERNAME.ToString()))
                            return status = false;
                        if (_MOBILEBANKING_REQ.TXNAMT == decimal.Parse("0.00"))
                            return status = false;
                        else
                            return status = true;
                        break;
                }
                return status;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                return false;
            }
        }

        [HttpPost]
        public REGISTRATION_RES CheckForUpdate_OLD([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {

                var task = Task.Factory.StartNew(() =>
                {
                   
                    _REGISTRATION_RES.CheckUpdate = IMPSTransactions.CheckForUpdate(); 
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES CheckForUpdate([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CheckForUpdate Request Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                int status = -1;
                var task = Task.Factory.StartNew(() =>
                {
                    if (string.IsNullOrEmpty(_REGISTRATION_REQ.Version)) ////Only to be used till version Android 2.3, Android 2.5 & IOS 2.6.3 
                    {
                        _REGISTRATION_RES.CheckUpdate = IMPSTransactions.CheckForUpdate();
                    }                    
                    else
                    {
                        _REGISTRATION_RES.CheckUpdate = IMPSTransactions.CheckForUpdate(_REGISTRATION_REQ.Version, _REGISTRATION_REQ.DeviceType, out status);
                        _REGISTRATION_RES.VersionUpdate = Convert.ToString(status);
                    }
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CheckForUpdate Request Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES FxRate([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.FxRate = IMPSTransactions.FxRate();
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GetPurpose([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETPURPOSE.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetPurpose Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    string DATA = null;
                    Authentication AuthReq = new Authentication();
                    DataTable details = CONFIGURATIONCONFIGDATA.GetPurpose(_REGISTRATION_REQ.DeviceID);
                    if (details != null && details.Rows.Count > 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.CardDetails = details.Rows[0][0] + "|" + details.Rows[0][1] + "," + details.Rows[1][0] + "|" + details.Rows[1][1]
                            + "," + details.Rows[2][0] + "|" + details.Rows[2][1] + "," + details.Rows[3][0] + "|" + details.Rows[3][1] + "," + details.Rows[4][0] + "|" + details.Rows[4][1] + "," + details.Rows[5][0] + "|" + details.Rows[5][1]
                            + "," + details.Rows[6][0] + "|" + details.Rows[6][1].ToString();
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GetPurpose Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GETPURPOSE.ToString(), 2);
            return _REGISTRATION_RES;
        }

        #endregion Other Process

        #region Process Bill Payment
        [HttpPost]
        public MOBILEBANKING_RESP BTRECHARGE([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg = new MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg();
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BT_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BT_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BT_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BT_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BT_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BT_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BT_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BT_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BT_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BT_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.BTRecharge.ToString();
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTRechargePrepaid/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                _MOBILEBANKING_REQ.BENIFICIARYACC = ConfigurationManager.AppSettings["BTACCOUNT"].ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Recharge Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPrePaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTRecharge, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region old code
                    //  _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BHUTANTELECOM, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    //   _ProcessHost.ProcessBTRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    // , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

                    // _ProcessMessage.TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    // _ProcessMessage.BillProcessFundTransfer(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    #endregion old code

                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTRECHARGE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);//commented for testing
                    try
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("cbs response code :- " + _MOBILEBANKING_RESP.ResponseCode));
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTRecharge_Eload(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, RequestMsg);
                            //_ProcessPayment.ProcessBTRecharge(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Recharge Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTRECHARGE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLPREPAIDRECHARGE([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TTOP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TTOP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TTOP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TTOP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TTOP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TTOP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TTOP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TTOP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TTOP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TTOP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TCELLPREPAID.ToString();
                //_MOBILEBANKING_REQ.FundTransferType = "TSIL";
                _MOBILEBANKING_REQ.TXNID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_REQ.FundTransferType = "TCRechargePrepaid/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "TS";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "TS";
                _MOBILEBANKING_REQ.Remark = "TS";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Prepaid Recharge Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLPREPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                var task = Task.Factory.StartNew(() =>
                {
                    #region old code commented
                    //_ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TASHICELLPREPAID, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    // _ProcessHost.ProcessTcellPrepaidRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code commented
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCRECHARGE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessTCellPrepaidRecharge(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _SwitchConsumerRequestReqMsg);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Prepaid Recharge Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCRECHARGE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLPOSTPAIDOUTSTANDINGAMT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TCPD_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TCPD_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TCPD_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TCPD_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TCPD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TCPD_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TCPD_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TCPD_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TCPD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TCPD_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Postpaid outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLPOSTPAIDOUTSTANDINGAMOUNT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TCELLPOSTPAIDOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessTCellGetOutstandingAmountPostpaid(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.MSGSTAT = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                        }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Postpaid outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCELLPOSTPAIDOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLPOSTPAIDPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TCPD_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TCPD_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TCPD_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TCPD_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TCPD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TCPD_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TCPD_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TCPD_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TCPD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TCPD_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TCELLPOSTPAID.ToString();
                // _MOBILEBANKING_REQ.FundTransferType = "TSIL";
                _MOBILEBANKING_REQ.TXNID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_REQ.FundTransferType = "TCPostpaid/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "TS";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "TS";
                _MOBILEBANKING_REQ.Remark = "TS";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Postpaid Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLPOSTPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TASHICELLPOSTPAID, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessTCellRechargePostpaid(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _SwitchConsumerRequestReqMsg);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Postpaid Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TASHICELLPOSTPAID, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLLEASELINEOUTSTANDINGAMTOLD([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Lease Line outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLLEASELINEOUTSTANDINGAMOUNT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TCELLLEASELINEOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessTCellGetOutstandingAmountLeaseLine(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.MSGSTAT = _MOBILEBANKING_RESP.ResponseDesc;
                        }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Lease Line outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCELLLEASELINEOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLLEASELINEPAYMENTOLD([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TCELLLEASELINEPAYMENT.ToString();
                _MOBILEBANKING_REQ.RechargeMobileNumber = _MOBILEBANKING_REQ.LeaseLineNumber;
                //_MOBILEBANKING_REQ.FundTransferType = "TSIL";
                _MOBILEBANKING_REQ.TXNID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_REQ.FundTransferType = "TCLeaseline/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "TS";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "TS";
                _MOBILEBANKING_REQ.Remark = "TS";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Lease Line Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLLEASELINEPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                var task = Task.Factory.StartNew(() =>
                {
                    #region old code commented

                    // _ProcessHost.ProcessTcellLeaseLineRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code commented
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TCELLLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessTCellRechargeLeaseLine(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _SwitchConsumerRequestReqMsg);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Lease Line Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCELLLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLLEASELINEOUTSTANDINGAMT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            DataTable TCELLToken = null;
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Lease Line outstanding amount Transaction Request Received From Terminal For Reference Number : " + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLLEASELINEOUTSTANDINGAMOUNT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                try
                {
                    TCELLToken = IMPSTransactions.GetTashiToken();
                    if (TCELLToken.Rows.Count <= 0)
                    {

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        _MOBILEBANKING_RESP.ResponseData = null;
                        return _MOBILEBANKING_RESP;
                    }

                    _MOBILEBANKING_REQ.AccessToken = TCELLToken.Rows[0][0].ToString();
                    _MOBILEBANKING_REQ.RefreshToken = TCELLToken.Rows[0][1].ToString();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);

                }
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TCELLLEASELINEOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessPayment.ProcessTCellGetOutstandingAmountLeaseLineNEW(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Get Lease Line outstanding amount Transaction Response To Terminal For Reference Number : " + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCELLLEASELINEOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP TCELLLEASELINEPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {

            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            DataTable TCELLToken = null;

            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TCELLLEASELINEPAYMENT.ToString();
                _MOBILEBANKING_REQ.RechargeMobileNumber = _MOBILEBANKING_REQ.LeaseLineNumber;
                //_MOBILEBANKING_REQ.FundTransferType = "TSIL";
                _MOBILEBANKING_REQ.TXNID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_REQ.FundTransferType = "TCLeaseline/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "TS";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "TS";
                _MOBILEBANKING_REQ.Remark = "TS";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Lease Line Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TCELLLEASELINEPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                TCELLToken = IMPSTransactions.GetTashiToken();
                if (TCELLToken.Rows.Count <= 0)
                {

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    return _MOBILEBANKING_RESP;
                }

                _MOBILEBANKING_REQ.AccessToken = TCELLToken.Rows[0][0].ToString();
                _MOBILEBANKING_REQ.RefreshToken = TCELLToken.Rows[0][1].ToString();

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TCELLLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessTCellRechargeLeaseLineNEW(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tcell Lease Line Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TCELLLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;
        }

        #endregion Process Bill Payment

        #region Process Other Payments

        [HttpPost]
        public MOBILEBANKING_RESP GET_BPCOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.CUSTBRN = CBSConfigurationData.BPC_BRANCH.ToString();
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BPC_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BPC_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BPC_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BPC_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BPC_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BPC_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BPC_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BPC_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BPC_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BPC_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.ConsumerNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET BPC OUTSTANDING AMOUNT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.GetBPCOutstandingAmount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BPCOUTSTANDINGAMOUNT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessBPCOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        }
                    }


                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  GET BPC OUTSTANDING AMOUNT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BHUTANTELECOM, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP BPCBILLPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.CUSTBRN = CBSConfigurationData.BPC_BRANCH.ToString();
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BPC_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BPC_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BPC_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BPC_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BPC_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BPC_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BPC_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BPC_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BPC_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BPC_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.ConsumerNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.BPCPayment.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BPC BILL PAYMENT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.BPCPayment, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BPCBILLPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessBpcRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID;
                            _ProcessPayment.ProcessBPCBillPay(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BPC BILL PAYMENT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BPCBILLPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_CREDITCARDOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSAccService.FCUBSAccServiceSEIClient _FCUBSAccService = new FCUBSAccService.FCUBSAccServiceSEIClient("FCUBSAccServiceSEI");
            FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSAccService.FCUBS_HEADERType();
            FCUBSAccService.QUERYACCBAL_IOFS_REQ _QUERYACCBAL_IOFS_REQ = new FCUBSAccService.QUERYACCBAL_IOFS_REQ();
            FCUBSAccService.QUERYACCBAL_IOFS_REQFCUBS_BODY _QUERYACCBAL_IOFS_REQFCUBS_BODY = new FCUBSAccService.QUERYACCBAL_IOFS_REQFCUBS_BODY();
            FCUBSAccService.AccBalReqtype _ACCBalance = new FCUBSAccService.AccBalReqtype();
            FCUBSAccService.AccBalReqtypeACC_BAL _ACC_BAL = new FCUBSAccService.AccBalReqtypeACC_BAL();
            FCUBSAccService.QUERYACCBAL_IOFS_RES _QUERYACCBAL_IOFS_RES = new FCUBSAccService.QUERYACCBAL_IOFS_RES();
            try
            {

                _ACC_BAL.BRANCH_CODE = CBSConfigurationData.CC_BRANCH.ToString();
                _ACC_BAL.CUST_AC_NO = _MOBILEBANKING_REQ.CREDITCARDACC;
                _QUERYACCBAL_IOFS_REQFCUBS_BODY.ACCBalance = _ACCBalance;
                _QUERYACCBAL_IOFS_REQFCUBS_BODY.ACCBalance.ACC_BAL = _ACC_BAL;
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.CC_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.CC_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.CC_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.CC_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.CC_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.CC_OPERATION.ToString();
                _FCUBS_HEADERType.MSGSTAT = MsgStatType.FAILURE;
                _QUERYACCBAL_IOFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _QUERYACCBAL_IOFS_REQ.FCUBS_BODY = _QUERYACCBAL_IOFS_REQFCUBS_BODY;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Credit Card Outstanding Amount Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //_ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationRequestMessage, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);


                var task = Task.Factory.StartNew(() =>
                {

                    _ProcessHost.ProcessGetCCOutstandingAmtToHost(ref _MOBILEBANKING_RESP, _QUERYACCBAL_IOFS_REQ, ref _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _FCUBSAccService, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        if (Convert.ToDecimal(_MOBILEBANKING_RESP.AvailableBalance) < 0)
                            _MOBILEBANKING_RESP.AvailableBalance = Math.Abs(Convert.ToDecimal(_MOBILEBANKING_RESP.AvailableBalance)).ToString();
                        else
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        }
                    }

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Credit Card  Outstanding Amount Transaction Response To Terminal For Reference Number : " + _QUERYACCBAL_IOFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            //_ProcessMessage.TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationResponseMessage, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP CREDITCARDBILLPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSRTService.FCUBSRTServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSRTService.FCUBSRTServiceSEIClient("FCUBSRTServiceSEI");
            FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSRTService.CREATETRANSACTION_FSFS_REQ();
            FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSRTService.FCUBS_HEADERType();
            FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSRTService.CREATETRANSACTION_FSFS_RES();
            FCUBSRTService.RetailTellerTypeFull _TransactionDetails = new FCUBSRTService.RetailTellerTypeFull();
            FCUBSRTService.ChgdetsType[] _chargedetails = new FCUBSRTService.ChgdetsType[] { };
            try
            {
                _TransactionDetails.PRD = CBSConfigurationData.CCP_PRODUCT.ToString();
                _TransactionDetails.BRN = CBSConfigurationData.CCP_BRN.ToString();
                _TransactionDetails.MODULE = CBSConfigurationData.CCP_MODULEID.ToString();
                _TransactionDetails.TXNACC = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.TXNCCY = CBSConfigurationData.CCP_CCY.ToString();
                _TransactionDetails.OFFSETCCY = CBSConfigurationData.CCP_OFFSETCCY.ToString();
                _TransactionDetails.TXNAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.TXNAMTSpecified = true;
                _TransactionDetails.OFFSETACC = _MOBILEBANKING_REQ.CREDITCARDACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.CCP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSRTService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.CCP_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.CCP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.CCP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.CCP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CREDIT CARD PAYMENT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.CREDITCARDPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment_CC((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.CREDITCARDBILLPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessCreditCardPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  CREDIT CARD PAYMENT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment_CC((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.CREDITCARDBILLPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP DRUKCOMPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.DPAY_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.DPAY_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.DPAY_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.DPAY_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.DPAY_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.DPAY_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.DPAY_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.DPAY_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.DPAY_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.DPAY_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.DRUKCOM.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** DrukCom Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.DRUKCOM, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.DRUKCOM, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessDrukComRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, _MOBILEBANKING_REQ.ConsumerName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.DRUKCOM.ToString());
                            });
                        }
                        catch { }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** DrukCom Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.DRUKCOM, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP ETHOMETHOPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.EMCS_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.EMCS_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.EMCS_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.EMCS_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.EMCS_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.EMCS_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.EMCS_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.EMCS_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.EMCS_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.EMCS_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.ETHOMETHO.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Etho Metho Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.ETHOMETHO, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.ETHOMETHO, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessEthoMEthoRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, _MOBILEBANKING_REQ.ConsumerName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.ETHOMETHO.ToString());
                            });
                        }
                        catch { }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Etho Metho Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.ETHOMETHO, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP NORLINGPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.NLCS_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.NLCS_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.NLCS_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NLCS_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.NLCS_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.NLCS_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NLCS_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.NLCS_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.NLCS_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.NLCS_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.NORLING.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Norling Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //_MOBILEBANKING_RESP.ResponseCode = "001";
                //_MOBILEBANKING_RESP.ResponseDesc = "UNDER PROCESS";
                //_MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //return _MOBILEBANKING_RESP;

                if (!DataValidator(enumTransactionType.ETHOMETHO, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.NORLING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessNorlingRechargeToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, _MOBILEBANKING_REQ.ConsumerName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.NORLING.ToString());
                            });
                        }
                        catch { }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Norling Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.NORLING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetDrukComRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get DrukCom Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.DRUKCOM.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get DrukCom Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetEthoMethoRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get EthoMetho Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.ETHOMETHO.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get EthoMetho Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetNorlingRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get NorLing Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.NORLING.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get NorLing Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetLeasedLineRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Lease Line Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.TCELLLEASELINEPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Lease Line Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetBPCRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BPC Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BPC Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetMinMaxPrepaid([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Min & Max Prepaid Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.MinMaxData = IMPSTransactions.GetMinMaxData(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Min & Max Prepaid Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetWaterRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Water Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.WATERBILLPAY.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Water Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetWaterOutstandingDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.WBP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.WBP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.WBP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.WBP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.WBP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.WBP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.WBP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.WBP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.WBP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.WBP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.ConsumerNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.WaterOutstandingDetails.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Water outstanding details Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                if (!DataValidator(enumTransactionType.WaterOutstandingDetails, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.WATEROUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessWaterOutstandingDetails(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.WaterBillNumber, _MOBILEBANKING_REQ.ConsumerName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.WATERBILLPAY.ToString());
                            });
                        }
                        catch { }
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Water outstanding details Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.WATEROUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP WATERBILLPAY([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.WBP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.WBP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.WBP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.WBP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.WBP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.WBP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.WBP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.WBP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.WBP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.WBP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.ConsumerNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.WaterBillPay.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Water Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.WaterBillPay, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.WATERBILLPAY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessWaterBillPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessWaterBillPay(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Water Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.WATERBILLPAY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_LISTOFDONOR([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of Donor Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }

            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ListOfDonor(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ListOfCustomerID != null && _MOBILEBANKING_RESP.ListOfCustomerID.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoRecipientFound);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.NoRecipientFound);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of Donor Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP DONATIONPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                DataTable Details = new DataTable();
                try
                {
                    Details = IMPSTransactions.GetProductCode(_MOBILEBANKING_REQ.DONORID);
                }
                catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = Details.Rows[0]["PRODUCT"].ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                if (!string.IsNullOrEmpty(_MOBILEBANKING_REQ.Remark))
                    _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.Remark;
                else
                    _TransactionDetails.BILLNO = "DUMMY";
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.DP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.DP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.DP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.DP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.DP_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.DP_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.DP_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.DP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.DP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                if (_MOBILEBANKING_REQ.IsMisc)
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.Mislinious.ToString();
                else
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.DONATION.ToString();

                if (_MOBILEBANKING_REQ.IsMisc)
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Mislinious Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion
                }
                else
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Donation Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion
                }

                if (!DataValidator(enumTransactionType.DONATION, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.DONATION, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessDonationPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                  , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            if (_MOBILEBANKING_REQ.IsMisc)
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Mislinious Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            else
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Donation Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.DONATION, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        //[HttpPost]
        //public MOBILEBANKING_RESP DONATIONPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        //{
        //    MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
        //    FCUBSRTService.FCUBSRTServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSRTService.FCUBSRTServiceSEIClient("FCUBSRTServiceSEI");
        //    FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSRTService.CREATETRANSACTION_FSFS_REQ();
        //    FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSRTService.FCUBS_HEADERType();
        //    FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY();
        //    FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSRTService.CREATETRANSACTION_FSFS_RES();
        //    FCUBSRTService.RetailTellerTypeFull _TransactionDetails = new FCUBSRTService.RetailTellerTypeFull();
        //    FCUBSRTService.ChgdetsType[] _chargedetails = new FCUBSRTService.ChgdetsType[] { };
        //    try
        //    {
        //        DataTable Details = new DataTable();
        //        try
        //        {
        //            Details = IMPSTransactions.GetProductCode(_MOBILEBANKING_REQ.DONORID);
        //        }
        //        catch { }
        //        _TransactionDetails.PRD = Details.Rows[0]["PRODUCT"].ToString();
        //        _TransactionDetails.BRN = CBSConfigurationData.DP_BRN.ToString();
        //        _TransactionDetails.MODULE = CBSConfigurationData.DP_MODULEID.ToString();
        //        _TransactionDetails.TXNACC = _MOBILEBANKING_REQ.REMITTERACC;
        //        _TransactionDetails.TXNCCY = CBSConfigurationData.DP_CCY.ToString();
        //        _TransactionDetails.TXNAMT = _MOBILEBANKING_REQ.TXNAMT;
        //        _TransactionDetails.TXNAMTSpecified = true;
        //        _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
        //        _TransactionDetails.ChargeDetails = _chargedetails;
        //        _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

        //        _FCUBS_HEADERType.SOURCE = CBSConfigurationData.DP_SOURCE.ToString();
        //        _FCUBS_HEADERType.UBSCOMP = FCUBSRTService.UBSCOMPType.FCUBS;
        //        _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
        //        _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
        //        _FCUBS_HEADERType.USERID = CBSConfigurationData.DP_USERID.ToString();
        //        _FCUBS_HEADERType.BRANCH = CBSConfigurationData.DP_BRANCH.ToString();
        //        _FCUBS_HEADERType.SERVICE = CBSConfigurationData.DP_SERVICE.ToString();
        //        _FCUBS_HEADERType.OPERATION = CBSConfigurationData.DP_OPERATION.ToString();
        //        _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
        //        _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
        //        _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
        //        _MOBILEBANKING_REQ.TransType = enumTransactionType.DONATION.ToString();
        //        _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;

        //        #region Loger
        //        try
        //        {
        //            using (var stringWriter = new StringWriter())
        //            {
        //                using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                {
        //                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
        //                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
        //                }
        //                string MobileRequestData = stringWriter.ToString();

        //                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Donation PAYMENT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
        //                                                                FormattedXML.ToString() + Environment.NewLine));
        //            }

        //        }
        //        catch (Exception ex)
        //        {
        //            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        }
        //        #endregion

        //        if (!DataValidator(enumTransactionType.DONATION, null, _MOBILEBANKING_REQ))
        //        {
        //            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
        //            _MOBILEBANKING_RESP.ResponseData = null;
        //            _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
        //            return _MOBILEBANKING_RESP;
        //        }

        //        #region LastTransactionVerification
        //        try
        //        {
        //            if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
        //            {
        //                IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
        //            }
        //            else
        //            {
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
        //                _MOBILEBANKING_RESP.ResponseData = null;
        //                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
        //                return _MOBILEBANKING_RESP;
        //            }
        //        }
        //        catch { }
        //        #endregion LastTransactionVerification

        //        var task = Task.Factory.StartNew(() =>
        //        {
        //            _ProcessMessage.TransactionPayment_Donation((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.DONATION, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

        //            _ProcessHost.ProcessDonationPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
        //           , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

        //        });
        //        task.Wait();
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }
        //    ///////////////// Process Intra Fund Transfer Response //////////////////////////

        //    #region Loger
        //    try
        //    {
        //        using (var stringWriter = new StringWriter())
        //        {
        //            using (var xmlWriter = XmlWriter.Create(stringWriter))
        //            {
        //                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
        //                _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
        //            }
        //            MobileResponseData = stringWriter.ToString();

        //        }
        //        XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  Donation PAYMENT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
        //                                                        FormattedXML.ToString() + Environment.NewLine));
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }
        //    #endregion

        //    _ProcessMessage.TransactionPayment_Donation((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.DONATION, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


        //    return _MOBILEBANKING_RESP;

        //}

        [HttpPost]
        public MOBILEBANKING_RESP GetTaxOutstandingDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TAX_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TAX_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TAX_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TAX_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TAX_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TAX_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TAX_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TAX_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TAX_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TAX_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.VOUCHERNUMBER;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TAXOUTSTANDING.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Tax outstanding details Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TAXOUTSTANDING, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TAXOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessTaxOutstandingDetails(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Tax outstanding details Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TAXOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP TAXPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TAX_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.VOUCHERNUMBER;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TAX_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TAX_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.TPN;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TAX_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TAX_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TAX_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TAX_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TAX_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TAX_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TAX_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.VOUCHERNUMBER;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.TAXPAYMENT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tax Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.TAXPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.TAXPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessTaxPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessTaxPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);

                        }
                        //_MOBILEBANKING_RESP.ResponseCode = "00";
                        //_MOBILEBANKING_RESP.ResponseDesc = "Your transaction details for tax payment: \n \n Transaction Ref No.: 000ETAX183070004 \n Deposit Voucher: DV681879596856 \n Amount: Nu. 1.00 \n TPN/Agency Code:  \n Payer's Name: Department of Revenue &amp; Customs, Thimphu (LC) \n Transaction Date: 03-Nov-2018. \n \n Thank you";
                    }
                    catch (Exception ex)
                    {

                    }

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Tax Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.TAXPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }



        #endregion Process Other Payments

        #region Process Loans & Deposits
        [HttpPost]
        public MOBILEBANKING_RESP GetListofCustomerid([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of customer id Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            if (!DataValidator(enumTransactionType.GetListOfCustomerID, null, _MOBILEBANKING_REQ))
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                return _MOBILEBANKING_RESP;
            }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.ListOfCustomerID = _ProcessMessage.ListOfCustomerID(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of customer id Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_LISTOFPRODUCTS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of Products Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            if (!DataValidator(enumTransactionType.GetListOfProducts, null, _MOBILEBANKING_REQ))
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                return _MOBILEBANKING_RESP;
            }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ListOfProducts(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of Products Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_LISTOFLOANACCOUNTS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSAccService.FCUBSAccServiceSEIClient _FCUBSAccService = new FCUBSAccService.FCUBSAccServiceSEIClient("FCUBSAccServiceSEI");
            FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSAccService.FCUBS_HEADERType();
            FCUBSAccService.QUERYACCSUMM_IOFS_REQ _QUERYACCSUMM_IOFS_REQ = new FCUBSAccService.QUERYACCSUMM_IOFS_REQ();
            FCUBSAccService.QUERYACCSUMM_IOFS_REQFCUBS_BODY _QUERYACCSUMM_IOFS_REQFCUBS_BODY = new FCUBSAccService.QUERYACCSUMM_IOFS_REQFCUBS_BODY();
            FCUBSAccService.QUERYACCSUMM_IOFS_RES _QUERYACCSUMM_IOFS_RES = new FCUBSAccService.QUERYACCSUMM_IOFS_RES();
            FCUBSAccService.QueryAccSummQueryIOType _QueryAccSummQueryIOType = new FCUBSAccService.QueryAccSummQueryIOType();

            try
            {
                #region LoanDisable
                //string _LoanDisable = ConfigurationManager.AppSettings["LoanDisable"].ToString();
                //if (_LoanDisable == "true")
                //{
                //    _CommanDetails.SystemLogger.WriteTransLog(this, "Loan Disable");
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.LoanDisable);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.LoanDisable);
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    return _MOBILEBANKING_RESP;
                //}
                #endregion LoanDisable

                _QueryAccSummQueryIOType.CUST_NO = _MOBILEBANKING_REQ.CustomerBaseNumber;
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _QUERYACCSUMM_IOFS_REQFCUBS_BODY.StvwAccountSumaryIO = _QueryAccSummQueryIOType;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LA_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.LA_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.LA_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.LA_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LA_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.LA_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.LA_OPERATION.ToString();
                _QUERYACCSUMM_IOFS_REQ.FCUBS_BODY = _QUERYACCSUMM_IOFS_REQFCUBS_BODY;
                _QUERYACCSUMM_IOFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of loan accounts Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion





                if (!DataValidator(enumTransactionType.GetListOfLoanAccount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessHost.ProcessGetListofLoanAccounts(ref _MOBILEBANKING_RESP, _QUERYACCSUMM_IOFS_REQ, ref _QUERYACCSUMM_IOFS_RES
                                                                , _FCUBS_HEADERType, _FCUBSAccService, _MOBILEBANKING_REQ);
                    if (_MOBILEBANKING_RESP.ListOfLoanAccounts != null && _MOBILEBANKING_RESP.ListOfLoanAccounts.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountNumberNotFound);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List of loan accounts Transaction Response To Terminal For Reference Number : " + _QUERYACCSUMM_IOFS_RES.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP VIEWLOANDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSCLService.FCUBSCLServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSCLService.FCUBSCLServiceSEIClient("FCUBSCLServiceSEI");
            FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ = new FCUBSCLService.QUERYACCOUNT_IOFS_REQ();
            FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSCLService.FCUBS_HEADERType();
            FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY _QUERYACCOUNT_IOFS_REQFCUBS_BODY = new FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY();
            FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES = new FCUBSCLService.QUERYACCOUNT_IOFS_RES();
            FCUBSCLService.AccountQueryIOType _AccountQueryIOType = new FCUBSCLService.AccountQueryIOType();
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _AccountQueryIOType.ACCNO = _MOBILEBANKING_REQ.LoanAccountNumber;
                _QUERYACCOUNT_IOFS_REQFCUBS_BODY.AccountMasterIO = _AccountQueryIOType;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LD_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.LD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSCLService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.LD_USERID.ToString();
                try
                {
                    int status = -1;
                    DataTable DtCustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_LOAN(_MOBILEBANKING_REQ.LoanAccountNumber, "", out status);
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _FCUBS_HEADERType.BRANCH = DtCustomerDetails.Rows[0]["BRANCH_CODE"].ToString();
                    else
                        _FCUBS_HEADERType.BRANCH = CBSConfigurationData.LD_BRANCH.ToString();
                }
                catch { }
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LD_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.LD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.LD_OPERATION.ToString();
                _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY = _QUERYACCOUNT_IOFS_REQFCUBS_BODY;
                _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.ViewLoanDetails.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View loan accounts Details Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                if (!DataValidator(enumTransactionType.ViewLoanDetails, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.VIEWLOANDETAILS, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessViewLoanDetailsToHost(ref _MOBILEBANKING_RESP, _QUERYACCOUNT_IOFS_REQ, ref _QUERYACCOUNT_IOFS_RES
                                                         , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View loan accounts Details Transaction Response To Terminal For Reference Number : " + _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.VIEWLOANDETAILS, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP PAYMENTLOAN([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {

            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSCLService.FCUBSCLServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSCLService.FCUBSCLServiceSEIClient("FCUBSCLServiceSEI");
            FCUBSCLService.CREATEPAYMENT_FSFS_REQ _CREATEPAYMENT_FSFS_REQ = new FCUBSCLService.CREATEPAYMENT_FSFS_REQ();
            FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSCLService.FCUBS_HEADERType();
            FCUBSCLService.CREATEPAYMENT_FSFS_REQFCUBS_BODY _CREATEPAYMENT_FSFS_REQFCUBS_BODY = new FCUBSCLService.CREATEPAYMENT_FSFS_REQFCUBS_BODY();
            FCUBSCLService.CREATEPAYMENT_FSFS_RES _CREATEPAYMENT_FSFS_RES = new FCUBSCLService.CREATEPAYMENT_FSFS_RES();
            FCUBSCLService.PaymentFullType _PaymentFullType = new FCUBSCLService.PaymentFullType();
            FCUBSCLService.PaymentFullTypeSettelments _PaymentFullTypeSettelments = new FCUBSCLService.PaymentFullTypeSettelments
            {
                STLMOD = "ACC",
                STLAMT = _MOBILEBANKING_REQ.TXNAMT,
                STLAMTSpecified = true,
                STLACC = _MOBILEBANKING_REQ.REMITTERACC,
            };
            FCUBSCLService.PaymentFullTypeSettelments[] _SettelementDetails = new FCUBSCLService.PaymentFullTypeSettelments[20];
            _SettelementDetails[0] = _PaymentFullTypeSettelments;
            try
            {

                #region LoanDisable
                string _LoanDisable = ConfigurationManager.AppSettings["LoanDisable"].ToString();
                if (_LoanDisable == "true")
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Loan Disable payment");
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.LoanDisable);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.LoanDisable);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                #endregion LoanDisable




                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _PaymentFullType.ACCNO = _MOBILEBANKING_REQ.LoanAccountNumber;
                _PaymentFullType.VALDT = System.DateTime.Now;
                _PaymentFullType.EXECDT = System.DateTime.Now;
                _PaymentFullType.Settelments = _SettelementDetails;
                _CREATEPAYMENT_FSFS_REQFCUBS_BODY.LiqFull = _PaymentFullType;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.LP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSCLService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.LP_USERID.ToString();
                try
                {
                    int status = -1;
                    DataTable DtCustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_LOAN(_MOBILEBANKING_REQ.LoanAccountNumber, "", out status);
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _FCUBS_HEADERType.BRANCH = DtCustomerDetails.Rows[0]["BRANCH_CODE"].ToString();
                    else
                        _FCUBS_HEADERType.BRANCH = CBSConfigurationData.LP_BRANCH.ToString();
                }
                catch { }
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.LP_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.LP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.LP_OPERATION.ToString();
                _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY = _CREATEPAYMENT_FSFS_REQFCUBS_BODY;
                _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.LoanPayment.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Loan Payment Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.LoansPaymentTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.LOANPAYMENT, _CREATEPAYMENT_FSFS_REQ, _CREATEPAYMENT_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessLoanPaymentToHost(ref _MOBILEBANKING_RESP, _CREATEPAYMENT_FSFS_REQ, ref _CREATEPAYMENT_FSFS_RES
                                                         , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Loan Payment Transaction Response To Terminal For Reference Number : " + _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoansPaymentTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.LOANPAYMENT, _CREATEPAYMENT_FSFS_REQ, _CREATEPAYMENT_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP CREATERECURRINGDEPOSITDEPOSITACC([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSAccService.FCUBSAccServiceSEIClient _FCUBSAccService = new FCUBSAccService.FCUBSAccServiceSEIClient("FCUBSAccServiceSEI");
            FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSAccService.FCUBS_HEADERType();
            FCUBSAccService.CREATETDCUSTACC_FSFS_REQ _CREATETDCUSTACC_FSFS_REQ = new FCUBSAccService.CREATETDCUSTACC_FSFS_REQ();
            FCUBSAccService.CREATETDCUSTACC_FSFS_REQFCUBS_BODY _CREATETDCUSTACC_FSFS_REQFCUBS_BODY = new FCUBSAccService.CREATETDCUSTACC_FSFS_REQFCUBS_BODY();
            FCUBSAccService.CREATETDCUSTACC_FSFS_RES _CREATETDCUSTACC_FSFS_RES = new FCUBSAccService.CREATETDCUSTACC_FSFS_RES();
            FCUBSAccService.TDCustAccFullType _TDCustAccFullType = new FCUBSAccService.TDCustAccFullType();
            FCUBSAccService.TDCustAccFullTypeTddetails _TDCustAccFullTypeTddetails = new FCUBSAccService.TDCustAccFullTypeTddetails();
            FCUBSAccService.TDCustAccFullTypeTdpayindetails[] _TDCustAccFullTypeTdpayindetails = new FCUBSAccService.TDCustAccFullTypeTdpayindetails[20];
            FCUBSAccService.CustAccountMISFullTypeMisdetails _CustAccountMISFullTypeMisdetails = new FCUBSAccService.CustAccountMISFullTypeMisdetails
            {
                POOLCD = "DFLTPOOL",
                TXNMIS1 = "000",
            };
            DataTable DtCustomerDetails = new DataTable();
            try
            {
                int status = -1;
                DtCustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_PAYBRN(_MOBILEBANKING_REQ.LoanCustomerID, "", out status);
            }
            catch { }
            FCUBSAccService.CustAccountMISFullType _CustAccountMISFullType = new FCUBSAccService.CustAccountMISFullType
            {

                BRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString(),
                Misdetails = _CustAccountMISFullTypeMisdetails,
            };
            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails _TDCustAccFullTypeTdpayoutdetailsFirst = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails
            {
                PAYOUTTYPE = "S",
                OFFBRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString(),
                OFFSACC = _MOBILEBANKING_REQ.REMITTERACC,
                PERCENTAGESpecified = true,
                PERCENTAGE = 100,
                PAYOUTCOMP = "P",
            };
            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails _TDCustAccFullTypeTdpayoutdetailsFirst2 = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails
            {
                PAYOUTTYPE = "S",
                OFFBRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString(),
                OFFSACC = _MOBILEBANKING_REQ.REMITTERACC,
                PERCENTAGESpecified = true,
                PERCENTAGE = 100,
                PAYOUTCOMP = "I"
            };

            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails[] _TDCustAccFullTypeTdpayoutdetailsFinal = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails[20];
            _TDCustAccFullTypeTdpayoutdetailsFinal[0] = _TDCustAccFullTypeTdpayoutdetailsFirst;
            //_TDCustAccFullTypeTdpayoutdetailsFinal[1] = _TDCustAccFullTypeTdpayoutdetailsFirst2;

            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TDCustAccFullType.BRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();
                _TDCustAccFullType.TERM_ACNO = "DUMMY";
                _TDCustAccFullType.CUSTNO = _MOBILEBANKING_REQ.LoanCustomerID;
                try
                {
                    DataTable Details = IMPSTransactions.GetProductDetails(_MOBILEBANKING_REQ.AccountClass);
                    _TDCustAccFullType.ACCLS = Details.Rows[0][0].ToString();
                }
                catch { }

                _TDCustAccFullType.TDCCY = "BTN";
                _TDCustAccFullType.ADESC = _MOBILEBANKING_REQ.LoanHolderName;
                try
                {
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _TDCustAccFullType.LOC = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();
                }
                catch { }
                DateTime MaturityDate = DateTime.ParseExact(DtCustomerDetails.Rows[0]["TODAY"].ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture).AddDays(Convert.ToDouble(_MOBILEBANKING_REQ.TenurInDays));

                _TDCustAccFullType.MEDIA = "MAIL";
                _TDCustAccFullType.COUNTRY_CODE = "000";
                _TDCustAccFullType.COUNTRY = "000";
                _TDCustAccFullTypeTddetails.PAYACC = _MOBILEBANKING_REQ.REMITTERACC;
                _TDCustAccFullTypeTddetails.AUTOROLL = "N";
                _TDCustAccFullTypeTddetails.CLONMAT = "Y";
                _TDCustAccFullTypeTddetails.MOVINTUNCLM = "N";
                _TDCustAccFullTypeTddetails.ROLLTYPE = "P";
                _TDCustAccFullTypeTddetails.RDFREMTHSpecified = true;
                _TDCustAccFullTypeTddetails.RDFREMTH = 1;
                _TDCustAccFullTypeTddetails.MATDTSpecified = true;
                _TDCustAccFullTypeTddetails.MATDT = MaturityDate;
                _TDCustAccFullTypeTddetails.PMNTCCY = CBSConfigurationData.RDTD_CCY.ToString();

                try
                {
                    int status = -1;
                    DataTable DTRemitter = IMPSTransactions.GETCUSTOMERDETAILS_REMITTERBRANCH(_MOBILEBANKING_REQ.REMITTERACC, "", out status);
                    if (DTRemitter != null && DTRemitter.Rows.Count > 0)
                        _TDCustAccFullTypeTddetails.PAYBRN = DTRemitter.Rows[0]["BRANCH_CODE"].ToString();
                }
                catch { }

                _TDCustAccFullTypeTddetails.RDAMT_NSpecified = true;
                _TDCustAccFullTypeTddetails.RDAMT_N = _MOBILEBANKING_REQ.RDTD_Amount;
                _TDCustAccFullTypeTddetails.RDACC = "Y";
                _TDCustAccFullTypeTddetails.AUTOPAY = "Y";
                _TDCustAccFullTypeTddetails.DEPTENOR = _MOBILEBANKING_REQ.TenurInDays;

                _TDCustAccFullType.Tddetails = _TDCustAccFullTypeTddetails;
                _TDCustAccFullType.Tdpayindetails = _TDCustAccFullTypeTdpayindetails;
                _TDCustAccFullType.Tdpayoutdetails = _TDCustAccFullTypeTdpayoutdetailsFinal;
                _TDCustAccFullType.CustAcc = _CustAccountMISFullType;

                _CREATETDCUSTACC_FSFS_REQFCUBS_BODY.CustAccountFull = _TDCustAccFullType;
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RDTD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RDTD_USERID.ToString();

                try
                {
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _FCUBS_HEADERType.BRANCH = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();
                }
                catch { }

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RDTD_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RDTD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RDTD_OPERATION.ToString();
                _CREATETDCUSTACC_FSFS_REQ.FCUBS_BODY = _CREATETDCUSTACC_FSFS_REQFCUBS_BODY;
                _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.CreateRecurring.ToString();


                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Recurring Deposit account Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.CREATERECURRING, enumTransactionType.CreateRecurring, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessCreateRecurringAccountToHost(ref _MOBILEBANKING_RESP, _CREATETDCUSTACC_FSFS_REQ, ref _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _FCUBSAccService, _MOBILEBANKING_REQ);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Recurring Deposit account Transaction Response To Terminal For Reference Number : " + _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.CREATERECURRING, enumTransactionType.CreateRecurring, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP CREATETERMDEPOSITDEPOSITACC([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSAccService.FCUBSAccServiceSEIClient _FCUBSAccService = new FCUBSAccService.FCUBSAccServiceSEIClient("FCUBSAccServiceSEI");
            FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSAccService.FCUBS_HEADERType();
            FCUBSAccService.CREATETDCUSTACC_FSFS_REQ _CREATETDCUSTACC_FSFS_REQ = new FCUBSAccService.CREATETDCUSTACC_FSFS_REQ();
            FCUBSAccService.CREATETDCUSTACC_FSFS_REQFCUBS_BODY _CREATETDCUSTACC_FSFS_REQFCUBS_BODY = new FCUBSAccService.CREATETDCUSTACC_FSFS_REQFCUBS_BODY();
            FCUBSAccService.CREATETDCUSTACC_FSFS_RES _CREATETDCUSTACC_FSFS_RES = new FCUBSAccService.CREATETDCUSTACC_FSFS_RES();
            FCUBSAccService.TDCustAccFullType _TDCustAccFullType = new FCUBSAccService.TDCustAccFullType();
            FCUBSAccService.TDCustAccFullTypeTddetails _TDCustAccFullTypeTddetails = new FCUBSAccService.TDCustAccFullTypeTddetails();
            FCUBSAccService.CustAccountMISFullTypeMisdetails _CustAccountMISFullTypeMisdetails = new FCUBSAccService.CustAccountMISFullTypeMisdetails
            {
                POOLCD = "DFLTPOOL",
                TXNMIS1 = "000",
            };
            DataTable DtCustomerDetails = new DataTable();
            try
            {
                int status = -1;
                DtCustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_PAYBRN(_MOBILEBANKING_REQ.LoanCustomerID, "", out status);
            }
            catch { }
            FCUBSAccService.CustAccountMISFullType _CustAccountMISFullType = new FCUBSAccService.CustAccountMISFullType
            {

                BRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString(),
                Misdetails = _CustAccountMISFullTypeMisdetails,
            };
            FCUBSAccService.TDCustAccFullTypeTdpayindetails _TDCustAccFullTypeTdpayindetails = new FCUBSAccService.TDCustAccFullTypeTdpayindetails
            {
                MMPAYOPT = "S",
                OFFBRN = "000",
                OFFSACC = _MOBILEBANKING_REQ.REMITTERACC,
                PERCENTAGESpecified = true,
                PERCENTAGE = 100
            };
            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails _TDCustAccFullTypeTdpayoutdetailsFirst = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails
            {
                PAYOUTTYPE = "S",
                OFFBRN = "000",
                OFFSACC = _MOBILEBANKING_REQ.REMITTERACC,
                PERCENTAGESpecified = true,
                PERCENTAGE = 100,
                PAYOUTCOMP = "P"
            };
            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails _TDCustAccFullTypeTdpayoutdetailsSecond = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails
            {
                PAYOUTTYPE = "S",
                OFFBRN = "000",
                OFFSACC = _MOBILEBANKING_REQ.REMITTERACC,
                PERCENTAGESpecified = true,
                PERCENTAGE = 100,
                PAYOUTCOMP = "I"
            };
            FCUBSAccService.TDCustAccFullTypeTdpayoutdetails[] _TDCustAccFullTypeTdpayoutdetailsFinal = new FCUBSAccService.TDCustAccFullTypeTdpayoutdetails[20];
            _TDCustAccFullTypeTdpayoutdetailsFinal[0] = _TDCustAccFullTypeTdpayoutdetailsFirst;
            if (_MOBILEBANKING_REQ.PRODUCTTYPE == "Fixed Deposit Plus")
                _TDCustAccFullTypeTdpayoutdetailsFinal[1] = _TDCustAccFullTypeTdpayoutdetailsSecond;

            FCUBSAccService.TDCustAccFullTypeTdpayindetails[] _TDCustAccFullTypeTdpayindetailsFinal = new FCUBSAccService.TDCustAccFullTypeTdpayindetails[20];
            _TDCustAccFullTypeTdpayindetailsFinal[0] = _TDCustAccFullTypeTdpayindetails;
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TDCustAccFullType.TERM_ACNO = "DUMMY";
                if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                    _TDCustAccFullType.BRN = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();

                _TDCustAccFullType.CUSTNO = _MOBILEBANKING_REQ.LoanCustomerID;
                try
                {
                    DataTable Details = IMPSTransactions.GetProductDetails(_MOBILEBANKING_REQ.AccountClass);
                    _TDCustAccFullType.ACCLS = Details.Rows[0][0].ToString();
                }
                catch { }
                _TDCustAccFullType.TDCCY = CBSConfigurationData.RDTD_CCY.ToString();
                try
                {
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _TDCustAccFullType.LOC = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();
                }
                catch { }
                DateTime MaturityDate = DateTime.ParseExact(DtCustomerDetails.Rows[0]["TODAY"].ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture).AddDays(Convert.ToDouble(_MOBILEBANKING_REQ.TenurInDays));

                _TDCustAccFullType.ADESC = _MOBILEBANKING_REQ.LoanHolderName;
                _TDCustAccFullType.MEDIA = "MAIL";
                _TDCustAccFullType.COUNTRY_CODE = "000";
                _TDCustAccFullType.COUNTRY = "000";

                _TDCustAccFullTypeTddetails.TDAMTSpecified = true;
                _TDCustAccFullTypeTddetails.TDAMT = _MOBILEBANKING_REQ.RDTD_Amount;
                _TDCustAccFullTypeTddetails.AUTOROLL = "N";
                _TDCustAccFullTypeTddetails.CLONMAT = "Y";
                _TDCustAccFullTypeTddetails.MOVINTUNCLM = "N";
                _TDCustAccFullTypeTddetails.ROLLTYPE = "P";
                _TDCustAccFullTypeTddetails.MATDTSpecified = true;
                _TDCustAccFullTypeTddetails.MATDT = MaturityDate;
                _TDCustAccFullTypeTddetails.DEPTENOR = _MOBILEBANKING_REQ.TenurInDays;

                _TDCustAccFullType.Tddetails = _TDCustAccFullTypeTddetails;
                _TDCustAccFullType.Tdpayindetails = _TDCustAccFullTypeTdpayindetailsFinal;
                _TDCustAccFullType.Tdpayoutdetails = _TDCustAccFullTypeTdpayoutdetailsFinal;
                _TDCustAccFullType.CustAcc = _CustAccountMISFullType;

                _CREATETDCUSTACC_FSFS_REQFCUBS_BODY.CustAccountFull = _TDCustAccFullType;
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RDTD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RDTD_USERID.ToString();
                try
                {
                    if (DtCustomerDetails != null && DtCustomerDetails.Rows.Count > 0)
                        _FCUBS_HEADERType.BRANCH = DtCustomerDetails.Rows[0]["LOCAL_BRANCH"].ToString();
                }
                catch { }
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RDTD_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RDTD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RDTD_OPERATION.ToString();
                _CREATETDCUSTACC_FSFS_REQ.FCUBS_BODY = _CREATETDCUSTACC_FSFS_REQFCUBS_BODY;
                _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.CreateTerm.ToString();


                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Term Deposit account Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.CREATETERM, enumTransactionType.CreateTerm, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessCreateTermLoanAccountToHost(ref _MOBILEBANKING_RESP, _CREATETDCUSTACC_FSFS_REQ, ref _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _FCUBSAccService, _MOBILEBANKING_REQ);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Term Deposit account Transaction Response To Terminal For Reference Number : " + _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
            }
            #endregion
            _ProcessMessage.CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.CREATETERM, enumTransactionType.CreateTerm, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public REGISTRATION_RES GetRDTDInterestRate([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get RD TD Interest Rate Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                var task = Task.Factory.StartNew(() =>
                {
                    //double days=  (DateTime.ParseExact(_REGISTRATION_REQ.Days, "d/M/yyyy", CultureInfo.InvariantCulture) - DateTime.ParseExact(System.DateTime.Now.ToString(), "d/M/yyyy", CultureInfo.InvariantCulture)).TotalDays;
                    try
                    {
                        int status = -1;
                        DataTable DtCustomerDetails = IMPSTransactions.GETCUSTOMERDETAILS_PAYBRN(_REGISTRATION_REQ.LoanCustomerID, "", out status);
                        _REGISTRATION_RES.MaturityDate = DateTime.ParseExact(DtCustomerDetails.Rows[0]["TODAY"].ToString(), "dd-MM-yyyy", CultureInfo.InvariantCulture).AddDays(Convert.ToDouble(_REGISTRATION_REQ.Days)).ToString("dd-MMM-yyyy");
                    }
                    catch { }
                    DataSet DtCalcValues = IMPSTransactions.ValidateCustomerForRDTD(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.Days, _REGISTRATION_REQ.ACCOUNTCREATIONTYPE, _REGISTRATION_REQ.PRODUCTTYPE, _REGISTRATION_REQ.LoanCustomerID, _REGISTRATION_REQ.RATECODE);
                    _REGISTRATION_RES.InterestRate = DtCalcValues.Tables[1].Rows[0][2].ToString() + " %";
                    try
                    {
                        _REGISTRATION_RES.CustomerName = DtCalcValues.Tables[0].Rows[0][3].ToString();
                        _REGISTRATION_RES.AccountType = DtCalcValues.Tables[0].Rows[0][4].ToString();
                    }
                    catch { }
                    if (Convert.ToDecimal(DtCalcValues.Tables[1].Rows[0][2].ToString()) < 1)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CustomerNotIligible);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode).Replace("@Tenur", Convert.ToInt32(Convert.ToInt64(DtCalcValues.Tables[1].Rows[0][1].ToString()) + 1).ToString());
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.UserID = _REGISTRATION_REQ.UserID;
                _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            ///////////////// Process Get Bank Details Response //////////////////////////

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get RD TD Interest Rate Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            return _REGISTRATION_RES;
        }

        [HttpPost]
        public MOBILEBANKING_RESP VIEWRECURRINGDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSCLService.FCUBSCLServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSCLService.FCUBSCLServiceSEIClient("FCUBSCLServiceSEI");
            FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ = new FCUBSCLService.QUERYACCOUNT_IOFS_REQ();
            FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSCLService.FCUBS_HEADERType();
            FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY _QUERYACCOUNT_IOFS_REQFCUBS_BODY = new FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY();
            FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES = new FCUBSCLService.QUERYACCOUNT_IOFS_RES();
            FCUBSCLService.AccountQueryIOType _AccountQueryIOType = new FCUBSCLService.AccountQueryIOType();
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _AccountQueryIOType.ACCNO = _MOBILEBANKING_REQ.LoanAccountNumber;
                _QUERYACCOUNT_IOFS_REQFCUBS_BODY.AccountMasterIO = _AccountQueryIOType;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RD_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSCLService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RD_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RD_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RD_OPERATION.ToString();
                _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY = _QUERYACCOUNT_IOFS_REQFCUBS_BODY;
                _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.CUSTOMERID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.ViewRecurringLoan.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View Recurring account Details Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //if (!DataValidator(enumTransactionType.ViewLoanDetails, null, _MOBILEBANKING_REQ))
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    return _MOBILEBANKING_RESP;
                //}
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.VIEWRECURRING, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessViewRecurringDetails(ref _MOBILEBANKING_RESP, _QUERYACCOUNT_IOFS_REQ, ref _QUERYACCOUNT_IOFS_RES
                                                         , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View Recurring account Details Transaction Response To Terminal For Reference Number : " + _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.VIEWRECURRING, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP VIEWTERMDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSCLService.FCUBSCLServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSCLService.FCUBSCLServiceSEIClient("FCUBSCLServiceSEI");
            FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ = new FCUBSCLService.QUERYACCOUNT_IOFS_REQ();
            FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSCLService.FCUBS_HEADERType();
            FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY _QUERYACCOUNT_IOFS_REQFCUBS_BODY = new FCUBSCLService.QUERYACCOUNT_IOFS_REQFCUBS_BODY();
            FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES = new FCUBSCLService.QUERYACCOUNT_IOFS_RES();
            FCUBSCLService.AccountQueryIOType _AccountQueryIOType = new FCUBSCLService.AccountQueryIOType();
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _AccountQueryIOType.ACCNO = _MOBILEBANKING_REQ.LoanAccountNumber;
                _QUERYACCOUNT_IOFS_REQFCUBS_BODY.AccountMasterIO = _AccountQueryIOType;
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TD_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TD_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSCLService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TD_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TD_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TD_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TD_OPERATION.ToString();
                _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY = _QUERYACCOUNT_IOFS_REQFCUBS_BODY;
                _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.CUSTOMERID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.ViewTermLoan.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View Term account Details Transaction Request Received From Terminal For Reference Number : " + _FCUBS_HEADERType.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //if (!DataValidator(enumTransactionType.ViewLoanDetails, null, _MOBILEBANKING_REQ))
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    return _MOBILEBANKING_RESP;
                //}
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.VIEWTERM, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessViewTermDetails(ref _MOBILEBANKING_RESP, _QUERYACCOUNT_IOFS_REQ, ref _QUERYACCOUNT_IOFS_RES
                                                         , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
            _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** View Term account Details Transaction Response To Terminal For Reference Number : " + _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.VIEWTERM, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_LISTOFNPPFLOANACC([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.NPPL_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.NPPL_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.NPPL_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPL_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.NPPL_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.NPPL_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.NPPL_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPL_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.NPPL_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.NPPL_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.GetListOfNppfLoanAccount.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List Of NPPF Loan Accounts Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.GetListOfNppfLoanAccount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.GETLISTOFNPPFLOANACC, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);


                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessGetListOfNPPFLoanAccount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List Of NPPF Loan Accounts Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.GETLISTOFNPPFLOANACC, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_LISTOFNPPFRENTACC([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.NPPR_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.NPPR_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.NPPR_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPR_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.NPPR_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.NPPR_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.NPPR_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPR_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.NPPR_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.NPPR_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.GetListOfNppfRentAccount.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List Of NPPF Rent Accounts Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.GetListOfNppfLoanAccount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.GETLISTOFNPPFRENTALACC, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);


                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _MOBILEBANKING_RESP.NationalID = _MOBILEBANKING_REQ.NationalID;
                    _ProcessPayment.ProcessGetListOfNPPFRentAccount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get List Of NPPF Rent Accounts Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.GETLISTOFNPPFRENTALACC, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP NPPFLOANPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.NPPL_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.NationalID;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.NPPL_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.NPPL_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPL_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.NPPL_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.NPPL_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.NPPL_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPL_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.NPPL_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.NPPL_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.NPPFLoanPayment.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** NPPF Loan Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.NPPFPayment, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.NPPFLOANPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessNPPFLoanPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                  , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessNPPFLoanPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }


            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** NPPF Loan Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.NPPFLOANPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP NPPFRENTPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.NPPR_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.NationalID;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.NPPR_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.NPPR_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPR_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.NPPR_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.NPPR_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.NPPR_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.NPPR_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.NPPR_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.NPPR_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.NPPFRentPayment.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** NPPF Rent Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.NPPFPayment, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.NPPFRENTPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessNPPFRentPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                  , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessNPPFRentPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** NPPF Rent Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.NPPFRENTPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        #endregion Process Loans & Deposits

        #region Feedback
        [HttpPost]
        public REGISTRATION_RES FeedBackRequest([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.FEEDBACK.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Feedback Request Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.FeedBackRequest(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Feedback Request Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.FEEDBACK.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES GetProductList([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ProductList.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Product List Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.BankDetails = IMPSTransactions.GetProductDetails();
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            ///////////////// Process Get Bank Details Response //////////////////////////

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Product List  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ProductList.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Feedback

        #region RICB Process

        [HttpPost]
        public MOBILEBANKING_RESP GET_RICBLIFEINSURANCEDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
                FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
                FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
                FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
                FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
                FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
                FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
                try
                {
                    _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                    _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                    _TransactionDetails.CUSTBRN = CBSConfigurationData.RICBL_BRANCH.ToString();
                    _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                    _TransactionDetails.PRD = CBSConfigurationData.RICBL_PRODUCT.ToString();
                    _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                    _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                    _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                    _TransactionDetails.TXNCCY = CBSConfigurationData.RICBL_CCY.ToString();
                    _TransactionDetails.ACTAMTSpecified = true;
                    _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                    _TransactionDetails.BCCY = CBSConfigurationData.RICBL_CCY.ToString();
                    _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                    _TransactionDetails.ChargeDetails = _chargedetails;
                    _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                    _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                    _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RICBL_SOURCE.ToString();
                    _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                    _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                    _FCUBS_HEADERType.USERID = CBSConfigurationData.RICBL_USERID.ToString();
                    _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RICBL_BRANCH.ToString();
                    _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                    _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RICBL_SERVICE.ToString();
                    _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RICBL_OPERATION.ToString();
                    _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                    _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET Life Insurance OUTSTANDING AMOUNT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion

                    if (!DataValidator(enumTransactionType.GetRICBOutstandingAmount, null, _MOBILEBANKING_REQ))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }

                    var task = Task.Factory.StartNew(() =>
                    {
                        _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICB_LIFEINSURANCE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                        _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                        _ProcessPayment.ProcessRicbLifeInsuranceOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                        if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                        {
                            try
                            {
                                var taskinsert = Task.Factory.StartNew(() =>
                                {
                                    IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.NationalID, _MOBILEBANKING_RESP.LoanHolderName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBLIFEINSURANCEPAYMENT.ToString());
                                });
                            }
                            catch { }
                        }
                    });
                    task.Wait();
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  GET Life Insurance OUTSTANDING AMOUNT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICB_LIFEINSURANCE, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_RICBCREDITINVESTMENTEDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.CUSTBRN = CBSConfigurationData.RICBL_BRANCH.ToString();
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.RICBL_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.RICBL_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.RICBL_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RICBL_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RICBL_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RICBL_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RICBL_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RICBL_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET Credit Investment OUTSTANDING AMOUNT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.GetRICBOutstandingAmount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICB_CREDITINVESTMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessRicbCreditInvestmentOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.NationalID, _MOBILEBANKING_RESP.LoanHolderName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBCREDITPAY.ToString());
                            });
                        }
                        catch { }
                    }
                    //if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    //{
                    //    if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                    //    {
                    //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                    //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    //    }
                    //}


                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  GET Credit Investment OUTSTANDING AMOUNT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICB_CREDITINVESTMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_RICBLIFEANNUITYDETAILS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.CUSTBRN = CBSConfigurationData.RICBL_BRANCH.ToString();
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.RICBL_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ConsumerNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.RICBL_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.RICBL_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RICBL_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RICBL_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RICBL_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RICBL_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RICBL_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RICBL_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** GET Annuity OUTSTANDING AMOUNT Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.GetRICBOutstandingAmount, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICB_ANNUITY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessRicbAnnuityOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                    if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    {
                        try
                        {
                            var taskinsert = Task.Factory.StartNew(() =>
                            {
                                IMPSTransactions.INSERT_RECENTTRANSACTION(_MOBILEBANKING_REQ.NationalID, _MOBILEBANKING_RESP.LoanHolderName, _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBANNUTITYPAYMENT.ToString());
                            });
                        }
                        catch { }
                    }
                    //if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    //{
                    //    if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                    //    {
                    //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                    //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    //    }
                    //}


                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****  GET Annuity OUTSTANDING AMOUNT Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICB_ANNUITY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }


        [HttpPost]
        public MOBILEBANKING_RESP RICBLIFEINSURANCEPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.RILI_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.NationalID;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.RILI_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.RILI_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILI_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RILI_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RILI_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RILI_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILI_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RILI_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RILI_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.SERIALNO;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.RICBPAYMENT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Life Insurance Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.RICBPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICBLIFEINSURANCEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessRICBLifeInsurancePaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessRicbLifeInusrancePayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Life Insurance Payment  Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICBLIFEINSURANCEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP RICBCREDITINVESTMENTEPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.RILN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.NationalID;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.RILN_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.RILN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RILN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RILN_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RILN_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILN_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RILN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RILN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                //_CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.SERIALNO;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.RICBPAYMENT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Credit Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.RICBPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICBCREDITPAY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessRICBCreditPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessRicbCreditPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Credit Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICBCREDITPAY, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP RICBLIFEANNUITYPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.RILA_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.NationalID;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.RILA_CCY.ToString();
                _TransactionDetails.ACTAMTSpecified = true;
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.RILA_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILA_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.RILA_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.RILA_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.RILA_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.RILA_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.RILA_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.RILA_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                //_CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.SERIALNO;

                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.NationalID; //Changes done 10072019 /Report

                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.RICBPAYMENT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Life Annuity Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.RICBPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.RICBANNUTITYPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessHost.ProcessRICBAnnuityPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                   , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessRicbLifeAnnuityPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType);

                        }
                    }
                    catch (Exception ex)
                    {

                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Life Annuity Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.RICBANNUTITYPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        /////// Recent Trasactions for RICB
        [HttpPost]
        public MOBILEBANKING_RESP GetLifeInsuranceRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Life Insurance Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBLIFEINSURANCEPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Life Insurance Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetAnnuityRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Annuity Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBANNUTITYPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Annuity Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GetCreditRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Credit Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.ConsumerNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.RICBCREDITPAY.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Credit Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion RICB Process

        #region LeaseLineRecentTransactionDetails
        [HttpPost]
        public MOBILEBANKING_RESP GetBTLeaseLineRecentTransactionDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BTLeaseLine Recent Transactions Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTION(_MOBILEBANKING_REQ.LeaseLineNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BTLEASELINEPAYMENT.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BTLeaseLine Recent Transactions Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion LeaseLineRecentTransactionDetails

        #region LeaseLineRecentTransactionRemove
        [HttpPost]
        public MOBILEBANKING_RESP GetBTLeaseLineRecentTransactionDelete([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BTLeaseLine Recent Transactions Remove Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    // _MOBILEBANKING_RESP.RecentTransactions = IMPSTransactions.SELECT_RECENTTRANSACTIONREMOVE(_MOBILEBANKING_REQ.LeaseLineNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BTLEASELINEPAYMENT.ToString(), _MOBILEBANKING_REQ.ID);

                    // DataTable DT = _MOBILEBANKING_RESP.RecentTransactions;
                    DataTable DT = IMPSTransactions.SELECT_RECENTTRANSACTIONREMOVE(_MOBILEBANKING_REQ.LeaseLineNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BTLEASELINEPAYMENT.ToString(), _MOBILEBANKING_REQ.ID);

                    if (DT.Rows.Count == 0)
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountDelete);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountDelete).Replace("@BillNo", _MOBILEBANKING_REQ.LeaseLineNumber);
                    }

                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BTLeaseLine Recent Transactions Remove Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion LeaseLineRecentTransactionRemove

        #region BillPaymentRecentTransactionRemove
        [HttpPost]
        public MOBILEBANKING_RESP BillPaymentRecentTransactionRemove([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get  Recent Transactions Remove Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    //_MOBILEBANKING_RESP.RecentTransactions
                    DataTable DT = IMPSTransactions.SELECT_RECENTTRANSACTIONREMOVE(_MOBILEBANKING_REQ.LeaseLineNumber, "", _MOBILEBANKING_REQ.TXNAMT.ToString(), _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, enumSource.BTLEASELINEPAYMENT.ToString(), _MOBILEBANKING_REQ.ID);

                    _CommanDetails.SystemLogger.WriteTransLog(this, "DT count" + DT.Rows.Count);

                    if (DT.Rows.Count == 0)
                    {

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountDelete);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountDelete).Replace("@BillNo", _MOBILEBANKING_REQ.LeaseLineNumber);
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get  Recent Transactions Remove Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion BillPaymentRecentTransactionRemove

        #region BT Recharge & Payment

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTPOSTPAIDOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Postpaid outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTPOSTPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTPOSTPAIDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessBTPostpaidOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                    //if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    //{
                    //    if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                    //    {
                    //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                    //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    //    }
                    //}
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Postpaid outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTPOSTPAIDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTBROADBANDOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.BTPOSTPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTBROANDBANDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessBTBroadBandOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROANDBANDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTLANDLINEOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Land Line outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.BTPOSTPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTLANDLINEOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessBTLandLineOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);

                    //if (_MOBILEBANKING_RESP.ResponseCode == ConstResponseCode.Approved)
                    //{
                    //    if (Convert.ToDecimal(_MOBILEBANKING_RESP.OutstandingAmount) <= 0)
                    //    {
                    //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoOutstandingAmount);
                    //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    //    }
                    //}
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Land Line outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLANDLINEOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTLEASELINEOUTSTANDINGAMOUNT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTLLS_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTLLS_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTLLS_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLLS_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTLLS_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTLLS_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLLS_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTLLS_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTLLS_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTLLS_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT LeaseLine outstanding amount Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTLeaseLine, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTLEASELINEOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    _ProcessPayment.ProcessBTLeaseLineOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT LeaseLine outstanding amount Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLEASELINEOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTBROADBANDPREPAIDPLAN([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = _MOBILEBANKING_REQ.ReferenceNumber;
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.TLIN_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.TLIN_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.TLIN_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.TLIN_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.TLIN_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.TLIN_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.TLIN_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.TLIN_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get  BT BROADBANDPREPAID PLAN Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.BTPOSTPAID, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTBROANDBANDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                    //_ProcessPayment.ProcessBTBroadBandOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                    _ProcessPayment.ProcessBTPreBroadBandOutstandingAmount(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);


                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT BROADBANDPREPAID PLAN Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROANDBANDOUTSTANDING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        ////////// Start BT Payment //////////////////
        [HttpPost]
        public MOBILEBANKING_RESP BTPOSTPAIDPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                //try
                //{
                //    _MOBILEBANKING_REQ.TXNAMT = 0;
                //    string[] BillDetails = _MOBILEBANKING_REQ.BILLNO.Split(',');
                //    BillDetails = BillDetails.Distinct().ToArray();
                //    _MOBILEBANKING_REQ.BILLNO = string.Empty;
                //    for (int i = 0; i <= BillDetails.Count() - 1; i++)
                //    {
                //        if (!string.IsNullOrEmpty(BillDetails[i].Split('-')[1]))
                //        {
                //            decimal FinalAmount = 0;
                //            decimal.TryParse(BillDetails[i].Split('-')[1].ToString(), out FinalAmount);
                //            _MOBILEBANKING_REQ.TXNAMT += FinalAmount;
                //            _MOBILEBANKING_REQ.BILLNO += BillDetails[i].ToString() + ",";
                //        }
                //    }
                //}
                //catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTPP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTPP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTPP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTPP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTPP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTPP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTPP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTPP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTPP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTPP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTPostpaid/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Postpaid Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}




                if (!DataValidator(enumTransactionType.BTPOSTPAIDPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region old code commented
                    // _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    // _ProcessHost.ProcessBTPostPaidPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code commented

                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("cbs response code :- " + _MOBILEBANKING_RESP.ResponseCode));
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTPostpaidPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _SwitchConsumerRequestReqMsg);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Postpaid Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP BTBROADBANDPOSTPAIDPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                //try
                //{
                //    _MOBILEBANKING_REQ.TXNAMT = 0;
                //    string[] BillDetails = _MOBILEBANKING_REQ.BILLNO.Split(',');
                //    BillDetails = BillDetails.Distinct().ToArray();
                //    _MOBILEBANKING_REQ.BILLNO = string.Empty;
                //    for (int i = 0; i <= BillDetails.Count() - 1; i++)
                //    {
                //        if (!string.IsNullOrEmpty(BillDetails[i].Split('-')[1]))
                //        {
                //            decimal FinalAmount = 0;
                //            decimal.TryParse(BillDetails[i].Split('-')[1].ToString(), out FinalAmount);
                //            _MOBILEBANKING_REQ.TXNAMT += FinalAmount;
                //            _MOBILEBANKING_REQ.BILLNO += BillDetails[i].ToString() + ",";
                //        }
                //    }
                //}
                //catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTBBPP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTBBPP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTBBPP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTBBPP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTBBPP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTBBPP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTBBPP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTBBPP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTBBPP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTBBPP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTBroadbandPostpaidBill/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Broad Band Postpaid Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTPOSTPAIDPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region oldcode
                    // _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTBROADBANDPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    //  _ProcessHost.ProcessBTBroadBandPostpaidPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion oldcode
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROADBANDPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("cbs response code :- " + _MOBILEBANKING_RESP.ResponseCode));
                        //if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        //{
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTBroadBandPostpaidPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band Postpaid Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROADBANDPOSTPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            return _MOBILEBANKING_RESP;
        }

        [HttpPost]
        public MOBILEBANKING_RESP BTBROADBANDPREPAID([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTBBPR_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTBBPR_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTBBPR_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTBBPR_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTBBPR_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTBBPR_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTBBPR_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTBBPR_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTBBPR_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTBBPR_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTBroadbandPrepaid/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();

                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Broad Band Prepaid Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTPOSTPAIDPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                //if (_MOBILEBANKING_REQ.RechargeMobileNumber.Substring(0, 1).ToString() == "0" || _MOBILEBANKING_REQ.RechargeMobileNumber.Substring(0, 1).ToString() == "1")
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = "150";
                //    _MOBILEBANKING_RESP.ResponseDesc = "Please Enter Valid BroadBand Prepaid Number";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    return _MOBILEBANKING_RESP;
                //}

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region old code
                    //  _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTBROADBANDPREPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    //   _ProcessHost.ProcessBTBroadBandPrePaidPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROADBANDPREPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        //if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTBroadBandPrepaid(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band Prepaid Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTBROADBANDPREPAIDPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP BTLANDLINEPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                //try
                //{
                //    _MOBILEBANKING_REQ.TXNAMT = 0;
                //    string[] BillDetails = _MOBILEBANKING_REQ.BILLNO.Split(',');
                //    BillDetails = BillDetails.Distinct().ToArray();
                //    _MOBILEBANKING_REQ.BILLNO = string.Empty;
                //    for (int i = 0; i <= BillDetails.Count() - 1; i++)
                //    {
                //        if (!string.IsNullOrEmpty(BillDetails[i].Split('-')[1]))
                //        {
                //            decimal FinalAmount = 0;
                //            decimal.TryParse(BillDetails[i].Split('-')[1].ToString(), out FinalAmount);
                //            _MOBILEBANKING_REQ.TXNAMT += FinalAmount;
                //            _MOBILEBANKING_REQ.BILLNO += BillDetails[i].ToString() + ",";
                //        }
                //    }
                //}
                //catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTLL_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTLL_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTLL_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLL_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTLL_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTLL_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLL_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTLL_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTLL_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTLL_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTLandlineBill/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.RechargeMobileNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();


                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Land Line Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}

                if (!DataValidator(enumTransactionType.BTPOSTPAIDPAYMENT, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region old code
                    //  _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTLANDLINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    //   _ProcessHost.ProcessBTBroadBandPrePaidPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLANDLINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        //if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTLandLinePayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BT Land Line Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLANDLINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP GET_BTBROADBANDPLANS([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band Plans Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
            //{
            //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
            //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
            //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
            //    _MOBILEBANKING_RESP.ResponseData = null;
            //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            //    return _MOBILEBANKING_RESP;
            //}
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.BTBROADBANDPLANS(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT Broad Band Plans Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        [HttpPost]
        public MOBILEBANKING_RESP BTLEASELINEPAYMENT([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                //try
                //{
                //    _MOBILEBANKING_REQ.TXNAMT = 0;
                //    string[] BillDetails = _MOBILEBANKING_REQ.BILLNO.Split(',');
                //    BillDetails = BillDetails.Distinct().ToArray();
                //    _MOBILEBANKING_REQ.BILLNO = string.Empty;
                //    for (int i = 0; i <= BillDetails.Count() - 1; i++)
                //    {
                //        if (!string.IsNullOrEmpty(BillDetails[i].Split('-')[1]))
                //        {
                //            decimal FinalAmount = 0;
                //            decimal.TryParse(BillDetails[i].Split('-')[1].ToString(), out FinalAmount);
                //            _MOBILEBANKING_REQ.TXNAMT += FinalAmount;
                //            _MOBILEBANKING_REQ.BILLNO += BillDetails[i].ToString() + ",";
                //        }
                //    }
                //}
                //catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BTLLS_PRODUCT.ToString(); //
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.LeaseLineNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BTLLS_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BTLLS_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLLS_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BTLLS_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BTLLS_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BTLLS_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BTLLS_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BTLLS_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BTLLS_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.RechargeMobileNumber = _MOBILEBANKING_REQ.LeaseLineNumber;
                //_MOBILEBANKING_REQ.FundTransferType = "BTIL";
                _MOBILEBANKING_REQ.FundTransferType = "BTLeaseline/" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.LeaseLineNumber;
                _MOBILEBANKING_REQ.REMITTERNAME = "BT";
                _MOBILEBANKING_REQ.BENIFICIARYNAME = "BT";
                _MOBILEBANKING_REQ.Remark = "BT";
                _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
                _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT LeaseLine Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                //if (!_HTTPCommunicationChanel.CheckBTPostPaidConnection())
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToConnectBT);
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                //    return _MOBILEBANKING_RESP;
                //}
                if (!DataValidator(enumTransactionType.BTLeaseLine, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    #region old code
                    //_ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BTLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    //  _ProcessHost.ProcessBTLeaseLinePaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    #endregion old code
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _ProcessMessage.ProcessRechargeTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                    try
                    {
                        //if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        if (_MOBILEBANKING_RESP.ResponseCode == "00" || _MOBILEBANKING_RESP.ResponseCode == "000")
                        {
                            _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                            _ProcessPayment.ProcessBTLeaseLinePayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        }
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BT LeaseLine Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BTLEASELINEPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }


        #endregion BT Recharge & Payment

        #region ManualyReversal
        [HttpPost]
        public MOBILEBANKING_RESP Reversal([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                FCUBSUPService.UtilPaymentTxnFullType _UtilPaymentTxnFullType = new FCUBSUPService.UtilPaymentTxnFullType();
                _FCUBS_HEADERType.MSGID = _MOBILEBANKING_REQ.ReferenceNumber;
                _UtilPaymentTxnFullType.XREF = _MOBILEBANKING_REQ.XREF;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _UtilPaymentTxnFullType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.TransType = enumTransactionType.Manual_Reversal.ToString();


                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Manualy Reversal Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.XREF + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessHost.ProcessReversalToHost(_CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            ///////////////// Process Intra Fund Transfer Response //////////////////////////

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Manualy Reversal Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.XREF + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion



            return _MOBILEBANKING_RESP;

        }
        #endregion ManualyReversal

        #region Forgot mPIN

        [HttpPost]
        public REGISTRATION_RES FORGOTMPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT MPIN Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ForgotMpin(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT MPIN Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Forgot mPIN

        #region Register TokenID

        [HttpPost]
        public REGISTRATION_RES RegisterTokenID([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestToken.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Register Device TokenID Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                //try
                //{
                //    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                //    {
                //        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                //    }
                //    else
                //    {
                //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                //        return _REGISTRATION_RES;
                //    }
                //}
                //catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RegisterTokenID(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Register Device TokenID Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestToken.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Register TokenID

        #region RequestMoney
        //[HttpPost]
        //public REGISTRATION_RES RequestMoney([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
        //    try
        //    {
        //        #region Loger
        //        try
        //        {
        //            using (var stringWriter = new StringWriter())
        //            {
        //                using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                {
        //                    XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                    _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                }
        //                string MobileRequestData = stringWriter.ToString();

        //                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                FormattedXML.ToString() + Environment.NewLine));
        //            }

        //        }
        //        catch (Exception ex)
        //        {
        //            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        }
        //        #endregion
        //        #region LastTransactionVerification
        //        //try
        //        //{
        //        //    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //        //    {
        //        //        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //        //    }
        //        //    else
        //        //    {
        //        //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
        //        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        //        return _REGISTRATION_RES;
        //        //    }
        //        //}
        //        //catch { }
        //        #endregion LastTransactionVerification

        //        DataTable _DTcheckvalid = null;

        //        _DTcheckvalid = IMPSTransactions.CheckBlockRequestMoney(_REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, "2", _REGISTRATION_REQ.AccountNumber);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.MobileNumber " + _REGISTRATION_REQ.MobileNumber);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.BenificiaryMobileNumber " + _REGISTRATION_REQ.BenificiaryMobileNumber);



        //        if (_DTcheckvalid != null && _DTcheckvalid.Rows.Count > 0)
        //        {
        //            _CommanDetails.SystemLogger.WriteTransLog(this, "_DTcheckvalid " + _DTcheckvalid.Rows.Count.ToString());
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UserBlockForReqMoney);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

        //            _CommanDetails.SystemLogger.WriteTransLog(this, " _REGISTRATION_RES.ResponseCode " + _REGISTRATION_RES.ResponseCode.ToString());
        //            _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_RES.ResponseDesc " + _REGISTRATION_RES.ResponseDesc.ToString());

        //            #region Loger
        //            try
        //            {
        //                using (var stringWriter = new StringWriter())
        //                {
        //                    using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                    {
        //                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //                    }
        //                    MobileResponseData = stringWriter.ToString();

        //                }
        //                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Register Device TokenID Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                FormattedXML.ToString() + Environment.NewLine));
        //            }
        //            catch (Exception ex)
        //            {
        //                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //            }
        //            #endregion

        //            return _REGISTRATION_RES;
        //        }
        //        var task = Task.Factory.StartNew(() =>
        //        {
        //            _ProcessMessage.RequestMoney(ref _REGISTRATION_RES, _REGISTRATION_REQ);
        //        });
        //        task.Wait();
        //    }
        //    catch (Exception ex)
        //    {
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }

        //    #region Loger
        //    try
        //    {
        //        using (var stringWriter = new StringWriter())
        //        {
        //            using (var xmlWriter = XmlWriter.Create(stringWriter))
        //            {
        //                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //            }
        //            MobileResponseData = stringWriter.ToString();

        //        }
        //        XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Register Device TokenID Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                        FormattedXML.ToString() + Environment.NewLine));
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }
        //    #endregion
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
        //    return _REGISTRATION_RES;

        //}

        #endregion

        #region RequestMoneyDashboard
        [HttpPost]
        public REGISTRATION_RES RequestMoneyDashBoard([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money DashBoard Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RequestMoneyDashBoard(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money DashBoard Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }
        #endregion RequestMoneyDashboard

        #region Request Money Send
        [HttpPost]
        public MOBILEBANKING_RESP RequestMoneyPayment([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {


            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSRTService.FCUBSRTServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSRTService.FCUBSRTServiceSEIClient("FCUBSRTServiceSEI");
            FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSRTService.CREATETRANSACTION_FSFS_REQ();
            FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSRTService.FCUBS_HEADERType();
            FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSRTService.CREATETRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSRTService.CREATETRANSACTION_FSFS_RES();
            FCUBSRTService.RetailTellerTypeFull _TransactionDetails = new FCUBSRTService.RetailTellerTypeFull();
            FCUBSRTService.ChgdetsType[] _chargedetails = new FCUBSRTService.ChgdetsType[] { };
            try
            {

                DataTable _DTcheckvalid = null;

                //_DTcheckvalid = IMPSTransactions.CheckBlockRequestMoney(_MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.BENIFICIARYMOBILENUMBER, 2, _MOBILEBANKING_REQ.REMITTERACC);

                //if (_DTcheckvalid != null || _DTcheckvalid.Rows.Count > 0)
                //{
                //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UserBlockForReqMoney);
                //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                //    _MOBILEBANKING_RESP.ResponseData = null;
                //    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                //    return _MOBILEBANKING_RESP;
                //}




                _MOBILEBANKING_REQ.IsMobileFT = true;
                _MOBILEBANKING_REQ.BENIFICIARYMOBILE = _MOBILEBANKING_REQ.BENIFICIARYMOBILENUMBER;
                _MOBILEBANKING_REQ.RemarkfinalPayment = _MOBILEBANKING_REQ.Remark;
                string Remitter = _MOBILEBANKING_REQ.REMITTERNAME;
                TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                Remitter = textInfo.ToTitleCase(Remitter.ToLower());
                _MOBILEBANKING_REQ.REMITTERNAME = Remitter;


                string BenificiaryName = _MOBILEBANKING_REQ.BenificiaryNickName;
                TextInfo textbenificaryInfo = new CultureInfo("en-US", false).TextInfo;
                BenificiaryName = textbenificaryInfo.ToTitleCase(BenificiaryName.ToLower());
                _MOBILEBANKING_REQ.BenificiaryNickName = BenificiaryName;



                _TransactionDetails.PRD = CBSConfigurationData.REQM_PRODUCT.ToString();
                _TransactionDetails.BRN = CBSConfigurationData.REQM_BRN.ToString();
                _TransactionDetails.MODULE = CBSConfigurationData.REQM_MODULEID.ToString();
                _TransactionDetails.TXNACC = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.TXNCCY = CBSConfigurationData.REQM_CCY.ToString();
                _TransactionDetails.TXNAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.TXNAMTSpecified = true;
                _TransactionDetails.OFFSETACC = Regex.Replace(_MOBILEBANKING_REQ.BENIFICIARYACC, "[^\\w\\._]", "");
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.Remark;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;


                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.REQM_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSRTService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.REQM_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.REQM_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.REQM_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.REQM_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());


                /* Check request valid */
                int Reqstatus = -1;
                _ProcessMessage.RequestMoneyvalidReq(ref Reqstatus, _MOBILEBANKING_REQ);
                if (Reqstatus == 0)
                {
                    if (_MOBILEBANKING_REQ.IsPayment)
                    {

                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                                }
                                string MobileRequestData = stringWriter.ToString();

                                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Final Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                                FormattedXML.ToString() + Environment.NewLine));
                            }

                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion



                        if (!DataValidator(enumTransactionType.RequestMoney, null, _MOBILEBANKING_REQ))
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.ResponseData = null;
                            _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                            return _MOBILEBANKING_RESP;
                        }

                        #region LastTransactionVerification
                        // try
                        // {
                        //     if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                        //     {
                        //         IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                        //     }
                        //     else
                        //     {
                        //         _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        //         _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        //         _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        //         _MOBILEBANKING_RESP.ResponseData = null;
                        //         _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        //         return _MOBILEBANKING_RESP;
                        //     }
                        // }
                        // catch { }
                        #endregion LastTransactionVerification

                        if (_MOBILEBANKING_REQ.REMITTERACC == _MOBILEBANKING_REQ.BENIFICIARYACC)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.PayerAndPayeeShouldNotSame);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                            _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;
                            _MOBILEBANKING_RESP.BENIFICIARYACC = _MOBILEBANKING_REQ.BENIFICIARYACC;
                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                            return _MOBILEBANKING_RESP;
                        }

                        if (_MOBILEBANKING_REQ.IsMobileFT)
                        {
                            var task = Task.Factory.StartNew(() =>
                            {
                                _ProcessMessage.TransactionRequestMoneyTranforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                                _ProcessHost.ProcessRequestMoneyToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                                  , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);


                            });
                            task.Wait();
                        }
                        else
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidTransaction);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.ResponseData = null;
                            _ProcessMessage.TransactionRequestMoneyTranforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                        }
                        if (_MOBILEBANKING_REQ.IsAccountFT)
                        {
                            _ProcessMessage.TransactionRequestMoneyTranforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                        }
                        else if (_MOBILEBANKING_REQ.IsMobileFT)
                        {
                            _ProcessMessage.TransactionRequestMoneyTranforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                        }
                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                                }
                                MobileResponseData = stringWriter.ToString();

                            }
                            XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Final Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                        return _MOBILEBANKING_RESP;
                    }
                    else
                    {


                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                                }
                                string MobileRequestData = stringWriter.ToString();

                                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Final Decline Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                                FormattedXML.ToString() + Environment.NewLine));
                            }

                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                        _ProcessMessage.RequestMoneyFinalPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, "Decline");
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestMoneyDecline);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "DECLINE";
                        int StatusNUll = 0;
                        //IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, "", "", "", _MOBILEBANKING_RESP.MSGSTAT, "", 3, 0.00m, "", out Status,NUll, "", "", "", _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_RESP.ResponseCode, "");

                        IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, "", "", "", _MOBILEBANKING_RESP.MSGSTAT, "", 3, 0.00m, "", out StatusNUll, "", "", "", _MOBILEBANKING_RESP.ResponseDesc, "160", "", _MOBILEBANKING_REQ.RemarkfinalPayment);


                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                                }
                                MobileResponseData = stringWriter.ToString();

                            }
                            XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Final Decline Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                        if (_MOBILEBANKING_REQ.IsAccountFT)
                        {
                            _ProcessMessage.TransactionRequestMoneyTranforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                        }
                        else if (_MOBILEBANKING_REQ.IsMobileFT)
                        {
                            _ProcessMessage.TransactionRequestMoneyTranforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                        }
                        return _MOBILEBANKING_RESP;
                    }
                }
                else
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money Final (Duplicate Reference Number) Transaction Response To Terminal For Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber));
                    return _MOBILEBANKING_RESP;

                }


            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                return _MOBILEBANKING_RESP;
            }

        }
        #endregion  Request Money Send

        #region RequestMoneyDashBoardHistory
        [HttpPost]
        public REGISTRATION_RES RequestMoneyDashBoardHistory([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money DashBoardHistory Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RequestMoneyDashBoardHistory(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Request Money DashBoard History Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
            return _REGISTRATION_RES;

        }
        #endregion RequestMoneyDashBoardHistory

        #region RTC

        #endregion

        #region Dashboard

        //[HttpPost]
        //public REGISTRATION_RES MpayDashboard([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 1);
        //    try
        //    {
        //        #region Loger
        //        try
        //        {
        //            using (var stringWriter = new StringWriter())
        //            {
        //                using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                {
        //                    XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                    _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                }
        //                string MobileRequestData = stringWriter.ToString();

        //                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****MpayDashBoard Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                FormattedXML.ToString() + Environment.NewLine));
        //            }

        //        }
        //        catch (Exception ex)
        //        {
        //            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        }
        //        #endregion
        //        #region LastTransactionVerification
        //        try
        //        {
        //            if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //            {
        //                IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //            }
        //            else
        //            {
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
        //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                return _REGISTRATION_RES;
        //            }
        //        }
        //        catch { }
        //        #endregion LastTransactionVerification


        //        var task = Task.Factory.StartNew(() =>
        //        {
        //            _ProcessMessage.MpayDashBoard(ref _REGISTRATION_RES, _REGISTRATION_REQ);
        //        });
        //        task.Wait();
        //    }
        //    catch (Exception ex)
        //    {
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }

        //    #region Loger
        //    try
        //    {
        //        using (var stringWriter = new StringWriter())
        //        {
        //            using (var xmlWriter = XmlWriter.Create(stringWriter))
        //            {
        //                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //            }
        //            MobileResponseData = stringWriter.ToString();

        //        }
        //        XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****Mpaydashboard Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                        FormattedXML.ToString() + Environment.NewLine));
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }
        //    #endregion
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotMpin.ToString(), 2);
        //    return _REGISTRATION_RES;

        //}
        #endregion

        #region BNgulCashIn
        [HttpPost]
        public MOBILEBANKING_RESP BNgulCashIn([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {

                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = CBSConfigurationData.BNGULP_PRODUCT.ToString();
                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.MobileNumber;
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.BNGULP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.BNGULP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.NARRATIVE = _MOBILEBANKING_REQ.BILLNO;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BNGULP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.BNGULP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.BNGULP_USERID.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.BNGULP_MODULEID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.BNGULP_BRANCH.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.BNGULP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.BNGULP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                _MOBILEBANKING_REQ.FundTransferType = FundTransferType.BNgulCashIn.ToString();


                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get BNgul Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                if (!DataValidator(enumTransactionType.BNgul, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.BNGULPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    //  _ProcessHost.ProcessBngulFundTransforToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                    //, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);
                    try
                    {
                        //if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                        //{
                        _MOBILEBANKING_REQ.MSGID = _FCUBS_HEADERType.MSGID;
                        _ProcessPayment.ProcessBTCashInPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _FCUBSRTServiceSEIClient);
                        //}
                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                        _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****Get BNgul Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.BNGULPAYMENT, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;

        }

        #endregion BNgulCashIn

        #region Voting Module

        #region Get show Details

        [HttpPost]
        public REGISTRATION_RES GetShowDetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ShowDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Show Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.ShowDetails = IMPSTransactions.GetShowDetails();

                    if (_REGISTRATION_RES.ShowDetails != null || _REGISTRATION_RES.ShowDetails.Rows.Count > 0)
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Show Details  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ShowDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Get show Details


        #region Get Contestant Details

        [HttpPost]
        public REGISTRATION_RES GetContestantDetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ContestantDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Contestant Details Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                if (!DataValidator(enumTransactionType.ContestantDetails, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

                    return _REGISTRATION_RES;
                }

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.ContestantDetails = IMPSTransactions.GetContestantDetails(_REGISTRATION_REQ.SHOWID);

                    if (_REGISTRATION_RES.ContestantDetails.Rows.Count > 0 || _REGISTRATION_RES.ContestantDetails != null)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Contestant Details  Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ContestantDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Get Contestant Details


        #region Voting Payment

        [HttpPost]
        public MOBILEBANKING_RESP VotingFundTransfer([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {

            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            FCUBSUPService.FCUBSUPServiceSEIClient _FCUBSRTServiceSEIClient = new FCUBSUPService.FCUBSUPServiceSEIClient("FCUBSUPServiceSEI");
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ();
            FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSUPService.FCUBS_HEADERType();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY _CREATETRANSACTION_FSFS_REQFCUBS_BODY = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQFCUBS_BODY();
            FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES = new FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES();
            FCUBSUPService.UtilPaymentTxnFullType _TransactionDetails = new FCUBSUPService.UtilPaymentTxnFullType();
            FCUBSUPService.ChgdetsType[] _chargedetails = new FCUBSUPService.ChgdetsType[] { };
            try
            {
                DataTable Details = new DataTable();
                try
                {
                    Details = IMPSTransactions.GetShowProductCode(_MOBILEBANKING_REQ.ShowID);
                }
                catch { }
                _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
                _TransactionDetails.XREF = _FCUBS_HEADERType.MSGID;
                _TransactionDetails.TXNDATE = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.PRD = Details.Rows[0]["PRODUCTCODE"].ToString();

                _TransactionDetails.INSTID = _MOBILEBANKING_REQ.CUSTOMERID;
                if (!string.IsNullOrEmpty(_MOBILEBANKING_REQ.Remark))
                    _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.Remark;
                else
                // _TransactionDetails.BILLNO = "DUMMY";
                {
                    _TransactionDetails.BILLNO = _MOBILEBANKING_REQ.ContestantNumber;

                    _TransactionDetails.BILLNO = (_TransactionDetails.BILLNO.Replace(" ", string.Empty));
                }
                _TransactionDetails.BILLDT = System.DateTime.Now.ToString("yyyy-MM-dd");
                _TransactionDetails.TXNCCY = CBSConfigurationData.VP_CCY.ToString();
                _TransactionDetails.BAMT = _MOBILEBANKING_REQ.TXNAMT;
                _TransactionDetails.BCCY = CBSConfigurationData.VP_CCY.ToString();
                _TransactionDetails.CUSTACNO = _MOBILEBANKING_REQ.REMITTERACC;
                _TransactionDetails.ChargeDetails = _chargedetails;
                _CREATETRANSACTION_FSFS_REQFCUBS_BODY.TransactionDetails = _TransactionDetails;

                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.VP_MODULEID.ToString();
                _FCUBS_HEADERType.SOURCE = CBSConfigurationData.VP_SOURCE.ToString();
                _FCUBS_HEADERType.UBSCOMP = FCUBSUPService.UBSCOMPType.FCUBS;
                _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
                _FCUBS_HEADERType.USERID = CBSConfigurationData.VP_USERID.ToString();
                _FCUBS_HEADERType.BRANCH = CBSConfigurationData.VP_BRANCH.ToString();
                _FCUBS_HEADERType.MODULEID = CBSConfigurationData.VP_MODULEID.ToString();
                _FCUBS_HEADERType.SERVICE = CBSConfigurationData.VP_SERVICE.ToString();
                _FCUBS_HEADERType.OPERATION = CBSConfigurationData.VP_OPERATION.ToString();
                _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY = _CREATETRANSACTION_FSFS_REQFCUBS_BODY;
                _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());




                if (_MOBILEBANKING_REQ.IsMisc)
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.Mislinious.ToString();
                else
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.ShowPayment.ToString();

                if (_MOBILEBANKING_REQ.IsMisc)
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Mislinious Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion
                }
                else
                {
                    #region Loger
                    try
                    {
                        using (var stringWriter = new StringWriter())
                        {
                            using (var xmlWriter = XmlWriter.Create(stringWriter))
                            {
                                XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                            }
                            string MobileRequestData = stringWriter.ToString();

                            XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Voting Payment Transaction Request Received From Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }

                    }
                    catch (Exception ex)
                    {
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                    }
                    #endregion
                }

                if (!DataValidator(enumTransactionType.ShowPayment, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    string flg = "1";
                    _MOBILEBANKING_REQ.ProductCode = Details.Rows[0]["PRODUCTCODE"].ToString();

                    // _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID = _MOBILEBANKING_REQ.ContestantNumber.ToString();
                    _TransactionDetails.BILLNO = (_TransactionDetails.BILLNO.Replace(" ", string.Empty));

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = _MOBILEBANKING_REQ.ContestantNumber.Replace(" ", string.Empty);

                    // _CommanDetails.SystemLogger.WriteTransLog(this, "Functioncode " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID.ToString());

                    _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.SHOWVOTING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                    _ProcessMessage.ContestantTransactionDetails(_MOBILEBANKING_REQ, flg);

                    _ProcessHost.ProcessVotingPaymentToHost(ref _MOBILEBANKING_RESP, _CREATETRANSACTION_FSFS_REQ, ref _CREATETRANSACTION_FSFS_RES
                  , _FCUBS_HEADERType, _FCUBSRTServiceSEIClient, _MOBILEBANKING_REQ);

                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            if (_MOBILEBANKING_REQ.IsMisc)
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Mislinious Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            else
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        MobileResponseData = stringWriter.ToString();

                    }
                    XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Voting Payment Transaction Response To Terminal For Reference Number : " + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }

            _ProcessMessage.TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.SHOWVOTING, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);


            return _MOBILEBANKING_RESP;




        }

        #endregion Voting Payment

        #endregion Voting Module

        #region MpayAccount Block

        #region AccountList
        [HttpPost]
        public REGISTRATION_RES GetCustomerMpayAccountsBlock([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountlist.ToString(), 1);
            #region Get Account details
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer MpayAccountBlock List Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.GET_MANAGEMPAYACCOUNT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer MpayAccountBlock List Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountlist.ToString(), 2);
            return _REGISTRATION_RES;
            #endregion Get Account details
        }

        #endregion AccountList


        #region BlockAccount
        [HttpPost]
        public REGISTRATION_RES GetMpayAccountsBlock([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountBlock.ToString(), 1);
            _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountBlock.ToString(), 1);

            #region Get Account details
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer MpayAccountBlock Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                if (!DataValidator(enumTransactionType.MpayAccountBlock, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);


                    return _REGISTRATION_RES;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.GET_BLOCKACCOUNT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Customer MpayAccountBlock Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountBlock.ToString(), 2);
            _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.MpayAccountBlock.ToString(), 2);


            return _REGISTRATION_RES;
            #endregion Get Account details
        }

        #endregion BlockAccount

        #endregion MpayAccount Block

        #region RequestMoneyBlock/UnblockNumber
        //[HttpPost]
        //public REGISTRATION_RES Get_RequestMoneyMobileBlock([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //    _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestMoneyBlockMobileNumber.ToString(), 1);
        //    _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestMoneyBlockMobileNumber.ToString(), 1);
        //    try
        //    {
        //        #region Loger
        //        try
        //        {
        //            using (var stringWriter = new StringWriter())
        //            {
        //                using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                {
        //                    XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                    _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                }
        //                string MobileRequestData = stringWriter.ToString();

        //                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get RequestMoney Mobile Number Block Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                FormattedXML.ToString() + Environment.NewLine));
        //            }

        //        }
        //        catch (Exception ex)
        //        {
        //            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        }
        //        #endregion


        //        if (!DataValidator(enumTransactionType.RequestMoneyBlockMobileNumber, _REGISTRATION_REQ, null))
        //        {
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            return _REGISTRATION_RES;
        //        }

        //        var task = Task.Factory.StartNew(() =>
        //        {
        //            _ProcessMessage.RequestMoneyBlock(_REGISTRATION_REQ, _REGISTRATION_RES);

        //        });
        //        task.Wait();
        //    }
        //    catch (Exception ex)
        //    {
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }

        //    #region Loger
        //    try
        //    {
        //        using (var stringWriter = new StringWriter())
        //        {
        //            using (var xmlWriter = XmlWriter.Create(stringWriter))
        //            {
        //                XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //            }
        //            MobileResponseData = stringWriter.ToString();

        //        }
        //        XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get RequestMoney Mobile Number Block Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                        FormattedXML.ToString() + Environment.NewLine));
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //    }
        //    #endregion
        //    _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestMoneyBlockMobileNumber.ToString(), 2);
        //    _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RequestMoneyBlockMobileNumber.ToString(), 2);
        //    return _REGISTRATION_RES;

        //}
        #endregion  RequestMoneyBlock/UnblockNumber

        #region GenerateGreenPin

        [HttpPost]
        public REGISTRATION_RES SETGREENPINVERIFICATION([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
            // _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Green Pin Generation Verification Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                _REGISTRATION_REQ.CARDEXP = _REGISTRATION_REQ.CARDEXP.Substring(3, 2) + _REGISTRATION_REQ.CARDEXP.Substring(0, 2);
                _REGISTRATION_REQ.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                if (!DataValidator(enumTransactionType.CreateGreenpinValidation, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "mPIN should be 4 characters";
                    return _REGISTRATION_RES;
                }



                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CreateGreenpinVerification(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create  Green Pin Generation Verification Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            // _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES SETGREENPINOTPVERIFICATION([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
            // _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Green Pin  OTP Verification Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                _REGISTRATION_REQ.CARDEXP = _REGISTRATION_REQ.CARDEXP.Substring(3, 2) + _REGISTRATION_REQ.CARDEXP.Substring(0, 2);
                _REGISTRATION_REQ.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                if (!DataValidator(enumTransactionType.CreateGreenpinValidation, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "mPIN should be 4 characters";
                    return _REGISTRATION_RES;
                }


                int _pinstatus = -1;
                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.VERIFYGREENPINOTP(ref _REGISTRATION_RES, _REGISTRATION_REQ, ref _pinstatus);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create  Green Pin OTP Verification Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            // _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            return _REGISTRATION_RES;

        }



        [HttpPost]
        public REGISTRATION_RES SETGREENPIN([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);

            //_ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create Green Pin Generation Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                _REGISTRATION_REQ.CARDEXP = _REGISTRATION_REQ.CARDEXP.Substring(3, 2) + _REGISTRATION_REQ.CARDEXP.Substring(0, 2);
                _REGISTRATION_REQ.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;

                if (!DataValidator(enumTransactionType.CreateGreenpin, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = "001";
                    _REGISTRATION_RES.ResponseDesc = "mPIN should be 4 characters";
                    return _REGISTRATION_RES;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CreateGreenpin(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();

            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Create  Green Pin Generation Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 2);
            return _REGISTRATION_RES;

        }


        #endregion GenerateGreenPin

        #region Requestmoneyhistory
        [HttpPost]
        public REGISTRATION_RES GetRequestMoneyBlockHistory([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();

            #region Get Request Money details
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Requestmoney block list Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion


                if (!DataValidator(enumTransactionType.MpayAccountBlock, _REGISTRATION_REQ, null))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    return _REGISTRATION_RES;
                }


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.GET_REQUESTMONEYHISTORY(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get Requestmoney block list Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _REGISTRATION_RES;
            #endregion  Get Request Money details
        }
        #endregion Requestmoneyhistory

        #region SelfQRGeberation

        public REGISTRATION_RES SelfNQRCGeneration([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SelfQRGeneration.ToString(), 1);
            _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SelfQRGeneration.ToString(), 1);

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Self QR Code Generation Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessSelfNQRCGeneration(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Self QR Code Generation Transaction  Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SelfQRGeneration.ToString(), 2);
            _ProcessMessage.MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.SelfQRGeneration.ToString(), 2);
            return _REGISTRATION_RES;
        }

        #endregion SelfQRGeberation

        #region NQRCFundTransfer

        [HttpPost]
        public MOBILEBANKING_RESP NQRCFundTransfer([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {

            //added for fetching Last RRN
             //_MOBILEBANKING_REQ.LastTransactionReferenceNumber = IMPSTransactions.VERIFYLASTRRN(_MOBILEBANKING_REQ.DeviceID, 2);

            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            //_MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumber();
            //_MOBILEBANKING_REQ.ReferenceNumber = NQRCGenerateReferenceNumberNew();
            _MOBILEBANKING_REQ.ReferenceNumber = RMA_RRNGenerateReferenceNumber();
            //_MOBILEBANKING_REQ.DeliveryChannel = "NQR";
            _MOBILEBANKING_REQ.DeliveryChannel = "BWY";
            _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****NQRCIntraFundTransfer request recived with  reference number**************" + _MOBILEBANKING_REQ.ReferenceNumber));
                string Message = _MOBILEBANKING_REQ.QRValue;
                string CRC_Cal = _ProcessMessage.CalcCRC16(_MOBILEBANKING_REQ.QRValue.Substring(0, _MOBILEBANKING_REQ.QRValue.Length - 4));
                if (CRC_Cal != _MOBILEBANKING_REQ.QRValue.Substring(_MOBILEBANKING_REQ.QRValue.Length - 4, 4))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.WrongCRC);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.WrongCRC);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region QRSpliter
                string[] Details = new string[50];
                try
                {
                    int getValus = 2;
                    int indexof = 0;
                    for (int index = 0; index < Message.Length;)
                    {
                        string length = Message.Substring(index, getValus);
                        Details[indexof] += length;
                        indexof++;
                        string length1 = Message.Substring(index + length.Length, getValus);
                        Details[indexof] += length1;
                        indexof++;
                        string length3 = Message.Substring(index + length.Length + length1.Length, Convert.ToInt16(length1));
                        Details[indexof] += length3;
                        indexof++;
                        index = index + (length.Length + length1.Length + length3.Length);
                    }
                    for (int i = 0; i < Details.Length; i = i + 3)
                    {
                        string s = Details[i];
                        switch (s)
                        {
                            case "00":
                                _MOBILEBANKING_REQ.Payloadformatindicator = Details[i + 2];
                                break;
                            case "01":
                                _MOBILEBANKING_REQ.Pointofinitiationmethod = Details[i + 2];
                                break;
                            case "09":
                                _MOBILEBANKING_REQ.Merchantidentifier = Details[i + 2];
                                break;
                            case "52":
                                _MOBILEBANKING_REQ.MerchantCategoryCode = Details[i + 2];
                                break;
                            case "53":
                                _MOBILEBANKING_REQ.TransactionCurrencyCode = Details[i + 2];
                                break;
                            case "54":
                                _MOBILEBANKING_REQ.Amount = Details[i + 2];
                                break;
                            case "55":
                                _MOBILEBANKING_REQ.INDICATOR_CONVIENCY = Details[i + 2];
                                break;
                            case "56":
                                _MOBILEBANKING_REQ.FEE_CONVIENCY = Details[i + 2];
                                break;
                            case "57":
                                _MOBILEBANKING_REQ.CONVIENCYPERCENT = Details[i + 2];
                                break;
                            case "58":
                                _MOBILEBANKING_REQ.CountryCode = Details[i + 2];
                                break;
                            case "59":
                                _MOBILEBANKING_REQ.MerchantName = Details[i + 2];
                                break;
                            case "60":
                                _MOBILEBANKING_REQ.NQRCcity = Details[i + 2];
                                break;
                            case "61":
                                _MOBILEBANKING_REQ.POSTALCODE = Details[i + 2];
                                break;
                            case "62":
                                _MOBILEBANKING_REQ.ADDITIONALDATA = Details[i + 2];
                                break;
                            case "63":
                                _MOBILEBANKING_REQ.CRC = Details[i + 2];
                                break;
                            default:
                                //Console.WriteLine("Other");
                                break;
                        }
                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "QR Spilter Error" + ex.ToString());
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }
                #endregion QRSpliter

                _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                DataTable DTbankname = IMPSTransactions.GetBankCodeDetails(_MOBILEBANKING_REQ.Merchantidentifier.Substring(6, 2), "SELECT");
                DataTable DTACQbankid = IMPSTransactions.GetACQNQRCBankCodeDetails(DTbankname.Rows[0][0].ToString());
                if (DTACQbankid != null && DTACQbankid.Rows.Count > 0)
                {
                    _MOBILEBANKING_REQ.AcquirerBankID = DTACQbankid.Rows[0][0].ToString();
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "  Acqbankid : " + _MOBILEBANKING_REQ.AcquirerBankID);
                if (DTbankname != null && DTbankname.Rows.Count > 0)
                {
                    _MOBILEBANKING_REQ.NQRCBankName = DTbankname.Rows[0][0].ToString();
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "  nqrcbankname : " + _MOBILEBANKING_REQ.NQRCBankName);
                if (_MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 6).ToString() == ConfigurationManager.AppSettings["BankQRBIN"]
                    && _MOBILEBANKING_REQ.Merchantidentifier.Substring(6, 2).ToString() == ConfigurationManager.AppSettings["BankQRBankCode"])
                {
                    _MOBILEBANKING_REQ.QRTYPE = "OnUs";
                    DataTable DTNQRCAccountNumber = null;
                    DTNQRCAccountNumber = IMPSTransactions.GetNQRCPrimaryAccount(_MOBILEBANKING_REQ.Merchantidentifier);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "DataTable Rows Count : " + DTNQRCAccountNumber.Rows.Count.ToString() + "Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber);
                    if (DTNQRCAccountNumber.Rows.Count > 0)
                    {
                        _MOBILEBANKING_REQ.BENIFICIARYACC = DTNQRCAccountNumber.Rows[0][0].ToString();
                        _MOBILEBANKING_RESP.BENIFICIARYACC = _MOBILEBANKING_REQ.BENIFICIARYACC.ToString();
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Merchant Account No. : {0} \t Reference Number : {1}"
                        , _MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.ReferenceNumber));
                        if (_MOBILEBANKING_REQ.REMITTERACC == _MOBILEBANKING_REQ.BENIFICIARYACC)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.PayerAndPayeeShouldNotSame);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                            _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;
                            _MOBILEBANKING_RESP.BENIFICIARYACC = _MOBILEBANKING_REQ.BENIFICIARYACC;
                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Remitter & Beneficiary Account Nos. Are Same | Remitter Acc No. : {0} \t Beneficiary Acc No. : {1} \t Reference Number : {2}"
                                , _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.ReferenceNumber));
                            return _MOBILEBANKING_RESP;
                        }
                    }
                    else
                    {
                        _MOBILEBANKING_REQ.BENIFICIARYACC = "";
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Merchant Details Not Found For MerchantID : {0} \t Reference Number : {1}"
                        , _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 6) + "XXXXXX" + _MOBILEBANKING_REQ.Merchantidentifier.Substring(12), _MOBILEBANKING_REQ.ReferenceNumber));
                        if (string.IsNullOrEmpty(_MOBILEBANKING_REQ.BENIFICIARYACC))
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountStopQRInvalid);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountStopQRInvalid);
                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                            _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;
                            _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                            return _MOBILEBANKING_RESP;
                        }
                    }
                }
                else
                {
                    _MOBILEBANKING_REQ.BENIFICIARYACC = _MOBILEBANKING_REQ.Merchantidentifier;
                    _MOBILEBANKING_REQ.BENIFICIARYNAME = _MOBILEBANKING_REQ.MerchantName;
                    _MOBILEBANKING_REQ.QRTYPE = "Acquirer";
                }

                if (!DataValidator(enumTransactionType.NQRCIntraFundTransfer, null, _MOBILEBANKING_REQ))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return _MOBILEBANKING_RESP;
                }

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.ResponseData = null;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return _MOBILEBANKING_RESP;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    if (_MOBILEBANKING_REQ.QRTYPE == "OnUs")
                    {
                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                                }
                                string MobileRequestData = stringWriter.ToString();

                                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****NQRC Onus fund Transfer Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                                FormattedXML.ToString() + Environment.NewLine));
                            }
                        }
                        catch (Exception ex)
                        { _CommanDetails.SystemLogger.WriteErrorLog(null, ex); }
                        #endregion
                        _ProcessMessage.TransactionIntraFundTransforNQRC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                        _ProcessMessage.ProcessFundTransfer(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                        _ProcessMessage.TransactionIntraFundTransforNQRC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 4);
                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                                }
                                MobileResponseData = stringWriter.ToString();

                            }
                            XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****NQRCFundTransfer Onus Fund Transfer Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                    }
                    else if (_MOBILEBANKING_REQ.QRTYPE == "Acquirer")
                    {
                        _MOBILEBANKING_REQ.IsMerchant = true;

                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                                }
                                string MobileRequestData = stringWriter.ToString();

                                XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****NQRC ouward fund Transfer Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                                FormattedXML.ToString() + Environment.NewLine));
                            }
                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                        DataTable GetNQRClastRRN = new DataTable();
                        GetNQRClastRRN = null;
                        GetNQRClastRRN = IMPSTransactions.GetRRNCheck(_MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.DeviceID, "NQRCOutTransaction","00", "GetoutwardRRN");
                        //_MOBILEBANKING_REQ.LastTransactionReferenceNumber = IMPSTransactions.VERIFYLASTRRN(_MOBILEBANKING_REQ.DeviceID, 2);
                        _MOBILEBANKING_REQ.LastTransactionReferenceNumber = GetNQRClastRRN.Rows[0][0].ToString();

                        _ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

                        _ProcessMessage.ProcessNQRCTransaction(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);

                        _ProcessMessage.TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 6);

                        #region Loger
                        try
                        {
                            using (var stringWriter = new StringWriter())
                            {
                                using (var xmlWriter = XmlWriter.Create(stringWriter))
                                {
                                    XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                                    _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                                }
                                MobileResponseData = stringWriter.ToString();
                            }
                            XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                            _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****NQRCFundTransfer outward Fund Transfer Transaction Response To Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                            FormattedXML.ToString() + Environment.NewLine));
                        }
                        catch (Exception ex)
                        {
                            _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        }
                        #endregion
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            return _MOBILEBANKING_RESP;
        }

        #endregion NQRCFundTransfer

        #region NQRCBankCodeDetails
        [HttpPost]
        public MOBILEBANKING_RESP GetNQRCBankCodeDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get NQRCBankCodeDetails Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                var task = Task.Factory.StartNew(() =>
                {
                    DataTable DTbankname = IMPSTransactions.GetBankCodeDetails(_MOBILEBANKING_REQ.NQRCBANKID, "SELECT");

                    if (DTbankname != null && DTbankname.Rows.Count > 0)
                    {

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.BankName = DTbankname.Rows[0][0].ToString();
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.BankName = "";
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get NQRCBankCodeDetails Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion NQRCBankCodeDetails

        #region Forgot mPIN WithoutATM

        [HttpPost]
        public REGISTRATION_RES FORGOTMPINWITHOUTATM([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotTpinWithAccountDetails.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT MPIN (WithoutATM) Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ForgotMpin_WITHOUTATM(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** FORGOT MPIN (WithoutATM) Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.ForgotTpinWithAccountDetails.ToString(), 2);
            return _REGISTRATION_RES;

        }

        #endregion Forgot mPIN WithoutATM

        #region STOPCHEQUEPAYMENT
        [HttpPost]
        public REGISTRATION_RES STOPCHEQUEPAYMENT([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.STOPCHEQUEPAYMENT.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** STOPCHEQUEPAYMENT Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.STOPCHEQUEPAYMENT(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** STOPCHEQUEPAYMENT Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.STOPCHEQUEPAYMENT.ToString(), 2);
            return _REGISTRATION_RES;

        }
        #endregion STOPCHEQUEPAYMENT

        #region CHEQUEBOOKBLOCKLIST
        [HttpPost]
        public REGISTRATION_RES CHEQUEBOOKBLOCKLIST([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CHEQUEBOOKBLOCKLIST.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CHEQUEBOOKBLOCKLIST Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.CHEQUEBOOKBLOCKLIST(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CHEQUEBOOKBLOCKLIST Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CHEQUEBOOKBLOCKLIST.ToString(), 2);
            return _REGISTRATION_RES;

        }
        #endregion CHEQUEBOOKBLOCKLIST

        //#region CHEQUEBOOKBLOCK
        //  //UP or RT service
        //  [HttpPost]
        //  public MOBILEBANKING_RESP CHEQUEBOOKBLOCK([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        //  {
        //      MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
        //      FCUBSAccService.FCUBSAccServiceSEIClient _FCUBSAccService = new FCUBSAccService.FCUBSAccServiceSEIClient("FCUBSAccServiceSEI");


        //      FCUBSAccService.CREATESTOPPAYMENTS_IOPK_REQ _CREATESTOPPAYMENTS_IOPK_REQ = new FCUBSAccService.CREATESTOPPAYMENTS_IOPK_REQ();
        //      FCUBSAccService.CREATESTOPPAYMENTS_IOPK_REQFCUBS_BODY _CREATESTOPPAYMENTS_IOPK_REQFCUBS_BODY = new FCUBSAccService.CREATESTOPPAYMENTS_IOPK_REQFCUBS_BODY();
        //      FCUBSAccService.CREATESTOPPAYMENTS_IOPK_RES _CREATESTOPPAYMENTS_IOPK_RES = new FCUBSAccService.CREATESTOPPAYMENTS_IOPK_RES();
        //      FCUBSAccService.CREATESTOPPAYMENTS_IOPK_RESFCUBS_BODY _CREATESTOPPAYMENTS_IOPK_RESFCUBS_BODY = new FCUBSAccService.CREATESTOPPAYMENTS_IOPK_RESFCUBS_BODY();
        //      FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType = new FCUBSAccService.FCUBS_HEADERType();
        //      FCUBSAccService.CsconchgCreateIOType _ChargeMain = new FCUBSAccService.CsconchgCreateIOType();

        //      try
        //      {
        //          _MOBILEBANKING_REQ.CHEQUEEFFDATE = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd"));
        //          _FCUBS_HEADERType.SOURCE = CBSConfigurationData.STOPCHEQUE_SOURCE.ToString();
        //          _FCUBS_HEADERType.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS;
        //          _FCUBS_HEADERType.MSGID = "91" + GenerateMSGID();
        //          _FCUBS_HEADERType.CORRELID = GenerateReferenceNumber();
        //          _FCUBS_HEADERType.USERID = CBSConfigurationData.STOPCHEQUE_USERID.ToString();
        //          _FCUBS_HEADERType.BRANCH = CBSConfigurationData.STOPCHEQUE_BRANCH.ToString();
        //          _FCUBS_HEADERType.SERVICE = CBSConfigurationData.STOPCHEQUE_SERVICE.ToString();
        //          _FCUBS_HEADERType.OPERATION = CBSConfigurationData.STOPCHEQUE_OPERATION.ToString();

        //          StopPaymentsCreateIOType _StopPaymentsCreateIOType = new StopPaymentsCreateIOType();
        //          //_StopPaymentsCreateIOType.STOP_PAYMENT_NO = _MOBILEBANKING_REQ.STOPPAYMENTNO;
        //          _StopPaymentsCreateIOType.ACCOUNT = _MOBILEBANKING_REQ.AccountNumber;
        //          _StopPaymentsCreateIOType.START_CHECK_NO = _MOBILEBANKING_REQ.ChequeStartNumber;
        //          _StopPaymentsCreateIOType.END_CHECK_NO = _MOBILEBANKING_REQ.ChequeEndNumber;
        //          _StopPaymentsCreateIOType.AMOUNT = 0;
        //          _StopPaymentsCreateIOType.EFFECTIVE_DATE = _MOBILEBANKING_REQ.CHEQUEEFFDATE;
        //          _StopPaymentsCreateIOType.REMARKS = _MOBILEBANKING_REQ.Remark;
        //          _StopPaymentsCreateIOType.STOP_PAYMENT_NO = "";
        //          _StopPaymentsCreateIOType.STOP_PAYMENT_TYPE = "C";
        //          _StopPaymentsCreateIOType.CONFIRMED = "Y";
        //          _StopPaymentsCreateIOType.APPLY_CHARGE = "Y";



        //          FCUBSAccService.CsconchgCreateIOTypeChargeDetails[] _ChargeDetails = new FCUBSAccService.CsconchgCreateIOTypeChargeDetails[1];
        //          _ChargeDetails[0] = new CsconchgCreateIOTypeChargeDetails
        //          {
        //              ADESC = "CHG1"
        //          };



        //          _ChargeMain.ChargeDetails = _ChargeDetails;
        //          _StopPaymentsCreateIOType.ChargeMain = _ChargeMain;

        //          _CREATESTOPPAYMENTS_IOPK_REQFCUBS_BODY.CatmsStopPaymentsIO = _StopPaymentsCreateIOType;

        //          _CREATESTOPPAYMENTS_IOPK_REQ.FCUBS_HEADER = _FCUBS_HEADERType;
        //          _CREATESTOPPAYMENTS_IOPK_REQ.FCUBS_BODY = _CREATESTOPPAYMENTS_IOPK_REQFCUBS_BODY;


        //          _MOBILEBANKING_REQ.BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
        //          _MOBILEBANKING_REQ.STOPCHEQUEFLAG = enumTransactionType.CBSSTOPCHEQUEPAYMENT.ToString();

        //          _CommanDetails.SystemLogger.WriteTransLog(this, "first");

        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
        //                      _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CHEQUEBOOKBLOCK Transaction Request Received From Terminal For Reference Number : " + _CREATESTOPPAYMENTS_IOPK_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion

        //          _ProcessMessage.TransactionStopCheque((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATESTOPPAYMENTS_IOPK_REQ, _CREATESTOPPAYMENTS_IOPK_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);

        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _CREATESTOPPAYMENTS_IOPK_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                  _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
        //                  _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
        //                  _MOBILEBANKING_RESP.ResponseData = null;
        //                  _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
        //                  _ProcessMessage.TransactionStopCheque((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATESTOPPAYMENTS_IOPK_REQ, _CREATESTOPPAYMENTS_IOPK_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);

        //                  return _MOBILEBANKING_RESP;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification

        //          var task = Task.Factory.StartNew(() =>
        //          {

        //              _ProcessHost.ProcessStopChequeToHost(ref _MOBILEBANKING_RESP, _CREATESTOPPAYMENTS_IOPK_REQ, ref _CREATESTOPPAYMENTS_IOPK_RES, _FCUBS_HEADERType, _FCUBSAccService, _MOBILEBANKING_REQ);

        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      _MOBILEBANKING_RESP.TRNDT = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");
        //      _MOBILEBANKING_RESP.DateTime = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
        //                  _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CHEQUEBOOKBLOCK Transaction Response To Terminal For Reference Number : " + _CREATESTOPPAYMENTS_IOPK_REQ.FCUBS_HEADER.MSGID + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion

        //      _ProcessMessage.TransactionStopCheque((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATESTOPPAYMENTS_IOPK_REQ, _CREATESTOPPAYMENTS_IOPK_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
        //      return _MOBILEBANKING_RESP;

        //  }

        //#endregion CHEQUEBOOKBLOCK

        #region RELESECHEQUEPAYMENTLIST
        [HttpPost]
        public REGISTRATION_RES RELESECHEQUEPAYMENTLIST([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RELESECHEQUEPAYMENTLIST.ToString(), 1);
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** RELESECHEQUEPAYMENTLIST Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification


                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.RELESECHEQUEPAYMENTLIST(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** RELESECHEQUEPAYMENTLIST Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.RELESECHEQUEPAYMENTLIST.ToString(), 2);
            return _REGISTRATION_RES;

        }
        #endregion RELESECHEQUEPAYMENTLIST

        #region CHEQUEBOOKRELESE
        //UP or RT service
        #endregion CHEQUEBOOKRELESE

        #region  GetDashBoardDetails
        [HttpPost]
        public MOBILEBANKING_RESP GetDashBoardDetails([FromBody]MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_REQ));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get GetDashBoardDetails  Transaction Request Received From Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            try
            {
                int status = -1;
                var task = Task.Factory.StartNew(() =>
                {
                    _MOBILEBANKING_RESP.DashboardDetails = IMPSTransactions.GetDashboardDetails(out status);
                    if (status == 0)
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    }
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(MOBILEBANKING_RESP));
                            _serelized.Serialize(xmlWriter, _MOBILEBANKING_RESP);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get GetDashBoardDetails  Transaction Response Send to Terminal For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
            }
            catch { }
            return _MOBILEBANKING_RESP;

        }

        #endregion GetDashBoardDetails

        //#region SetcountrywiseChannel

        //  [HttpPost]
        //  public REGISTRATION_RES GET_COUNTRYDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetCountryWiseChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get GET_COUNTRYDETAILS Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }
        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion
        //          var task = Task.Factory.StartNew(() =>
        //          {
        //              // _ProcessMessage.CountryWiseChannel(_REGISTRATION_REQ, ref _REGISTRATION_RES);
        //              CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);
        //              string _Cardno = ConnectionStringEncryptDecrypt.EncryptString((MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey)));
        //              _REGISTRATION_RES.CountryDT = IMPSTransactions.SELECT_COUNTRY(_REGISTRATION_REQ.AccountNumber, _Cardno, _REGISTRATION_REQ.CARDTYPE);

        //              if (_REGISTRATION_RES.CountryDT.Rows.Count > 0)
        //              {
        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              }
        //              else
        //              {
        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NocountryAvlagainstCard);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.NocountryAvlagainstCard);
        //                  _REGISTRATION_RES.CountryDT = null;
        //              }
        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Get GET_COUNTRYDETAILS Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.GetCountryWiseChannel.ToString(), 2);
        //      return _REGISTRATION_RES;

        //  }

        //  [HttpPost]

        //  public REGISTRATION_RES ACCOUNTWISECARDDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();

        //      #region CountryFunctionDisable
        //      string _CountryDisable = ConfigurationManager.AppSettings["CountryDisable"].ToString();
        //      if (_CountryDisable == "true")
        //      {
        //          _CommanDetails.SystemLogger.WriteTransLog(this, "Country Disable");
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CountryDisable);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CountryDisable);

        //          return _REGISTRATION_RES;
        //      }
        //      #endregion CountryFunctionDisable




        //      _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** ACCOUNTWISECARDDETAILS Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion


        //          if (!DataValidator(enumTransactionType.Accountwisecarddetails, _REGISTRATION_REQ, null))
        //          {
        //              _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //              _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              return _REGISTRATION_RES;
        //          }

        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

        //                  return _REGISTRATION_RES;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification

        //          var task = Task.Factory.StartNew(() =>
        //          {
        //              //  _ProcessMessage.CountrywiseChannelInsert(_REGISTRATION_REQ, ref _REGISTRATION_RES);
        //              _ProcessMessage.ACCOUNTWISECARDDETAILS(_REGISTRATION_REQ, ref _REGISTRATION_RES);

        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Set ACCOUNTWISECARDDETAILS Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 2);
        //      return _REGISTRATION_RES;

        //  }

        //  [HttpPost]
        //  public REGISTRATION_RES CARDWISECOUNTRYDETAILS([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //      _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CARDWISECOUNTRYDETAILS Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion


        //          if (!DataValidator(enumTransactionType.COUNTRYWISECARDDTL, _REGISTRATION_REQ, null))
        //          {
        //              _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //              _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              return _REGISTRATION_RES;
        //          }

        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

        //                  return _REGISTRATION_RES;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification

        //          var task = Task.Factory.StartNew(() =>
        //          {

        //              //  _ProcessMessage.CountrywiseChannelInsert(_REGISTRATION_REQ, ref _REGISTRATION_RES);
        //              _ProcessMessage.CARDDETAILSCOUNTRYWISE(_REGISTRATION_REQ, ref _REGISTRATION_RES);

        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** CARDWISECOUNTRYDETAILS Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 2);
        //      return _REGISTRATION_RES;

        //  }

        //  [HttpPost]
        //  public REGISTRATION_RES ADDCOUNTRYWISECHANNEL([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //      _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** AddCountryWiseChannel Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion


        //          if (!DataValidator(enumTransactionType.CountryWiseChannel, _REGISTRATION_REQ, null))
        //          {
        //              _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //              _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              return _REGISTRATION_RES;
        //          }

        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

        //                  return _REGISTRATION_RES;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification

        //          var task = Task.Factory.StartNew(() =>
        //          {
        //              _ProcessMessage.CountrywiseChannelInsert(_REGISTRATION_REQ, ref _REGISTRATION_RES);
        //              // _ProcessMessage.CountryWiseChannel(_REGISTRATION_REQ, ref _REGISTRATION_RES);

        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Set AddCountryWiseChannel Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AddCountryWiseChannel.ToString(), 2);
        //      return _REGISTRATION_RES;

        //  } //add 

        //  [HttpPost]
        //  public REGISTRATION_RES SETCOUNTRYWISEATMCHANNEL([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //      _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdateATMChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SetCountryWiseATMChannel Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion


        //          if (!DataValidator(enumTransactionType.UpdateATMChannel, _REGISTRATION_REQ, null))
        //          {
        //              _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //              _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              return _REGISTRATION_RES;
        //          }

        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

        //                  return _REGISTRATION_RES;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification
        //          var task = Task.Factory.StartNew(() =>
        //          {
        //              _ProcessMessage.CountrywiseATMChannel(_REGISTRATION_REQ, ref _REGISTRATION_RES);
        //              // _ProcessMessage.CountryWiseChannel(_REGISTRATION_REQ, ref _REGISTRATION_RES);

        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }

        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Set SetCountryWiseATMChannel Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdateATMChannel.ToString(), 2);
        //      return _REGISTRATION_RES;

        //  }

        //  [HttpPost]
        //  public REGISTRATION_RES SETCOUNTRYWISEPOSCHANNEL([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        //  {
        //      REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
        //      _REGISTRATION_REQ.REMITTERMOB = _REGISTRATION_REQ.MobileNumber;
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdatePOSChannel.ToString(), 1);
        //      try
        //      {
        //          #region Loger
        //          try
        //          {
        //              using (var stringWriter = new StringWriter())
        //              {
        //                  using (var xmlWriter = XmlWriter.Create(stringWriter))
        //                  {
        //                      XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
        //                      _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
        //                  }
        //                  string MobileRequestData = stringWriter.ToString();

        //                  XDocument FormattedXML = XDocument.Parse(MobileRequestData);
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** SetCountryWisePOSChannel Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                                  FormattedXML.ToString() + Environment.NewLine));
        //              }

        //          }
        //          catch (Exception ex)
        //          {
        //              _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //          }
        //          #endregion
        //         if (!DataValidator(enumTransactionType.UpdatePOSChannel, _REGISTRATION_REQ, null))
        //          {
        //              _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AllMendatoryFieldsRequired);
        //              _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //              return _REGISTRATION_RES;
        //          }
        //          #region LastTransactionVerification
        //          try
        //          {
        //              if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
        //              {
        //                  IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
        //              }
        //              else
        //              {
        //                  _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
        //                  _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TransactionAlreadyProcessed);
        //                  _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                  return _REGISTRATION_RES;
        //              }
        //          }
        //          catch { }
        //          #endregion LastTransactionVerification
        //          var task = Task.Factory.StartNew(() =>
        //          {
        //              _ProcessMessage.CountrywisePOSChannel(_REGISTRATION_REQ, ref _REGISTRATION_RES);


        //          });
        //          task.Wait();
        //      }
        //      catch (Exception ex)
        //      {
        //          _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //          _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #region Loger
        //      try
        //      {
        //          using (var stringWriter = new StringWriter())
        //          {
        //              using (var xmlWriter = XmlWriter.Create(stringWriter))
        //              {
        //                  XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
        //                  _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
        //              }
        //              MobileResponseData = stringWriter.ToString();

        //          }
        //          XDocument FormattedXML = XDocument.Parse(MobileResponseData);
        //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Set SetCountryWisePOSChannel Transaction Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
        //                                                          FormattedXML.ToString() + Environment.NewLine));
        //      }
        //      catch (Exception ex)
        //      {
        //          _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //      }
        //      #endregion
        //      _ProcessMessage.LoginOtherTransactions((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.UpdatePOSChannel.ToString(), 2);
        //      return _REGISTRATION_RES;
        //  }
        //  #endregion SetcountrywiseChannel

        #region BHIM QR Generation

        [HttpPost]
        public REGISTRATION_RES SelfBHIMQRCGeneration([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM QR Code Generation Transaction Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                #region LastTransactionVerification
                try
                {
                    if (IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 0))
                    {
                        IMPSTransactions.VERIFYLASTLRANSACTION(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, 1);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Duplicate Transaction Recieved From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        return _REGISTRATION_RES;
                    }
                }
                catch { }
                #endregion LastTransactionVerification

                var task = Task.Factory.StartNew(() =>
                {
                    _ProcessMessage.ProcessGenerateSelfBhimQR(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    MobileResponseData = stringWriter.ToString();

                }
                XDocument FormattedXML = XDocument.Parse(MobileResponseData);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** BHIM QR Code Generation Transaction  Response To Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                FormattedXML.ToString() + Environment.NewLine));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _REGISTRATION_RES;
        }

        #endregion BHIM QR Generation

        #region ContactUs/AboutUS/Terms

        [HttpPost]
        public REGISTRATION_RES TERMCONDITION([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            //_REGISTRATION_REQ.ReferenceNumber = GenerateReferenceNumber();
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();

            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** TERM CONDITION Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion

                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.TermsCondition = IMPSTransactions.TermConditionDetails();

                    string d = @"<html>
                                <head></head>
                                <body>
                              @table
                                </body>
                                </html>";
                    d = d.Replace("@table", _REGISTRATION_RES.TermsCondition.Rows[0][1].ToString());
                    _REGISTRATION_RES.TermsCondition.Rows[0][0] = _REGISTRATION_RES.TermsCondition.Rows[0][0].ToString();
                    _REGISTRATION_RES.TermsCondition.Rows[0][1] = d;

                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }

            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** TERM CONDITION Request Received From Terminal For Reference Number : " + _REGISTRATION_RES.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion

            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES ContactDetails([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            //_REGISTRATION_REQ.ReferenceNumber = GenerateReferenceNumber();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** ContactDetails Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.ContactDetails = IMPSTransactions.ContactDetails();
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****ContactDetails Request Received From Terminal For Reference Number : " + _REGISTRATION_RES.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            return _REGISTRATION_RES;

        }

        [HttpPost]
        public REGISTRATION_RES AboutUs([FromBody]REGISTRATION_REQ _REGISTRATION_REQ)
        {
            REGISTRATION_RES _REGISTRATION_RES = new REGISTRATION_RES();
            //_REGISTRATION_REQ.ReferenceNumber = GenerateReferenceNumber();
            try
            {
                #region Loger
                try
                {
                    using (var stringWriter = new StringWriter())
                    {
                        using (var xmlWriter = XmlWriter.Create(stringWriter))
                        {
                            XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_REQ));
                            _serelized.Serialize(xmlWriter, _REGISTRATION_REQ);
                        }
                        string MobileRequestData = stringWriter.ToString();

                        XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** AboutUs Request Received From Terminal For Reference Number : " + _REGISTRATION_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                        FormattedXML.ToString() + Environment.NewLine));
                    }

                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }
                #endregion
                var task = Task.Factory.StartNew(() =>
                {
                    _REGISTRATION_RES.AboutUs = IMPSTransactions.AboutUSDetails();
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                });
                task.Wait();
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #region Loger
            try
            {
                using (var stringWriter = new StringWriter())
                {
                    using (var xmlWriter = XmlWriter.Create(stringWriter))
                    {
                        XmlSerializer _serelized = new XmlSerializer(typeof(REGISTRATION_RES));
                        _serelized.Serialize(xmlWriter, _REGISTRATION_RES);
                    }
                    string MobileRequestData = stringWriter.ToString();

                    XDocument FormattedXML = XDocument.Parse(MobileRequestData);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****AboutUs Request Received From Terminal For Reference Number : " + _REGISTRATION_RES.ReferenceNumber + Environment.NewLine + Environment.NewLine +
                                                                    FormattedXML.ToString() + Environment.NewLine));
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
            #endregion
            return _REGISTRATION_RES;

        }

        [HttpGet]
        public async Task<string> ReqAuth()
        {
            string url = "www.google.com";
            return url;
        }


        #endregion ContactUs/AboutUS/Terms

    }
}
