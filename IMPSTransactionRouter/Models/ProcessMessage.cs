using DALC;
using HSMCommunicationChanel;
using IMPSTransactionRouter.FCUBSAccFinService;
using JamaaTech.Smpp.Net.Client;
using MaxiSwitch.Common.TerminalLogger;
using MaxiSwitch.DALC.Configuration;
using MaxiSwitch.DALC.ConsumerTransactions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Mail;
using System.Net.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Script.Serialization;
using static IMPSTransactionRouter.Models.firebase;

namespace IMPSTransactionRouter.Models
{
    public class ProcessMessage
    {
        SSM _SSM = new SSM();
        SMSJson _SMSJson = new SMSJson();
        CommanDetails _CommanDetails = new CommanDetails();
        Schedular _schedular;
        Authentication _Authentication = new Authentication();
        private static Dictionary<string, DataTable> CustomerDetails = null;
        JavaScriptSerializer JS = new JavaScriptSerializer();


        private ProcessHost _processHost = null;
        public ProcessHost _ProcessHost
        {
            get
            {
                if (_processHost == null)
                {
                    _processHost = new ProcessHost();
                }
                return _processHost;
            }
            set { _processHost = value; }
        }

        public static Dictionary<string, DataTable> _BenificiaryDetails = null;
        private static Dictionary<string, List<WaterResponse>> WaterDetails = null;

        public static Dictionary<string, DataTable> _CustomerDetails
        {
            get
            {
                if (CustomerDetails == null)
                    CustomerDetails = new Dictionary<string, DataTable>();
                return CustomerDetails;
            }
            set { CustomerDetails = value; }
        }

        public static Dictionary<string, List<WaterResponse>> _WaterDetails
        {
            get
            {
                if (WaterDetails == null)
                    WaterDetails = new Dictionary<string, List<WaterResponse>>();
                return WaterDetails;
            }
            set { WaterDetails = value; }
        }

        #region SuccessResponseMessage

        public void ProcessBalanceinquiry(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg _SwitchConsumerRequestReqMsg, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                if (Convert.ToInt16(_SwitchConsumerRequestReqMsg.ResponseCode) == (int)MaxiSwitch.API.Terminal.enumResponseCode.Approved)
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    //UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_SwitchConsumerRequestReqMsg.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _SwitchConsumerRequestReqMsg.ResponseCode;
                    //_MOBILEBANKING_RESP.HOSTResponseDesc = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.OpeningBalance = Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N");
                _MOBILEBANKING_RESP.CurrentBalance = Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N");
                _MOBILEBANKING_RESP.AvailableBalance = Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N");
                _MOBILEBANKING_RESP.ResponseData = "Opening Balance is " + Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N")
                                                 + "Current Balance is " + Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N")
                                                 + "Available Balance is " + Convert.ToDouble(_SwitchConsumerRequestReqMsg.BalanceAmount).ToString("N");

                _MOBILEBANKING_RESP.MSGSTAT = Convert.ToInt16(_SwitchConsumerRequestReqMsg.ResponseCode) == (int)MaxiSwitch.API.Terminal.enumResponseCode.Approved ? "SUCCESS" : "FAILURE";
                _MOBILEBANKING_RESP.SOURCE = enumModeOfTransaction.OnUs.ToString();
                _MOBILEBANKING_RESP.UBSCOMP = string.Empty;
                _MOBILEBANKING_RESP.MSGID = _MOBILEBANKING_REQ.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _MOBILEBANKING_REQ.CORRELID;
                _MOBILEBANKING_RESP.USERID = string.Empty;
                _MOBILEBANKING_RESP.BRANCH = _MOBILEBANKING_REQ.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = string.Empty;
                _MOBILEBANKING_RESP.SERVICE = enumTransactionType.BalanceEnquiry.ToString();
                _MOBILEBANKING_RESP.OPERATION = string.Empty;
                _MOBILEBANKING_RESP.DESTINATION = string.Empty;
                _MOBILEBANKING_RESP.MULTITRIPID = string.Empty;
                _MOBILEBANKING_RESP.ACTION = string.Empty;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _MOBILEBANKING_REQ.BRANCH;
                _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.REMITTERACC;
                _MOBILEBANKING_RESP.CCY = string.Empty;
                _MOBILEBANKING_RESP.TRNDT = _SwitchConsumerRequestReqMsg.LocalTransactionDateTime.ToString("dd/MM/yyyy");
                _MOBILEBANKING_RESP.ReferenceNumber = _SwitchConsumerRequestReqMsg.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                // TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationResponseMessage, null, null, null, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 5);
                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Balance inquiry Response recieved from HostInterface for reference number : " + _SwitchConsumerRequestReqMsg.ReferenceNumber + " Response Code: " + _MOBILEBANKING_RESP.ResponseCode));
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                ProcessUnsuccessfullTransactionBLQ(ref _MOBILEBANKING_RESP, null, null, null, _MOBILEBANKING_REQ);
            }
        }//added by sk

        public void ProcessBalanceinquiry(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.QUERYACCBAL_IOFS_REQ _QUERYACCBAL_IOFS_REQ,
                                                                     FCUBSAccService.QUERYACCBAL_IOFS_RES _QUERYACCBAL_IOFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;

                FCUBSAccService.AccBalRestypeACC_BAL[] _AccBalRestypeACC_BAL = new FCUBSAccService.AccBalRestypeACC_BAL[] { };
                _AccBalRestypeACC_BAL = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.ACCBalance;

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                if (_MOBILEBANKING_RESP.MSGSTAT.Contains("SUCCESS"))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    //UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.OpeningBalance = _AccBalRestypeACC_BAL[0].OPNBAL.ToString("N");
                _MOBILEBANKING_RESP.CurrentBalance = _AccBalRestypeACC_BAL[0].CURBAL.ToString("N");
                _MOBILEBANKING_RESP.AvailableBalance = _AccBalRestypeACC_BAL[0].AVLBAL.ToString("N");
                _MOBILEBANKING_RESP.ResponseData = "Opening Balance is " + _AccBalRestypeACC_BAL[0].OPNBAL.ToString()
                                                 + "Current Balance is " + _AccBalRestypeACC_BAL[0].CURBAL.ToString()
                                                 + "Available Balance is " + _AccBalRestypeACC_BAL[0].AVLBAL.ToString();

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _AccBalRestypeACC_BAL[0].BRANCH_CODE;
                _MOBILEBANKING_RESP.CUST_AC_NO = _AccBalRestypeACC_BAL[0].CUST_AC_NO;
                _MOBILEBANKING_RESP.CCY = _AccBalRestypeACC_BAL[0].CCY;
                _MOBILEBANKING_RESP.TRNDT = _AccBalRestypeACC_BAL[0].TRNDT.ToString();
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationResponseMessage, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 5);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                ProcessUnsuccessfullTransactionBLQ(ref _MOBILEBANKING_RESP, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
            }
        }

        public void ProcessGetOutstandingAmt(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.QUERYACCBAL_IOFS_REQ _QUERYACCBAL_IOFS_REQ,
                                                                     FCUBSAccService.QUERYACCBAL_IOFS_RES _QUERYACCBAL_IOFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;

                FCUBSAccService.AccBalRestypeACC_BAL[] _AccBalRestypeACC_BAL = new FCUBSAccService.AccBalRestypeACC_BAL[] { };
                _AccBalRestypeACC_BAL = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.ACCBalance;

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                if (_MOBILEBANKING_RESP.MSGSTAT.Contains("SUCCESS"))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    //UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.BalanceEnquiry.ToString();
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _QUERYACCBAL_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.OpeningBalance = _AccBalRestypeACC_BAL[0].OPNBAL.ToString("N");
                _MOBILEBANKING_RESP.CurrentBalance = _AccBalRestypeACC_BAL[0].CURBAL.ToString("N");
                _MOBILEBANKING_RESP.AvailableBalance = _AccBalRestypeACC_BAL[0].AVLBAL.ToString("N");
                _MOBILEBANKING_RESP.ResponseData = "Opening Balance is " + _AccBalRestypeACC_BAL[0].OPNBAL.ToString()
                                                 + "Current Balance is " + _AccBalRestypeACC_BAL[0].CURBAL.ToString()
                                                 + "Available Balance is " + _AccBalRestypeACC_BAL[0].AVLBAL.ToString();

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCBAL_IOFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _AccBalRestypeACC_BAL[0].BRANCH_CODE;
                _MOBILEBANKING_RESP.CUST_AC_NO = _AccBalRestypeACC_BAL[0].CUST_AC_NO;
                _MOBILEBANKING_RESP.CCY = _AccBalRestypeACC_BAL[0].CCY;
                _MOBILEBANKING_RESP.TRNDT = _AccBalRestypeACC_BAL[0].TRNDT.ToString();
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationResponseMessage, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 5);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                ProcessUnsuccessfullTransactionBLQ(ref _MOBILEBANKING_RESP, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
            }
        }

        public void ProcessGenerateMiniStatement(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, ref FCUBSAccFinService.REQUESTACCSTMT_IOFS_REQ _REQUESTACCSTMT_IOFS_REQ,
                                                                     FCUBSAccFinService.REQUESTACCSTMT_IOFS_RES _REQUESTACCSTMT_IOFS_RES, FCUBSAccFinService.FCUBS_HEADERType _FCUBS_HEADERType)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
            }
        }

        public void ProcessMiniStatement(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSMessagingService.GETCONTRACTMSGS_IOFS_REQ _GETCONTRACTMSGS_IOFS_REQ,
                                                                    FCUBSMessagingService.GETCONTRACTMSGS_IOFS_RES _GETCONTRACTMSGS_IOFS_RES, FCUBSMessagingService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, REQUESTACCSTMT_IOFS_REQ _REQUESTACCSTMT_IOFS_REQ)
        {
            try
            {
                FCUBSMessagingService.ContractMsgsFullTypeMessageDetails[] _Msgdetails = new FCUBSMessagingService.ContractMsgsFullTypeMessageDetails[] { };

                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.REMITTERACC = _MOBILEBANKING_REQ.REMITTERACC;

                if (_GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.MiniStatement.ToString();
                    try
                    {
                        //UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.MiniStatement.ToString();
                    try
                    {
                        UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _Msgdetails = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.ContractMessagesFull.MessageDetails;

                _MOBILEBANKING_RESP.MSGSTAT = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _GETCONTRACTMSGS_IOFS_REQ.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _GETCONTRACTMSGS_IOFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _GETCONTRACTMSGS_IOFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.FCCREF = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.ContractMessagesFull.FCCREF;
                _MOBILEBANKING_RESP.MSGTYPE = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.ContractMessagesFull.MessageDetails[0].MSGTYPE;
                _MOBILEBANKING_RESP.RECEIVER = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.ContractMessagesFull.MessageDetails[0].RECEIVER;
                _MOBILEBANKING_RESP.MSGSTATUS = _GETCONTRACTMSGS_IOFS_RES.FCUBS_BODY.ContractMessagesFull.MessageDetails[0].MSGSTATUS;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.MinistatementData = _Msgdetails[0].MESSAGE.ToString();

                string[] data = _MOBILEBANKING_RESP.MinistatementData.Split(';');
                try
                {
                    _MOBILEBANKING_RESP.MinistatementData = string.Empty;
                    for (int i = 0; i < data.Length; i++)
                    {
                        try
                        {
                            int pTranDesc = data[i].IndexOf(":", 0);
                            int pAmount = data[i].IndexOf(":", pTranDesc + 1);
                            int pCredit = data[i].IndexOf(":", pAmount + 1);
                            int pDate = data[i].IndexOf(":", pCredit + 1);
                            string TranDesc = data[i].Substring(pTranDesc + 1, pAmount - pTranDesc - 8);
                            string Amount = data[i].Substring(pAmount + 1, pCredit - pAmount - 14);
                            string Credit = data[i].Substring(pCredit + 1, pDate - pCredit - 6);
                            string date = data[i].Substring(pDate + 1);
                            _MOBILEBANKING_RESP.MinistatementData += TranDesc + "|" + Amount + "|" + Credit + "|" + date + "^";
                        }
                        catch { }
                    }
                }
                catch { }

                TransactionGetMiniStatement((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REQUESTACCSTMT_IOFS_REQ, _GETCONTRACTMSGS_IOFS_REQ, _GETCONTRACTMSGS_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 0);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessIntraFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                  FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;


                string _BenificiaryName = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2.ToString();
                _CommanDetails.SystemLogger.WriteTransLog(this, "BenificiaryName :" + _BenificiaryName);
                string AccountNumber = _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(0, 1) + "XXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);


                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    if (_MOBILEBANKING_REQ.IsMerchant)
                    {
                        //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                        //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                        //                                                                                                         .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");


                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IntraFundTransfer);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.IntraFundTransfer).Replace("@Name", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2.ToString()).Replace("@Beneficiary", AccountNumber)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");


                    }
                    else
                    {
                        //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                        //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                        //                                                                                                         .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt"); 


                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IntraFundTransfer);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.IntraFundTransfer).Replace("@Name", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2.ToString()).Replace("@Beneficiary", AccountNumber)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");


                    }
                    try
                    {
                        //if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length==0 && _MOBILEBANKING_REQ.MerchantQRMobileNumber.Length > 5)
                        //{
                        //    _MOBILEBANKING_REQ.MerchantMobileNumber = _MOBILEBANKING_REQ.MerchantQRMobileNumber;
                        //}

                        if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)

                        {
                            string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";

                            var task = Task.Factory.StartNew(() =>
                            {

                                ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                            });
                        }
                    }
                    catch { }

                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            var task = Task.Factory.StartNew(() =>
                            {
                                ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);
                                // ProcessSendApproveTransactionFundTransfer(_MOBILEBANKING_REQ, msg);
                            });

                        }
                    }
                    catch { }
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();
                    try
                    {
                        UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount)).ToString();
                    _MOBILEBANKING_REQ.AmountAvailable = _MOBILEBANKING_REQ.AmountAvailable + _MOBILEBANKING_REQ.TXNAMT;
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode).Replace("@Debitaccount", _MOBILEBANKING_REQ.REMITTERACC);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                }
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessVottingFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                  FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    if (_MOBILEBANKING_REQ.IsMerchant)
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    }
                    try
                    {
                        if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                        {
                            string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";
                            ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                        }
                    }
                    catch { }

                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                            ProcessSendApproveTransaction(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                        }
                    }
                    catch { }
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();
                    try
                    {
                        UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount)).ToString();
                    _MOBILEBANKING_REQ.AmountAvailable = _MOBILEBANKING_REQ.AmountAvailable + _MOBILEBANKING_REQ.TXNAMT;
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    TransactionVottingFundTransforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                }
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    //TransactionVotiingFundTransforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessOutwardFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");

                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        CommonLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        CommonLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        CommonLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            var task = Task.Factory.StartNew(() =>
                            {
                                ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);
                                // ProcessSendApproveTransactionFundTransfer(_MOBILEBANKING_REQ, msg);
                            });

                        }
                    }
                    catch { }

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();



                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessBNgulBillPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                   FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BNgulCashInSucess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.BNgulCashInSucess).Replace("@MobileNumber", _MOBILEBANKING_REQ.MobileNumber)
                                                                                                                                     .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@RRN", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt"); ;

                        try
                        {
                            int status = -1;
                            DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                            CommonLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                            CommonLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                            CommonLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                            if (status == 0)
                            {
                                _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                                // ProcessSendApproveTransaction(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                            }
                        }
                        catch { }

                        _MOBILEBANKING_REQ.TransType = enumTransactionType.BNgul.ToString();
                        _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();

                        UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLLEASELINE.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.LeaseLineNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BNgul.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.MobileNumber;
                    }

                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessBillPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        if (_MOBILEBANKING_REQ.IsMisc)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MiscSuccess);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.MiscSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                        }
                        else
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DonationSuccess);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DonationSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                        }


                        /* SMS */


                        #region SMSEmail wrong msg
                        //int statusDB = -1;
                        //DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out statusDB);
                        //_CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        //_CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        //_CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + statusDB);
                        //if (statusDB == 0)
                        //{
                        //    _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                        //}
                        //ProcessSendApproveTransactionRRCO(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                        #endregion SMSEmail wrong msg


                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLLEASELINE.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.LeaseLineNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BNgul.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.MobileNumber;
                    }

                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessVotingBillPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                               FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        if (_MOBILEBANKING_REQ.IsMisc)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MiscSuccess);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.MiscSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                        }
                        else
                        {

                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.VotingSuccess);
                            //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.VotingSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID);

                            //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.VotingSuccess).Replace("@contestantName",_MOBILEBANKING_REQ.ConsumerName.ToString()).Replace("@contestantNumber",_MOBILEBANKING_REQ.ContestantNumber.ToString()).Replace("@totalvotes",_MOBILEBANKING_REQ.VoteCount.ToString()).Replace("@Amount",_MOBILEBANKING_REQ.TXNAMT.ToString());
                            //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.VotingSuccess);
                            //_CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_RESP.ResponseDesc : " + _MOBILEBANKING_RESP.ResponseDesc.ToString());
                            //_CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_REQ.ContestantsName.ToString() : " + _MOBILEBANKING_REQ.ContestantsName.ToString() + " _MOBILEBANKING_REQ.VoteCount.ToString() : " + _MOBILEBANKING_REQ.VoteCount.ToString() + " _MOBILEBANKING_REQ.ContestantNumber.ToString() : " + _MOBILEBANKING_REQ.ContestantNumber.ToString() + " _MOBILEBANKING_REQ.TXNAMT.ToString() : " + _MOBILEBANKING_REQ.TXNAMT.ToString());

                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.VotingSuccess).Replace("@contestantName", _MOBILEBANKING_REQ.ContestantsName.ToString()).Replace("@contestantNumber", _MOBILEBANKING_REQ.ContestantNumber.ToString()).Replace("@totalvotes", _MOBILEBANKING_REQ.VoteCount.ToString()).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");

                        }

                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                        _MOBILEBANKING_REQ.TxnRRN = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF.ToString();
                        ContestantTransactionDetails(_MOBILEBANKING_REQ, "2");
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLLEASELINE.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.LeaseLineNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BNgul.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.MobileNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.ShowPayment.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.ShowID;
                    }

                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessDrukComBillPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DrukComSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DrukComSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@primaryaccount", _MOBILEBANKING_REQ.ConsumerNumber.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessEthoMethoBillPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DrukComSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DrukComSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@primaryaccount", _MOBILEBANKING_REQ.ConsumerNumber.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessBillPayment_CC(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CCSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CCSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                                                                                                                                     .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment_CC((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessBillPayment_Donation(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        if (_MOBILEBANKING_REQ.IsMisc)
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MiscSuccess);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.MiscSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                        }
                        else
                        {
                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DonationSuccess);
                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DonationSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@Name", _MOBILEBANKING_REQ.DONORID) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                        }


                        /* SMS */


                        #region SMSEmail 
                        int statusDB = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out statusDB);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + statusDB);
                        if (statusDB == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                        }
                        string msg = _MOBILEBANKING_RESP.ResponseDesc;
                        var task = Task.Factory.StartNew(() =>
                        {
                            ProcessSendApproveTransactionRRCO(_MOBILEBANKING_REQ, msg);
                        });
                        #endregion SMSEmail


                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                try
                {
                    string PrimaryData = string.Empty;
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                        _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLLEASELINE.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.LeaseLineNumber;
                    }
                    else if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BNgul.ToString())
                    {
                        PrimaryData = _MOBILEBANKING_REQ.MobileNumber;
                    }

                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                    _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION = PrimaryData;
                }
                catch { }
                TransactionPayment((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public bool UpdateTransactionDetails(ref MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;

                if (_MOBILEBANKING_REQ.TransType == enumTransactionType.FT.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.BNgul.ToString())
                {
                    string ActualAmount = "";
                    string ACQActualAmount = "";
                    string BNgulActualAmount = "";
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Available Amount : " + _MOBILEBANKING_REQ.AmountAvailable + "  TXN Amount : " + _MOBILEBANKING_REQ.TXNAMT);

                    if (_MOBILEBANKING_REQ.FundTransferType == FundTransferType.Ouward.ToString())
                    {
                        ACQActualAmount = Convert.ToString(Convert.ToInt32(_MOBILEBANKING_REQ.ACQAmountAvailable) - Convert.ToInt32(_MOBILEBANKING_REQ.TXNAMT));
                        ACQActualAmount = ACQActualAmount.PadLeft(9, '0');
                        ActualAmount = _MOBILEBANKING_REQ.AmountAvailable;
                        ActualAmount = ActualAmount.PadLeft(9, '0');
                        BNgulActualAmount = _MOBILEBANKING_REQ.BNgulAmountAvailable;
                        BNgulActualAmount = BNgulActualAmount.PadLeft(9, '0');
                    }

                    else if (_MOBILEBANKING_REQ.FundTransferType == FundTransferType.BNgulCashIn.ToString())
                    {
                        ACQActualAmount = _MOBILEBANKING_REQ.ACQAmountAvailable;
                        ACQActualAmount = ACQActualAmount.PadLeft(9, '0');
                        ActualAmount = _MOBILEBANKING_REQ.AmountAvailable;
                        ActualAmount = ActualAmount.PadLeft(9, '0');
                        BNgulActualAmount = Convert.ToString(Convert.ToInt32(_MOBILEBANKING_REQ.BNgulAmountAvailable) - Convert.ToInt32(_MOBILEBANKING_REQ.TXNAMT));
                        BNgulActualAmount = BNgulActualAmount.PadLeft(9, '0');
                    }
                    else
                    {

                        ActualAmount = Convert.ToString(Convert.ToInt32(_MOBILEBANKING_REQ.AmountAvailable) - Convert.ToInt32(_MOBILEBANKING_REQ.TXNAMT));
                        ActualAmount = ActualAmount.PadLeft(9, '0');
                        ACQActualAmount = Convert.ToString(Convert.ToInt32(_MOBILEBANKING_REQ.ACQAmountAvailable) - Convert.ToInt32(_MOBILEBANKING_REQ.TXNAMT));
                        ACQActualAmount = ACQActualAmount.PadLeft(9, '0');
                        BNgulActualAmount = _MOBILEBANKING_REQ.BNgulAmountAvailable;
                        BNgulActualAmount = BNgulActualAmount.PadLeft(9, '0');
                    }

                    IMPSTransactions.UpdateCardTxnDetails(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, ActualAmount, _MOBILEBANKING_REQ.AccountUseCount.PadLeft(2, '0'), _MOBILEBANKING_REQ.LastDateTime.ToString("ddMMyy"), _MOBILEBANKING_REQ.LastDateTime.ToString("HHmmss")
                                             , _MOBILEBANKING_REQ.MaxPinUseCount, ACQActualAmount, BNgulActualAmount);
                }
                else
                {
                    IMPSTransactions.UpdateCardTxnDetails(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.AccountUseCount.PadLeft(2, '0'), _MOBILEBANKING_REQ.LastDateTime.ToString("ddMMyy"), _MOBILEBANKING_REQ.LastDateTime.ToString("HHmmss")
                                             , _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.ACQAmountAvailable, _MOBILEBANKING_REQ.BNgulAmountAvailable);


                }

                return true;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                return false;
            }
        }

        public bool UpdateRequestMoneyTransactionDetails(ref MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_REQ.CUST_AC_NO : " + _MOBILEBANKING_REQ.CUST_AC_NO);
                _CommanDetails.SystemLogger.WriteTransLog(this, " _MOBILEBANKING_REQ.REMITTERACC.ToString() : " + _MOBILEBANKING_REQ.REMITTERACC.ToString());

                _MOBILEBANKING_REQ.CUST_AC_NO = _MOBILEBANKING_REQ.REMITTERACC.ToString();
                _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                _CommanDetails.SystemLogger.WriteTransLog(this, " _MOBILEBANKING_REQ.TransType : " + _MOBILEBANKING_REQ.TransType.ToString());

                if (_MOBILEBANKING_REQ.TransType == enumTransactionType.RequestMoney.ToString())
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Available Amount : " + _MOBILEBANKING_REQ.AmountAvailable + "  TXN Amount : " + _MOBILEBANKING_REQ.TXNAMT);


                    string ActualAmount = Convert.ToString(Convert.ToInt32(_MOBILEBANKING_REQ.AmountAvailable) - Convert.ToInt32(_MOBILEBANKING_REQ.TXNAMT));
                    ActualAmount = ActualAmount.PadLeft(9, '0');

                    IMPSTransactions.UpdateCardTxnDetails(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, ActualAmount, _MOBILEBANKING_REQ.AccountUseCount.PadLeft(2, '0'), _MOBILEBANKING_REQ.LastDateTime.ToString("ddMMyy"), _MOBILEBANKING_REQ.LastDateTime.ToString("HHmmss")
                                             , _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.ACQAmountAvailable, _MOBILEBANKING_REQ.BNgulAmountAvailable);
                    _CommanDetails.SystemLogger.WriteTransLog(this, " REQUST Money  ");
                }
                else
                {
                    IMPSTransactions.UpdateCardTxnDetails(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.AccountUseCount.PadLeft(2, '0'), _MOBILEBANKING_REQ.LastDateTime.ToString("ddMMyy"), _MOBILEBANKING_REQ.LastDateTime.ToString("HHmmss")
                                             , _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.ACQAmountAvailable, _MOBILEBANKING_REQ.BNgulAmountAvailable);
                }

                return true;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                return false;
            }
        }

        public void ProcessRequestMoneyTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneyApproved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestMoneyApproved).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                                                                                                                                 .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    _MOBILEBANKING_RESP.CBSRefNumber = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF;

                    try
                    {
                        if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                        {
                            string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";

                            var task = Task.Factory.StartNew(() =>
                            {
                                ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                            });


                        }


                    }
                    catch { }

                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            var task = Task.Factory.StartNew(() =>
                            {
                                ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);
                            });


                        }
                    }
                    catch { }
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.RequestMoney.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();
                    try
                    {
                        UpdateRequestMoneyTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }

                    int StatusNUll = 0;
                    string SUCESS_DECLINE = "";
                    string ResponseCode = "";
                    StatusNUll = 0;
                    SUCESS_DECLINE = "SUCCESS";
                    ResponseCode = "00";

                    //for request money edit amount add amount papameter

                    //IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.MobileNumber, "", "", "", "", "", 3, 0.00m, "", out StatusNUll, "", "", "", SUCESS_DECLINE, ResponseCode, "", _MOBILEBANKING_REQ.RemarkfinalPayment);

                    IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.MobileNumber, "", "", "", "", "", 3, _MOBILEBANKING_REQ.TXNAMT, "", out StatusNUll, "", "", "", SUCESS_DECLINE, ResponseCode, "", _MOBILEBANKING_REQ.RemarkfinalPayment);

                    RequestMoneyFinalPayment(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ, "Accept");


                }
                else
                {
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.RequestMoney.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount)).ToString();
                    _MOBILEBANKING_REQ.AmountAvailable = _MOBILEBANKING_REQ.AmountAvailable + _MOBILEBANKING_REQ.TXNAMT;
                    UpdateRequestMoneyTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;

                    int StatusNUll = 0;

                    StatusNUll = 0;
                    //Error from CBS No need to update 
                    // IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.MobileNumber, "", "", "", "", "", 3, "", "", out StatusNUll, "", "", "", _MOBILEBANKING_RESP.HOSTResponseDesc, _MOBILEBANKING_RESP.HOSTResponseCODE, "");

                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;


                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    TransactionRequestMoneyTranforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                }
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "1");
                    TransactionRequestMoneyTranforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "2");
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;

                int StatusNUll = 0;
                StatusNUll = 0;
                //for request money edit amount add amount papameter
                IMPSTransactions.InsertTokenDetails(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.MobileNumber, "", "", "", "", "", 3, 0.00m, "", out StatusNUll, "", "", "", _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_RESP.ResponseCode, "", _MOBILEBANKING_REQ.RemarkfinalPayment);

            }
        }

        public void ProcessInwardIntraFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                               FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    //if (_MOBILEBANKING_REQ.IsMerchant)
                    //{
                    //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                    //                                                                                                             .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    //}
                    //else
                    //{
                    //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                    //                                                                                                             .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    //}
                    //try
                    //{
                    //    if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                    //    {
                    //        string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";
                    //        ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                    //    }
                    //}
                    //catch { }
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string AccountNumber = _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(0, 1) + "XXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + " \n " + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    string time_ios = DateTime.Now.ToString("dddd, dd MMMM yyyy") + Environment.NewLine + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");


                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InwardNQRCMSG);

                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InwardNQRCMSG).Replace("@Beneficiary", AccountNumber)
                                      .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.ACQNQRCBankName).Replace("\n", Environment.NewLine) + " " + time + " \n " + " via NQRC.";

                    _MOBILEBANKING_RESP.ResponseDesc_IOS =
                        " Received Nu. : " + amount.PadRight(15) + Environment.NewLine +
                        " To Acc  : " + AccountNumber.PadRight(15) + Environment.NewLine +
                        " From :" + _MOBILEBANKING_REQ.ACQNQRCBankName.PadRight(15) + Environment.NewLine +
                        " Txn No :" + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + Environment.NewLine +
                        " Date : " + time_ios.PadRight(15) + Environment.NewLine +
                        " via  NQRC.";


                    //string SMS = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InwardNQRCMSG).Replace("@Beneficiary", AccountNumber)
                    //                  .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.ACQNQRCBankName) + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt") + "\n" + " via NQRC.";


                    try
                    {
                        int status = -1;
                        int statusMobile = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);


                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            string Msg_Ios = _MOBILEBANKING_RESP.ResponseDesc_IOS;
                            var task = Task.Factory.StartNew(() =>
                            {
                                //ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);

                                string d = @"<html>
                                <head></head>
                                <body>
                                Received Nu. : @amt<br />
                                To Acc       : @fromaccount<br /> 
                                From         : @BankName<br />
                                Txn No       : @txn<br />
                                Date         : @time<br />
                                via  NQRC. <br />
                                </body>
                                </html>";
                                d = d.Replace("@amt", amount).Replace("@fromaccount", AccountNumber).Replace("@to", _MOBILEBANKING_REQ.MerchantName).Replace("@txn", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@time", time).Replace("@BankName", _MOBILEBANKING_REQ.ACQNQRCBankName);

                                ProcessSendApproveTransaction_NQRC(_MOBILEBANKING_REQ, d);
                                // ProcessSendApproveTransactionFundTransfer(_MOBILEBANKING_REQ, Msg_Ios);
                            });

                            _CommanDetails.SystemLogger.WriteTransLog(this, "Inward Mail Send to benificiary :" + _MOBILEBANKING_RESP.ResponseDesc);
                        }


                        #region SMS

                        //DataTable DTCustomerMobile = IMPSTransactions.GetMobileDetails(_MOBILEBANKING_REQ.CUST_AC_NO, out statusMobile);


                        //if (statusMobile == 0)
                        //{
                        //    _MOBILEBANKING_REQ.MerchantMobileNumber = DTCustomerMobile.Rows[0]["MOBILENUMBER"].ToString();

                        //    if (_MOBILEBANKING_REQ.MerchantMobileNumber.Length > 8)
                        //    {
                        //        _MOBILEBANKING_REQ.MerchantMobileNumber = _MOBILEBANKING_REQ.MerchantMobileNumber.Substring(_MOBILEBANKING_REQ.MerchantMobileNumber.Length - 8, 8);
                        //    }

                        //    ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                        //    _CommanDetails.SystemLogger.WriteTransLog(this, "SMS Send to benificiary :" + _MOBILEBANKING_RESP.ResponseDesc + "To Mobile : " + _MOBILEBANKING_REQ.MerchantMobileNumber);
                        //}

                        #endregion SMS


                    }
                    catch { }

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    //_MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();

                    try
                    {
                        // UpdateNQRCTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    // _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount)).ToString();
                    //_MOBILEBANKING_REQ.AmountAvailable = _MOBILEBANKING_REQ.AmountAvailable + _MOBILEBANKING_REQ.TXNAMT;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.TXNAMT = _MOBILEBANKING_REQ.TXNAMT;

                    //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _CommanDetails.SystemLogger.WriteTransLog(this, "CBS ResponseCodeHost : " + CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE) + " Refernce Number: " + _MOBILEBANKING_REQ.ReferenceNumber);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "CBS ResponseCodeDescriptionHost : " + CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode) + " Refernce Number: " + _MOBILEBANKING_REQ.ReferenceNumber);

                    _CommanDetails.SystemLogger.WriteTransLog(this, "Response send to middleware issuer down (91) For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber);

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);


                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;


                TransactionInwardIntraFundTrans((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessNQRCOutwardFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                            FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                    //                                                                                                             .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string AccountNumber = _MOBILEBANKING_REQ.CUST_AC_NO.Substring(0, 1) + "XXXXXXXX" + _MOBILEBANKING_REQ.CUST_AC_NO.Substring(_MOBILEBANKING_REQ.CUST_AC_NO.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + " \n " + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    string time_ios = DateTime.Now.ToString("dddd, dd MMMM yyyy") + Environment.NewLine + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");



                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);

                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Beneficiary", AccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName)
                                    .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Replace("\n", Environment.NewLine) + " " + time + " \n " + "via DrukPay NQRC.";

                    //_MOBILEBANKING_RESP.ResponseDesc_IOS = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Beneficiary", AccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName)
                    //               .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Replace(" \n "," ") + " " + time + " " + "via DrukPay NQRC.";


                    //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Beneficiary", AccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName)
                    //                 .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("\n", Environment.NewLine) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt") + " Info : National QR Code Payment. Thank you.";

                    //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RRCOSuccess);

                    //_MOBILEBANKING_RESP.ResponseDesc_IOS = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RRCOSuccess).Replace("@RRN", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@DV", _MOBILEBANKING_REQ.VOUCHERNUMBER).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString("N2")).Replace("@TPN", _MOBILEBANKING_REQ.TPN).Replace("@Name", _MOBILEBANKING_REQ.ConsumerName).Replace("@Date", DateTime.Now.ToString("dd-MMM-yyyy")).Replace("\n", Environment.NewLine);


                    _MOBILEBANKING_RESP.ResponseDesc_IOS =

                        "  Paid Nu. : " + amount.PadRight(15) + Environment.NewLine +
                        " From Acc : " + AccountNumber.PadRight(15) + Environment.NewLine +
                        " To  : " + _MOBILEBANKING_REQ.MerchantName.PadRight(15) + Environment.NewLine +
                        " Remarks  : " + _MOBILEBANKING_REQ.Remark.PadRight(15) + Environment.NewLine +
                        " Txn No : " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + Environment.NewLine +
                        " Date : " + time_ios.PadRight(15) + Environment.NewLine +
                        " via DrukPay NQRC.";


                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        CommonLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        CommonLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        CommonLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            string Msg_Ios = _MOBILEBANKING_RESP.ResponseDesc_IOS;
                            string d = string.Empty;
                            d = @"<html>
                                <head></head>
                                <body>
                                Paid     : @amt<br />
                                From Acc : @fromaccount<br /> 
                                To       : @to , @BankName<br />
                                Remarks  : @remark <br />
                                Txn No   : @txn<br />
                                Date     : @time<br />
                                via DrukPay NQRC. <br />
                                </body>
                                </html>";
                            d = d.Replace("@amt", amount).Replace("@fromaccount", AccountNumber).Replace("@to", _MOBILEBANKING_REQ.MerchantName).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@remark", _MOBILEBANKING_REQ.Remark).Replace("@txn", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@time", time);


                            var task = Task.Factory.StartNew(() =>
                            {
                                // ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);



                                _CommanDetails.SystemLogger.WriteTransLog(this, "SMSmsg after :" + d);

                                ProcessSendApproveTransaction_NQRC(_MOBILEBANKING_REQ, d);
                                //  ProcessSendApproveTransactionFundTransfer(_MOBILEBANKING_REQ, Msg_Ios);
                            });

                            // _MOBILEBANKING_RESP.ResponseDesc_IOS = d;

                            _CommanDetails.SystemLogger.WriteTransLog(this, "outward Mail Send to remitter :" + _MOBILEBANKING_RESP.ResponseDesc);
                        }
                    }
                    catch { }

                    #region SMS
                    //ProcessSendApproveTransactionRRCO(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "SMS Send to Remitter in outward :" + _MOBILEBANKING_RESP.ResponseDesc + "To Mobile : " + _MOBILEBANKING_REQ.MobileNumber);


                    #endregion SMS


                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();



                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                TransactionAcquireOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                TransactionAcquireOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
        }

        public void ProcessNQRCIntraFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                             FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;

                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    //if (_MOBILEBANKING_REQ.IsMerchant)
                    //{
                    //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                    //                                                                                                             .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    //}
                    //else
                    //{
                    //    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FTSuccess);
                    //    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FTSuccess).Replace("@Beneficiary", _MOBILEBANKING_REQ.BENIFICIARYACC)
                    //                                                                                                             .Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF) + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    //}
                    //try
                    //{
                    //    if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                    //    {
                    //        string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";
                    //        ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                    //    }
                    //}
                    //catch { }
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string AccountNumber = _MOBILEBANKING_REQ.CUST_AC_NO.Substring(0, 1) + "XXXXXXXX" + _MOBILEBANKING_REQ.CUST_AC_NO.Substring(_MOBILEBANKING_REQ.CUST_AC_NO.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + " \n " + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");
                    string time_ios = DateTime.Now.ToString("dddd, dd MMMM yyyy") + Environment.NewLine + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt");


                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Beneficiary", AccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName)
                                     .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Replace("\n", Environment.NewLine) + " " + time + "\n" + " via DrukPay NQRC.";

                    //_MOBILEBANKING_RESP.ResponseDesc_IOS = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Beneficiary", AccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName)
                    //               .Replace("@Amount", amount).Replace("@MSGID", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Replace("\n", " ") + " " + time + " " + " via DrukPay NQRC.";

                    _MOBILEBANKING_RESP.ResponseDesc_IOS =
                       " Paid Nu.: " + amount.PadRight(15) + Environment.NewLine +
                       " From Acc: " + AccountNumber.PadRight(15) + Environment.NewLine +
                       " To : " + _MOBILEBANKING_REQ.MerchantName.PadRight(15) + "," + _MOBILEBANKING_REQ.NQRCBankName + Environment.NewLine +
                       " Remarks : " + _MOBILEBANKING_REQ.Remark.PadRight(15) + Environment.NewLine +
                       " Txn No  : " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + Environment.NewLine +
                       " Date  : " + time_ios + Environment.NewLine +
                       " via DrukPay NQRC.";



                    //_MOBILEBANKING_RESP.ResponseDesc_IOS =
                    // " Paid Nu.: " + amount.PadRight(35) + Environment.NewLine +
                    // " From Acc: " + AccountNumber.PadRight(35) + Environment.NewLine +
                    // " To : " + _MOBILEBANKING_REQ.MerchantName.PadRight(35) + "," + _MOBILEBANKING_REQ.NQRCBankName + Environment.NewLine +
                    // " Remarks : " + _MOBILEBANKING_REQ.Remark.PadRight(35) + Environment.NewLine +
                    // " Txn No  : " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF.PadRight(35) + Environment.NewLine +
                    // " Date  : " + time.PadRight(35) + Environment.NewLine +
                    // " via DrukPay NQRC.";


                    if (_MOBILEBANKING_REQ.MerchantCategoryCode != "9999")
                    {
                        _MOBILEBANKING_REQ.IsMerchant = true;

                        DataTable DTbankname = IMPSTransactions.GetMerchantMobileDetails(_MOBILEBANKING_REQ.Merchantidentifier);

                        if (DTbankname != null && DTbankname.Rows.Count > 0)
                        {

                            _MOBILEBANKING_REQ.MerchantMobileNumber = DTbankname.Rows[0][3].ToString();
                        }

                    }

                    try
                    {
                        if (_MOBILEBANKING_REQ.MerchantMobileNumber.Length > 8)
                        {
                            _MOBILEBANKING_REQ.MerchantMobileNumber = _MOBILEBANKING_REQ.MerchantMobileNumber.Substring(_MOBILEBANKING_REQ.MerchantMobileNumber.Length - 8, 8);
                        }
                        // if (_MOBILEBANKING_REQ.IsMerchant && _MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                        if (_MOBILEBANKING_REQ.MerchantMobileNumber.Length > 5)
                        {
                            // string Message = "Your BNB account XXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 8) + " has been credited by BTN " + _MOBILEBANKING_REQ.TXNAMT + " from Acc " + "XXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 8) + " and the transaction reference number is " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + ". Info : BNB DrukPay QR Code";

                            string amount_merchant = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                            string AccountNumber_merchant = _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(0, 1) + "XXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);

                            //string Message = "You have received Nu. " + amount_merchant + " in your account " + AccountNumber_merchant +
                            //    " from  " + _MOBILEBANKING_REQ.REMITTERNAME + ",  " + _MOBILEBANKING_REQ.NQRCBankName + ". Transaction Ref No " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + " " + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt") + " Info : National QR Code Payment. Thank you";

                            string Message = "Received Nu." + amount_merchant + "\n" + "To Acc : " + AccountNumber_merchant + "\n" + "From : " + _MOBILEBANKING_REQ.REMITTERNAME + "," + _MOBILEBANKING_REQ.NQRCBankName + "\n" +
                                           "Remarks : " + _MOBILEBANKING_REQ.Remark + "\n" + "Txn No : " + _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF + "\n" + DateTime.Now.ToString("dddd, dd MMMM yyyy") + " Time : " + System.DateTime.Now.ToString("hh:mm:ss tt") + "\n" + "via DrukPay NQRC.";

                            _CommanDetails.SystemLogger.WriteTransLog(this, "Merchant SMS  :" + Message);

                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            var task = Task.Factory.StartNew(() =>
                            {
                                ProcessSendApproveTransaction_Merchant(_MOBILEBANKING_REQ, Message);
                            });



                            _CommanDetails.SystemLogger.WriteTransLog(this, "Merchant SMS send :" + Message);
                        }

                    }
                    catch { }

                    try
                    {
                        int status = -1;
                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Account Number :" + _MOBILEBANKING_REQ.CUST_AC_NO);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number  :" + _MOBILEBANKING_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Varify Account From CBS :" + status);
                        if (status == 0)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remitter SMS :" + _MOBILEBANKING_RESP.ResponseDesc);
                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                            string msg = _MOBILEBANKING_RESP.ResponseDesc;
                            string Msg_Ios = _MOBILEBANKING_RESP.ResponseDesc_IOS;
                            var task = Task.Factory.StartNew(() =>
                            {
                                //ProcessSendApproveTransaction(_MOBILEBANKING_REQ, msg);
                                //_CommanDetails.SystemLogger.WriteTransLog(this, "SMS before  :" + SMS);
                                //string SMSmsg = SMS.Replace("@", "<br/>");



                                string d = @"<html>
                                <head></head>
                                <body>
                                Paid     : @amt<br />
                                From Acc : @fromaccount<br /> 
                                To       : @to , @BankName<br />
                                Remarks  : @remark <br />
                                Txn No   : @txn<br />
                                Date     : @time<br />
                                via DrukPay NQRC. <br />
                                </body>
                                </html>";

                                d = d.Replace("@amt", amount).Replace("@fromaccount", AccountNumber).Replace("@to", _MOBILEBANKING_REQ.MerchantName).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@remark", _MOBILEBANKING_REQ.Remark).Replace("@txn", _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF).Replace("@time", time);


                                _CommanDetails.SystemLogger.WriteTransLog(this, "SMSmsg after :" + d);
                                ProcessSendApproveTransaction_NQRC(_MOBILEBANKING_REQ, d);
                                // ProcessSendApproveTransactionFundTransfer(_MOBILEBANKING_REQ, Msg_Ios);
                            });



                        }

                        #region SMS
                        //ProcessSendApproveTransactionRRCO(_MOBILEBANKING_REQ, _MOBILEBANKING_RESP.ResponseDesc);
                        //    _CommanDetails.SystemLogger.WriteTransLog(this, "SMS Send to Remitter in intra Onus :" + _MOBILEBANKING_RESP.ResponseDesc + "To Mobile : " + _MOBILEBANKING_REQ.MobileNumber);

                        #endregion SMS


                    }
                    catch { }

                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount) + 1).ToString();

                    try
                    {
                        UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_REQ.TransType = enumTransactionType.FT.ToString();
                    _MOBILEBANKING_REQ.AccountUseCount = (int.Parse(_MOBILEBANKING_REQ.AccountUseCount)).ToString();
                    _MOBILEBANKING_REQ.AmountAvailable = _MOBILEBANKING_REQ.AmountAvailable + _MOBILEBANKING_REQ.TXNAMT;
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                _MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNACC;
                _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;

                TransactionOnusIntraFundTrans((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                TransactionOnusIntraFundTrans((int)enumCommandTypeEnum.AuthorizationRequestMessage, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);

            }
        }

        #endregion

        #region UnSuccessFullResponseMessage
        public void ProcessUnsuccessfullTransactionBLQ(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.QUERYACCBAL_IOFS_REQ _QUERYACCBAL_IOFS_REQ,
                                                                  FCUBSAccService.QUERYACCBAL_IOFS_RES _QUERYACCBAL_IOFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.CUST_AC_NO = _QUERYACCBAL_IOFS_REQ.FCUBS_BODY.ACCBalance.ACC_BAL.CUST_AC_NO;
                _MOBILEBANKING_RESP.BRANCH_CODE = _QUERYACCBAL_IOFS_REQ.FCUBS_BODY.ACCBalance.ACC_BAL.BRANCH_CODE;
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;
                //TransactionBalanceinquiry((int)enumCommandTypeEnum.AuthorizationResponseMessage, _QUERYACCBAL_IOFS_REQ, _QUERYACCBAL_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 6);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessUnsuccessfullTransactionMINI(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccFinService.REQUESTACCSTMT_IOFS_REQ _REQUESTACCSTMT_IOFS_REQ,
                                                                     FCUBSAccFinService.REQUESTACCSTMT_IOFS_RES _REQUESTACCSTMT_IOFS_RES, FCUBSAccFinService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;
                TransactionGenerateMiniStatement((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 0);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
                ProcessUnsuccessfullTransactionMINI(ref _MOBILEBANKING_RESP, _REQUESTACCSTMT_IOFS_REQ, _REQUESTACCSTMT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ);
            }
        }

        public void ProcessUnsuccessfullTransactionMINI(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSMessagingService.GETCONTRACTMSGS_IOFS_REQ _GETCONTRACTMSGS_IOFS_REQ,
                                                                    FCUBSMessagingService.GETCONTRACTMSGS_IOFS_RES _GETCONTRACTMSGS_IOFS_RES, FCUBSMessagingService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, REQUESTACCSTMT_IOFS_REQ _REQUESTACCSTMT_IOFS_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;

                TransactionGetMiniStatement((int)enumCommandTypeEnum.AuthorizationResponseMessage, _REQUESTACCSTMT_IOFS_REQ, _GETCONTRACTMSGS_IOFS_REQ, _GETCONTRACTMSGS_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 0);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessUnsuccessfullTransactionFD(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                  FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessUnsuccessfullTransactionUP(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ,
                                                                 FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _FCUBS_HEADERType.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _FCUBS_HEADERType.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _FCUBS_HEADERType.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _FCUBS_HEADERType.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _FCUBS_HEADERType.ACTION;
                _MOBILEBANKING_RESP.ResponseData = null;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        #endregion

        #region Record Transactions
        public void TransactionBalanceinquiry(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.BalanceEnquiry.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                , null, null, null, null, null, null
                                                , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                             , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                             , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.BalanceEnquiry.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                             , null, null, null, null, null, null
                                             , null, _MOBILEBANKING_RESP.ResponseDesc, null, null, null, null, null, null, null, null, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionGenerateMiniStatement(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.MiniStatement.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                , null, null, null, null, null, null
                                                , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                             , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                             , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.MiniStatement.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                             , null, null, null, null, null, null
                             , null, _MOBILEBANKING_RESP.ResponseDesc, null, null, null, null, null, null, null, null, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionGetMiniStatement(int CommandType, FCUBSAccFinService.REQUESTACCSTMT_IOFS_REQ _REQUESTACCSTMT_IOFS_REQ, FCUBSMessagingService.GETCONTRACTMSGS_IOFS_REQ _GETCONTRACTMSGS_IOFS_REQ, FCUBSMessagingService.GETCONTRACTMSGS_IOFS_RES _GETCONTRACTMSGS_IOFS_RES, FCUBSMessagingService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _REQUESTACCSTMT_IOFS_REQ.FCUBS_BODY.CustAccStmtAdhocRequest.ACC, _REQUESTACCSTMT_IOFS_REQ.FCUBS_BODY.CustAccStmtAdhocRequest.BRN
                                                 , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.BalanceEnquiry.ToString(), _MOBILEBANKING_REQ.TXNAMT, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.MSGID, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.SERVICE, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.OPERATION, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _REQUESTACCSTMT_IOFS_REQ.FCUBS_BODY.CustAccStmtAdhocRequest.ACC, _REQUESTACCSTMT_IOFS_REQ.FCUBS_BODY.CustAccStmtAdhocRequest.BRN
                                                , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.BalanceEnquiry.ToString(), _MOBILEBANKING_REQ.TXNAMT, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.MSGID, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.CORRELID
                                                , null, null, null, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.SERVICE, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.OPERATION, _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.DESTINATION
                                                , _REQUESTACCSTMT_IOFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionIntraFundTransforNQRC(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                string TransType = enumTransactionType.FundTransfer.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.NQRC.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.NQRC.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.NQRC.ToString()
                                     , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                     , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                     , null, null, null, null, null, null
                                     , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                     , null, null, null, null, null, null
                                     , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionIntraFundTransforACC(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                string TransType = enumTransactionType.FundTransfer.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                     , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                     , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                     , null, null, null, null, null, null
                                     , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                     , null, null, null, null, null, null
                                     , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionVottingFundTransforACC(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
                }
                catch { }
                string TransType = string.Empty;

                if (_MOBILEBANKING_REQ.IsMerchant)
                    TransType = enumTransactionType.MerchantPayment.ToString();
                else
                    TransType = enumTransactionType.FundTransfer.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionCheckDeposit(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, enumTransactionType.ChequeDeposit.ToString(), _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, enumTransactionType.ChequeDeposit.ToString(), _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _MOBILEBANKING_REQ.BankCode, enumTransactionType.ChequeDeposit.ToString(), _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , null, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionIntraFundTransforMobile(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {


                string TransType = enumTransactionType.FundTransfer.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , null, null, null, null, null, null
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        //public void TransactionVotiingFundTransforMobile(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        //{
        //    try
        //    {
        //        try
        //        {
        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
        //        }
        //        catch { }
        //        string TransType = string.Empty;
        //        if (_MOBILEBANKING_REQ.IsMerchant)
        //            TransType = enumTransactionType.MerchantPayment.ToString();
        //        else
        //            TransType = enumTransactionType.FundTransfer.ToString();

        //        if (SequenceNumber == 1)
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, enumSource.FLEXCUBE.ToString(), enumSource.FLEXCUBE.ToString()
        //                                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
        //                                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                                         , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                                         , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
        //        }
        //        else if (SequenceNumber == 7)
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, enumSource.FLEXCUBE.ToString(), enumSource.FLEXCUBE.ToString()
        //                                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
        //                                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                                         , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                                         , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
        //        }
        //        else
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, enumSource.FLEXCUBE.ToString(), enumSource.FLEXCUBE.ToString()
        //                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
        //                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                         , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
        //                         , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
        //        }
        //    }
        //    catch (Exception ex)
        //    { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        //}

        public void TransactionOutwardFundTransfer(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {

                string TransType = enumTransactionType.FundTransfer.ToString();
                string source = string.Empty;
                if (_MOBILEBANKING_REQ.IsMerchant)
                    source = enumModeOfTransaction.NQRC.ToString();
                else
                    source = enumModeOfTransaction.BIPS.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , null, null, null, null, null, null
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        //added by Krn on 21-11-22
        public void TransactionAccountVerification(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Inside TransactionAccountVerification");
                string TransType = enumTransactionType.FundTransfer.ToString();
                string source = string.Empty;
                if (_MOBILEBANKING_REQ.IsMerchant)
                    source = enumModeOfTransaction.NQRC.ToString();
                else
                    source = enumModeOfTransaction.BIPS.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , null, null, null, null, null, null
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "After TransactionAccountVerification");
            }

            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        //added by Krn on 22-11-22
        public void TransactionORCodeVerification(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {

                string TransType = enumTransactionType.FundTransfer.ToString();
                string source = string.Empty;
                if (_MOBILEBANKING_REQ.IsMerchant)
                    source = enumModeOfTransaction.NQRC.ToString();
                else
                    source = enumModeOfTransaction.BIPS.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, source
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , null, null, null, null, null, null
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.NQRCBankName, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }


        public void TransactioninwardFundTransfer(int CommandType, MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg, int SequenceNumber)
        {
            try
            {
                int BankCode = int.Parse(CONFIGURATIONCONFIGDATA.BankCode.ToString());
                string TransType = (RequestMsg.ProcessingCode.Substring(0, 2) == "34" ? enumModeOfTransaction.PGVerification.ToString() : RequestMsg.ProcessingCode.Substring(0, 2) == "10" ? enumModeOfTransaction.PGTransaction.ToString()
                                                : enumTransactionType.FundTransfer.ToString());
                string source = string.Empty;
                if (SequenceNumber == 1)
                {
                    RequestMsg.AadharNumber = (RequestMsg.ProcessingCode.Substring(0, 2) == "28" ? enumModeOfTransaction.NQRC.ToString() : RequestMsg.ProcessingCode.Substring(0, 2) == "26" ? enumModeOfTransaction.BIPS.ToString()
                                                : enumModeOfTransaction.PG.ToString());
                }

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Issuer, (int)enumTransSource.RMA, RequestMsg.AadharNumber.ToString()
                                                 , null, RequestMsg.TerminalData, RequestMsg.FromAccountNumber, null, RequestMsg.BeneficiaryBankName, RequestMsg.ToAccountNumber
                                                 , BankCode, TransType, Convert.ToDecimal(RequestMsg.TransactionAmount), RequestMsg.TransactionRefrenceNumber, RequestMsg.TransactionRefrenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, RequestMsg.TerminalID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Issuer, (int)enumTransSource.RMA, RequestMsg.AadharNumber.ToString()
                                                 , null, RequestMsg.TerminalData, RequestMsg.FromAccountNumber, null, RequestMsg.BeneficiaryBankName, RequestMsg.ToAccountNumber
                                                 , BankCode, TransType, Convert.ToDecimal(RequestMsg.TransactionAmount), RequestMsg.TransactionRefrenceNumber, RequestMsg.TransactionRefrenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, RequestMsg.ResponseCode, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, RequestMsg.ResponseCode, RequestMsg.TerminalID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Issuer, (int)enumTransSource.RMA, RequestMsg.AadharNumber.ToString()
                                 , null, RequestMsg.TerminalData, RequestMsg.FromAccountNumber, null, RequestMsg.BeneficiaryBankName, RequestMsg.ToAccountNumber
                                 , BankCode, TransType, Convert.ToDecimal(RequestMsg.TransactionAmount), RequestMsg.TransactionRefrenceNumber, RequestMsg.TransactionRefrenceNumber
                                 , null, null, null, null, null, null
                                 , null, RequestMsg.ResponseCode, null
                                 , null, null, null
                                 , null, null, null
                                 , null, null, null, null, null, 1, RequestMsg.ResponseCode, RequestMsg.ResponseCode, RequestMsg.TerminalID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        //public void TransactionCashInFundTransfer(int CommandType, enumSource _enumSource, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        //{
        //    try
        //    {
        //        try
        //        {
        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

        //            if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
        //                _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

        //        }

        //        catch { }
        //        string TransType = string.Empty;

        //        TransType = enumTransactionType.BNgul.ToString();



        //        _CommanDetails.SystemLogger.WriteTransLog(this, "_CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID :" + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, "SequenceNumber :" + SequenceNumber);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, " _enumSource :" + _enumSource);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, " _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION :" + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION);
        //        _CommanDetails.SystemLogger.WriteTransLog(this, " TransType :" + TransType);




        //        if (SequenceNumber == 1)
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
        //                                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTACNO, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTBRN, null, null
        //                                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                                         , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                                         , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
        //        }
        //        else if (SequenceNumber == 7)
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
        //                                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTACNO, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTBRN, null, null
        //                                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                                         , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                                         , _MOBILEBANKING_RESP.BTFUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
        //        }
        //        else
        //        {
        //            IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
        //                         , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTACNO, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.CUSTBRN, null, null
        //                         , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
        //                         , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
        //                         , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE
        //                         , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
        //        }
        //    }
        //    catch (Exception ex)
        //    { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        //}

        public void TransactionAcquireOutwardFundTransfer(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFNAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFNAME = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR1))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR1 = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR2))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR2 = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
                }
                catch { }

                string TransType = string.Empty;
                //if (_MOBILEBANKING_REQ.IsMerchant)
                //    TransType = enumTransactionType.MerchantPayment.ToString();
                //else
                //    TransType = enumTransactionType.FundTransfer.ToString();

                TransType = enumTransactionType.AcquireQRTransaction.ToString();


                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _MOBILEBANKING_REQ.REMITTERNAME, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ChequeDetails.BENFADDR2, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionOnusIntraFundTrans(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
                }
                catch { }
                string TransType = string.Empty;
                //if (_MOBILEBANKING_REQ.IsMerchant)
                //    TransType = enumTransactionType.MerchantPayment.ToString();
                //else
                //    TransType = enumTransactionType.FundTransfer.ToString();

                TransType = enumTransactionType.OnusQRTransaction.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _MOBILEBANKING_REQ.REMITTERNAME, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionInwardIntraFundTrans(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
                }
                catch { }
                string TransType = string.Empty;
                //if (_MOBILEBANKING_REQ.IsMerchant)
                //    TransType = enumTransactionType.MerchantPayment.ToString();
                //else
                //    TransType = enumTransactionType.FundTransfer.ToString();

                TransType = enumTransactionType.IssuerQRTransaction.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void LoginOtherTransactions(int CommandType, REGISTRATION_REQ _REGISTRATION_REQ, REGISTRATION_RES _REGISTRATION_RES, string TransactionType, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.TransactionOther(CommandType, _REGISTRATION_REQ.DeviceID, TransactionType, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber,
                                                      _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.UserID, null, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.DOB, _REGISTRATION_REQ.CitizenshipCardNo, 0);
                }
                else
                {
                    IMPSTransactions.TransactionOther(CommandType, _REGISTRATION_REQ.DeviceID, TransactionType, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber,
                                                       _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.UserID, _REGISTRATION_RES.ResponseCode, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.DOB, _REGISTRATION_REQ.CitizenshipCardNo, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void MapyOtherTransactions(int CommandType, REGISTRATION_REQ _REGISTRATION_REQ, REGISTRATION_RES _REGISTRATION_RES, string TransactionType, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.MpayTransactionOther(CommandType, _REGISTRATION_REQ.DeviceID, TransactionType, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber,
                                                      _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.UserID, null, _REGISTRATION_REQ.ReferenceNumber, 0);
                }
                else
                {
                    IMPSTransactions.MpayTransactionOther(CommandType, _REGISTRATION_REQ.DeviceID, TransactionType, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber,
                                                       _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.UserID, _REGISTRATION_RES.ResponseCode, _REGISTRATION_REQ.ReferenceNumber, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionPayment(int CommandType, enumSource _enumSource, FCUBSUPService.CREATEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSUPService.CREATEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                }

                catch { }
                string TransType = string.Empty;

                TransType = enumTransactionType.BillPayment.ToString();



                _CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_REQ.ReferenceNumber :" + _MOBILEBANKING_REQ.ReferenceNumber);
                _CommanDetails.SystemLogger.WriteTransLog(this, "SequenceNumber :" + SequenceNumber);
                _CommanDetails.SystemLogger.WriteTransLog(this, " _enumSource :" + _enumSource);
                //_CommanDetails.SystemLogger.WriteTransLog(this, " _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION :" + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION);
                _CommanDetails.SystemLogger.WriteTransLog(this, " TransType :" + TransType);
                //_CommanDetails.SystemLogger.WriteTransLog(this, " _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID :" + _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID);



                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, TransType
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, _enumSource.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, _MOBILEBANKING_REQ.RechargeMobileNumber
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, TransType
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, _enumSource.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , _MOBILEBANKING_REQ.TXNID, _MOBILEBANKING_REQ.TxnRRN, null, null, null, _MOBILEBANKING_REQ.RechargeMobileNumber
                                                 , _MOBILEBANKING_RESP.BTFUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, _MOBILEBANKING_RESP.BTStatusCode, _MOBILEBANKING_RESP.BTStatusDiscription, null, null, null, null, _MOBILEBANKING_RESP.BTTransStatus, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Acquirer, (int)enumTransSource.Mobile, TransType
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                 , _MOBILEBANKING_REQ.BankCode, _enumSource.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , _MOBILEBANKING_RESP.ReferenceNumber, _MOBILEBANKING_RESP.ReferenceNumber, null, null, null, null
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void ContestantTransactionDetails(MOBILEBANKING_REQ _MOBILEBANKING_REQ, string flag)
        {
            try
            {
                IMPSTransactions.ContestTransaction(_MOBILEBANKING_REQ.ShowID, _MOBILEBANKING_REQ.ContestantID, _MOBILEBANKING_REQ.ContestantsName, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.REMITTERNAME, _MOBILEBANKING_REQ.ProductCode, _MOBILEBANKING_REQ.VoteCount, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.REMITTERACC, flag, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.ContestantNumber, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.TxnRRN);
            }
            catch
            {

            }
        }

        //public void RequestMoneyBlock(REGISTRATION_REQ _REGISTRATION_REQ, REGISTRATION_RES _REGISTRATION_RES)
        //{
        //    try
        //    {
        //        DataTable RequestMoneyBlock = null;
        //        DataTable DTReqBlockAlreadyExist = null;
        //        int status = -1;
        //        DataTable DTCustomerdata = null;
        //        #region valid mobile number

        //        #endregion valid mobile number
        //        int StatusUserExist = -1;
        //        DataTable DtUservalidation = null;
        //        DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out StatusUserExist);

        //        if (StatusUserExist == 1)
        //        {
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //            return;
        //        }
        //        #region check if not add in table


        //        if (_REGISTRATION_REQ.flag == "0")
        //        {
        //            DTReqBlockAlreadyExist = IMPSTransactions.BlockRequestAlreadyExist(_REGISTRATION_REQ.REMITTERMOB, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.flag, _REGISTRATION_REQ.REMITTERACC, out status, _REGISTRATION_REQ.REMITTERNAME, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.ReferenceNumber);


        //            _CommanDetails.SystemLogger.WriteTransLog(this, "For Update");
        //            if (DTReqBlockAlreadyExist.Rows.Count == 0 || DTReqBlockAlreadyExist == null)
        //            {
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "For Update 2");

        //                RequestMoneyBlock = IMPSTransactions.BlockRequestMoneyMobileNumber(_REGISTRATION_REQ.REMITTERMOB, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.flag, _REGISTRATION_REQ.REMITTERACC, out status, _REGISTRATION_REQ.REMITTERNAME, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.ReferenceNumber);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.flag" + _REGISTRATION_REQ.flag);
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "status" + status);
        //                if (status > 0)
        //                {
        //                    if (_REGISTRATION_REQ.flag == "0")
        //                    {
        //                        if (RequestMoneyBlock != null || RequestMoneyBlock.Rows.Count > 0)
        //                        {
        //                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestmoneyAccountBlock);
        //                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestmoneyAccountBlock).Replace("@accountno ", _REGISTRATION_REQ.BenificiaryMobileNumber);

        //                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;

        //                            _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);
        //                        }

        //                        if (RequestMoneyBlock == null || RequestMoneyBlock.Rows.Count <= 0)
        //                        {
        //                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToBlock);
        //                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;

        //                        }
        //                    }
        //                    if (_REGISTRATION_REQ.flag == "1")
        //                    {
        //                        if (RequestMoneyBlock != null && Convert.ToInt16(RequestMoneyBlock.Rows[0][0]) > 0)
        //                        {
        //                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestmoneyAccountUnBlock);
        //                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestmoneyAccountUnBlock).Replace("@accountno ", _REGISTRATION_REQ.BenificiaryMobileNumber);

        //                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //                            _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);

        //                        }

        //                        if (RequestMoneyBlock == null || RequestMoneyBlock.Rows.Count <= 0)
        //                        {
        //                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToBlock);
        //                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //                            _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);

        //                        }
        //                    }
        //                }
        //            }
        //            else
        //            {
        //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneyAlreadyBlock);
        //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //                _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);

        //            }
        //        }
        //        #endregion check if not add in table
        //        /// flag 1
        //        #region unblock
        //        if (_REGISTRATION_REQ.flag == "1")
        //        {

        //            _CommanDetails.SystemLogger.WriteTransLog(this, "For Update");

        //            _CommanDetails.SystemLogger.WriteTransLog(this, "For Update 2");

        //            RequestMoneyBlock = IMPSTransactions.BlockRequestMoneyMobileNumber(_REGISTRATION_REQ.REMITTERMOB, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.flag, _REGISTRATION_REQ.REMITTERACC, out status, _REGISTRATION_REQ.REMITTERNAME, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.ReferenceNumber);
        //            _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.flag" + _REGISTRATION_REQ.flag);
        //            _CommanDetails.SystemLogger.WriteTransLog(this, "status" + status);

        //            if (status > 0)
        //            {
        //                if (_REGISTRATION_REQ.flag == "0")
        //                {
        //                    if (RequestMoneyBlock != null || RequestMoneyBlock.Rows.Count > 0)
        //                    {
        //                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestmoneyAccountBlock);
        //                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestmoneyAccountBlock).Replace("@accountno ", _REGISTRATION_REQ.BenificiaryMobileNumber);

        //                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;

        //                        _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);
        //                    }

        //                    if (RequestMoneyBlock == null || RequestMoneyBlock.Rows.Count <= 0)
        //                    {
        //                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToBlock);
        //                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;

        //                    }
        //                }
        //                if (_REGISTRATION_REQ.flag == "1")
        //                {
        //                    if (RequestMoneyBlock != null && Convert.ToInt16(RequestMoneyBlock.Rows[0][0]) > 0)
        //                    {
        //                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestmoneyAccountUnBlock);
        //                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestmoneyAccountUnBlock).Replace("@accountno ", _REGISTRATION_REQ.BenificiaryMobileNumber);

        //                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //                        _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);

        //                    }

        //                    if (RequestMoneyBlock == null || RequestMoneyBlock.Rows.Count <= 0)
        //                    {
        //                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToBlock);
        //                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.REMITTERMOB;
        //                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.REMITTERACC;
        //                        _CommanDetails.SystemLogger.WriteTransLog(this, "ResponseCode" + _REGISTRATION_RES.ResponseCode);

        //                    }
        //                }
        //            }

        //        }
        //        #endregion unblock
        //    }
        //    catch (Exception ex)
        //    { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        //}

        public void TransactionPayment_CC(int CommandType, enumSource _enumSource, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                }
                catch { }
                string TransType = string.Empty;

                TransType = enumTransactionType.BillPayment.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, _enumSource.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, _enumSource.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, _enumSource.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionPayment_Donation(int CommandType, enumSource _enumSource, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                }
                catch { }
                string TransType = string.Empty;

                TransType = enumTransactionType.DONATION.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.BillPay, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void ReversalTransactionPayment(int CommandType, string _enumSource, FCUBSUPService.REVERSEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSUPService.REVERSEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, int SequenceNumber)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            string PrimaryData = string.Empty;
            try
            {
                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                        _MOBILEBANKING_RESP.ResponseCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.ResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.ResponseCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.ResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WDESC;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

            }
            catch { }
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                         _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                }
                catch { }
                string TransType = string.Empty;

                TransType = enumTransactionType.BillPayment.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , _MOBILEBANKING_REQ.MSGID, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, PrimaryData
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _MOBILEBANKING_REQ.MSGID, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, PrimaryData
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void ReversalTransaction(int CommandType, string _enumSource, FCUBSUPService.REVERSEUPTRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSUPService.REVERSEUPTRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSUPService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            // MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            string PrimaryData = string.Empty;
            try
            {
                if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                        _MOBILEBANKING_RESP.ResponseCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.ResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.ResponseCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.ResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WDESC;
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

            }
            catch { }
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                         _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;

                }
                catch { }
                string TransType = string.Empty;

                TransType = enumTransactionType.BillPayment.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , _MOBILEBANKING_REQ.MSGID, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, PrimaryData
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _MOBILEBANKING_REQ.MSGID, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, PrimaryData
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.TXNDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void ViewLoansTransaction(int CommandType, enumSource _enumSource, FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ, FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                string TransType = string.Empty;

                TransType = _enumSource.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.CreateRDTD, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.ACCNO, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.BRN, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.MSGID, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.SERVICE, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.OPERATION, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.CreateRDTD, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.ACCNO, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.ACCNO, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.MSGID, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.SERVICE, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.OPERATION, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.CreateRDTD, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.ACCNO, _QUERYACCOUNT_IOFS_REQ.FCUBS_BODY.AccountMasterIO.BRN, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.MSGID, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.CORRELID
                                 , null, null, null, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.SERVICE, _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.OPERATION, _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.DESTINATION
                                 , _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void CreateRDandTDTransaction(int CommandType, enumSource _enumSource, enumTransactionType _enumTransactionType, FCUBSAccService.CREATETDCUSTACC_FSFS_REQ _CREATETDCUSTACC_FSFS_REQ, FCUBSAccService.CREATETDCUSTACC_FSFS_RES _CREATETDCUSTACC_FSFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                 , null, null, _MOBILEBANKING_REQ.BankCode, _enumTransactionType.ToString(), _MOBILEBANKING_REQ.RDTD_Amount, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                 , null, null, _MOBILEBANKING_REQ.BankCode, _enumTransactionType.ToString(), _MOBILEBANKING_REQ.RDTD_Amount, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                 , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.BalanceEnquiry.ToString(), _MOBILEBANKING_REQ.RDTD_Amount, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.TERM_ACNO.ToString()
                                                 , _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void LoansPaymentTransaction(int CommandType, enumSource _enumSource, FCUBSCLService.CREATEPAYMENT_FSFS_REQ _CREATEPAYMENT_FSFS_REQ, FCUBSCLService.CREATEPAYMENT_FSFS_RES _CREATEPAYMENT_FSFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                string TransType = string.Empty;

                TransType = enumTransactionType.BillPayment.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.Settelments[0].STLACC, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.BRNCODE, null, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.ACCNO
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.Settelments[0].STLACC, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.BRNCODE, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.Loans_paymnet, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.Settelments[0].STLACC, _CREATEPAYMENT_FSFS_REQ.FCUBS_BODY.LiqFull.BRNCODE, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , null, null, null, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.DESTINATION
                                 , _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionRequestMoneyTranforACC(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;
                }
                catch { }
                string TransType = string.Empty;

                if (_MOBILEBANKING_REQ.IsMerchant)
                    TransType = enumTransactionType.MerchantPayment.ToString();
                else
                    TransType = enumTransactionType.RequestMoney.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionRequestMoneyTranforMobile(int CommandType, FCUBSRTService.CREATETRANSACTION_FSFS_REQ _CREATETRANSACTION_FSFS_REQ, FCUBSRTService.CREATETRANSACTION_FSFS_RES _CREATETRANSACTION_FSFS_RES, FCUBSRTService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {

                try
                {
                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP = string.Empty;

                    if (string.IsNullOrEmpty(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME))
                        _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME = string.Empty;

                }

                catch { }
                string TransType = string.Empty;
                if (_MOBILEBANKING_REQ.IsMerchant)
                    TransType = enumTransactionType.MerchantPayment.ToString();
                else
                    TransType = enumTransactionType.RequestMoney.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {

                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN,
                                                   null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                                 , null, null, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);



                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumSource.FLEXCUBE.ToString()
                                 , _FCUBS_HEADERType.UBSCOMP.ToString(), string.Empty, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.TXNACC, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.BRN, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_BODY.TransactionDetails.OFFSETACC
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.MSGID, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.CORRELID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.FCCREF, null, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.SERVICE, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.OPERATION, _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.DESTINATION
                                 , _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.FUNCTIONID, _MOBILEBANKING_RESP.MSGSTAT, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERID
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.MAKERSTAMP, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERID, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CHECKERSTAMP
                                 , _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BOOKDATE, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE1, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.ACCTITLE2
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CC_HOLDER_NAME, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        //added by sk

        public void ReversalTransactionPayment(int CommandType, string _enumSource, MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg _SwitchConsumerRequestReqMsg, MOBILEBANKING_REQ _MOBILEBANKING_REQ, int SequenceNumber)
        {
            MOBILEBANKING_RESP _MOBILEBANKING_RESP = new MOBILEBANKING_RESP();
            string PrimaryData = string.Empty;
            try
            {
                if (Convert.ToInt32(_SwitchConsumerRequestReqMsg.ResponseCode) == (int)enumResponseCode.Approved)
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _SwitchConsumerRequestReqMsg.ResponseCode;
                        _MOBILEBANKING_RESP.ResponseCode = _SwitchConsumerRequestReqMsg.ResponseCode;
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);
                    }
                    catch { }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_SwitchConsumerRequestReqMsg.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.HOSTResponseCODE = _SwitchConsumerRequestReqMsg.ResponseCode;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.HOSTResponseCODE);
                }
            }
            catch { }
            try
            {
                try
                {
                    if (_MOBILEBANKING_REQ.TransType == enumTransactionType.BTRecharge.ToString() || _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPREPAID.ToString() ||
                         _MOBILEBANKING_REQ.TransType == enumTransactionType.TCELLPOSTPAID.ToString())
                        PrimaryData = _MOBILEBANKING_REQ.RechargeMobileNumber;
                    else
                        PrimaryData = _MOBILEBANKING_REQ.ConsumerNumber;
                }
                catch { }
                string TransType = string.Empty;
                TransType = enumTransactionType.BillPayment.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , _MOBILEBANKING_REQ.MSGID, null, null, null, PrimaryData
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.ReversalTransaction(CommandType, (int)enumModeOfTransaction.BillPay, _enumSource.ToString(), enumSource.FLEXCUBE.ToString()
                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, null
                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                 , _MOBILEBANKING_REQ.MSGID, null, null, null, PrimaryData
                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                 , null, null, null
                                 , null, null, null
                                 , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionBHIM(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                string TransType = enumTransactionType.FundTransfer.ToString();

                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else if (SequenceNumber == 7)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                 , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                                 , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                 , null, null, null, null, null, null
                                                 , null, _MOBILEBANKING_RESP.MSGSTAT, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 2);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                     , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null, null, _MOBILEBANKING_REQ.BENIFICIARYACC
                                     , _MOBILEBANKING_REQ.BankCode, TransType, _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                     , null, null, null, null, null, null
                                     , null, _MOBILEBANKING_RESP.MSGSTAT, null
                                     , null, null, null, null, null, null
                                     , _MOBILEBANKING_REQ.BENIFICIARYNAME, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void TransactionAccountStatement(int CommandType, MOBILEBANKING_REQ _MOBILEBANKING_REQ, MOBILEBANKING_RESP _MOBILEBANKING_RESP, int SequenceNumber)
        {
            try
            {
                if (SequenceNumber == 1)
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                                , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                                , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.AccountStatementRequest.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                                , null, null, null, null, null, null
                                                , null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1, null, null, _MOBILEBANKING_REQ.DeviceID, 0);
                }
                else
                {
                    IMPSTransactions.Transaction(CommandType, (int)enumModeOfTransaction.OnUs, (int)enumTransSource.Mobile, enumModeOfTransaction.OnUs.ToString()
                                             , null, string.Empty, _MOBILEBANKING_REQ.REMITTERACC, null
                                             , null, null, _MOBILEBANKING_REQ.BankCode, enumTransactionType.AccountStatementRequest.ToString(), _MOBILEBANKING_REQ.TXNAMT, _MOBILEBANKING_REQ.ReferenceNumber, _MOBILEBANKING_REQ.ReferenceNumber
                                             , null, null, null, null, null, null
                                             , null, _MOBILEBANKING_RESP.ResponseDesc, null, null, null, null, null, null, null, null, null, null, null, null, 1, _MOBILEBANKING_RESP.HostWarningCode, _MOBILEBANKING_RESP.ResponseCode, _MOBILEBANKING_REQ.DeviceID, 1);
                }
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        #endregion

        #region Manage Benificiary

        public void AddBenificiary_Account(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                try
                {
                    //DataTable DTBeneficiary = _BenificiaryDetails[_REGISTRATION_REQ.BenificiaryAccountNumber];
                    //_REGISTRATION_REQ.BenificiaryMobileNumber = DTBeneficiary.Rows[0]["mobile_number"].ToString();
                    //_REGISTRATION_REQ.AccountType = DTBeneficiary.Rows[0]["account_type"].ToString();
                    //_BenificiaryDetails.Remove(_REGISTRATION_REQ.BenificiaryAccountNumber);
                    _REGISTRATION_REQ.BenificiaryMobileNumber = _REGISTRATION_RES.MobileNumber;
                    _REGISTRATION_REQ.AccountType = _REGISTRATION_RES.AccountType;

                }
                catch { }
                IMPSTransactions.AddBenificiary(_REGISTRATION_REQ.BenificiaryNickName, _REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryBankCode,
                                                _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.CustomerID,
                                                (int)enumRegistrationType.AccountNumber, _REGISTRATION_REQ.AccountType, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BenificiaryAdded);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.BenificiaryAdded);
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BenificiaryExists);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public void AddBenificiary_Mobile(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                int StatusUserExist = -1;
                try
                {
                    //DataTable DTBeneficiary = _BenificiaryDetails[_REGISTRATION_REQ.BenificiaryMobileNumber];
                    //_REGISTRATION_REQ.BenificiaryAccountNumber = DTBeneficiary.Rows[0]["cust_ac_no"].ToString();
                    //_REGISTRATION_REQ.AccountType = DTBeneficiary.Rows[0]["account_type"].ToString();
                    //_BenificiaryDetails.Remove(_REGISTRATION_REQ.BenificiaryMobileNumber);
                }
                catch
                {
                }
                DataTable DTGetBeneficaryDetails = IMPSTransactions.GetBeneficiaryByMob(_REGISTRATION_REQ.BenificiaryMobileNumber, out StatusUserExist);
                if (StatusUserExist == 0)
                {
                    _REGISTRATION_REQ.BenificiaryAccountNumber = DTGetBeneficaryDetails.Rows[0]["ACCOUNTNUMBER"].ToString();
                    _REGISTRATION_REQ.AccountType = DTGetBeneficaryDetails.Rows[0]["ACCOUNTTYPE"].ToString();

                    IMPSTransactions.AddBenificiary(_REGISTRATION_REQ.BenificiaryNickName, _REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryBankCode,
                                _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.CustomerID,
                                (int)enumRegistrationType.Mobile, _REGISTRATION_REQ.AccountType, out status);

                    if (status == 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BenificiaryAdded);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.BenificiaryAdded);
                    }
                    else if (status == 1)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BenificiaryExists);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }


            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); }
        }

        public void GetBenificiary(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string AccountDetails = string.Empty;
                string BankCode = "000";
                if (_REGISTRATION_REQ.IsWithinBank)
                    BankCode = "101";
                else if (_REGISTRATION_REQ.IsOtherBank)
                    BankCode = "001";

                IMPSTransactions.GetBenificiary(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, out AccountDetails,
                                                (int)enumRegistrationType.ALL, BankCode, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.AccountDetails = AccountDetails;
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoBenificiaryFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GetBenificiary_Account(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string AccountDetails = string.Empty;
                string BankCode = "000";
                if (_REGISTRATION_REQ.IsWithinBank)
                    BankCode = "101";
                else if (_REGISTRATION_REQ.IsOtherBank)
                    BankCode = "001";

                IMPSTransactions.GetBenificiary(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, out AccountDetails,
                                                (int)enumRegistrationType.AccountNumber, BankCode, out status);
                if (status == 0 && AccountDetails.Length > 10)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.AccountDetails = AccountDetails;
                }
                else if (status == 72)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoBenificiaryFound_OFUS);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoBenificiaryFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GetBenificiary_Mobile(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string AccountDetails = string.Empty;
                string BankCode = "000";
                if (_REGISTRATION_REQ.IsWithinBank)
                    BankCode = "101";
                else if (_REGISTRATION_REQ.IsOtherBank)
                    BankCode = "001";
                IMPSTransactions.GetBenificiary(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, out AccountDetails,
                                                (int)enumRegistrationType.Mobile, BankCode, out status);
                if (status == 0 && AccountDetails.Length > 10)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.AccountDetails = AccountDetails;
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoBenificiaryFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void DeleteBenificiary(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                int regType = -1;
                if (_REGISTRATION_REQ.IsAccountReg)
                    regType = (int)enumRegistrationType.AccountNumber;
                else
                    regType = (int)enumRegistrationType.Mobile;

                string AccountDetails = string.Empty;
                IMPSTransactions.DeleteBenificiary(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.BenificiaryAccountNumber,
                                                    _REGISTRATION_REQ.BenificiaryMobileNumber, regType, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.benificiarydeleted);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.benificiarydeleted);
                    _REGISTRATION_RES.AccountDetails = AccountDetails;
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Unabletodeletebenificiary);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion

        #region Signup & Login

        public void ProcessSignUp(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {

            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                if (!string.IsNullOrEmpty(_REGISTRATION_REQ.CitizenId))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.CitizenId;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.PassportNumber))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.PassportNumber;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.WorkPermit))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.WorkPermit;
                }
                else
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.LicenseNumber;
                }
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    #region AlreadyLogin

                    DataTable DT_MobileExist = IMPSTransactions.MobileAlreadyInDB(_REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.DeviceID, out status);
                    if (status == 0)
                    {
                        // if (DT_MobileExist.Rows[0][1].ToString() != _REGISTRATION_REQ.AccountNumber)
                        // {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AlreadyRegistered);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                        // }
                    }

                    #endregion  AlreadyLogin

                    ////if (status != 0)
                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        _ProcessHost.ProcessCustomerDataValidationFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        else
                        {
                            if (ConfigurationManager.AppSettings["ValidateDOB"].ToString() == "True")
                            {
                                if (_REGISTRATION_REQ.InfoValue != _REGISTRATION_RES.CustomerGovermentID.Trim() || _REGISTRATION_REQ.DOB.Replace("/", "") != _REGISTRATION_RES.DateOfBirth)
                                {
                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidCIDDOB);
                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InvalidCIDDOB);
                                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                    return;
                                }
                            }
                            if (_REGISTRATION_REQ.InfoValue != _REGISTRATION_RES.CustomerGovermentID.Trim())
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidCIDDOB);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InvalidCIDDOB);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                return;
                            }
                            if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
                            {
                                _REGISTRATION_REQ.OTP = GetRandomOTP();
                            }
                            else
                            {
                                _REGISTRATION_REQ.OTP = "123456";
                            }
                            _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                            _REGISTRATION_REQ.MailID = _REGISTRATION_RES.EmailID;
                            try
                            {
                                _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                            }
                            catch { }
                            _CustomerDetails.Add(_REGISTRATION_REQ.AccountNumber, GetCustomerTable(_REGISTRATION_REQ, _REGISTRATION_RES));
                            //ProcessSendSignUpOTP(_REGISTRATION_REQ);
                            string SMSBody = "Dear Customer," + Environment.NewLine + "your DrukPay Register OTP is " + _REGISTRATION_REQ.OTP + "." + Environment.NewLine + "It will be valid for 5 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                            SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                            OTPmPINStatus.SmsStatus = true; OTPmPINStatus.MailStatus = true;
                            _CommanDetails.SystemLogger.WriteTransLog(this, "SMS STATUS : " + OTPmPINStatus.SmsStatus + "\t MAIL STATUS : " + OTPmPINStatus.MailStatus);
                            if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                            { }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                return;
                            }
                            if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.SIGNUP.ToString()))
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void VERIFYOTP(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                if (_REGISTRATION_REQ.MobileNumber.Length < 11)
                {
                    _REGISTRATION_REQ.MobileNumber = "975" + _REGISTRATION_REQ.MobileNumber;
                }
                IMPSTransactions.VALIDATEOTP(_REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.OTP, out status);
                if (status == 0)
                {
                    IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.ValideOTP, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.INVALIDOTP);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void VERIFYGREENPINOTP(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ, ref int _pinstatus)
        {
            try
            {
                int status = -1;
                _pinstatus = -1;
                IMPSTransactions.VALIDATEGREENPINOTP(_REGISTRATION_REQ.CUST_AC_NO, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.OTP, out status);

                _CommanDetails.SystemLogger.WriteTransLog(this, " _REGISTRATION_REQ.CUST_AC_NO:" + _REGISTRATION_REQ.CUST_AC_NO);
                _CommanDetails.SystemLogger.WriteTransLog(this, "  _REGISTRATION_REQ.ReferenceNumber" + _REGISTRATION_REQ.ReferenceNumber);
                _CommanDetails.SystemLogger.WriteTransLog(this, "  _REGISTRATION_REQ.DeviceID" + _REGISTRATION_REQ.DeviceID);
                _CommanDetails.SystemLogger.WriteTransLog(this, "  ConnectionStringEncryptDecrypt.EncryptString(OTP) :" + ConnectionStringEncryptDecrypt.EncryptString(_REGISTRATION_REQ.OTP));
                if (status == 0)
                {
                    IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.ValideOTP, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _pinstatus = 0;
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.INVALIDOTP);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessCreatePassword(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string infovalue = string.Empty;
                string infotype = string.Empty;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.CreatePass, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    int CustomerStatus = -1;

                    try
                    {
                        IMPSTransactions.VERIFYSIGNUPSTATUS(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out CustomerStatus, out infovalue, out infotype);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "VERIFYSIGNUPSTATUS status : " + CustomerStatus + "mobile number : " + _REGISTRATION_REQ.MobileNumber + " infovalue " + infovalue + " infotype " + infotype);
                        if (CustomerStatus == 0)
                        {
                            string mPIN = string.Empty;
                            _SSM.GetOffset(ref _Authentication, ref _REGISTRATION_REQ, out mPIN);
                            if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                            {
                                _REGISTRATION_REQ.mPIN = mPIN;
                                //_CommanDetails.SystemLogger.WriteTransLog(this, string.Format("*****MPIN IS: " + _REGISTRATION_REQ.mPIN));
                                _CommanDetails.SystemLogger.WriteTransLog(this, "pin generated successfullly");

                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                return;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                        return;
                    }

                    _CommanDetails.SystemLogger.WriteTransLog(this, _REGISTRATION_REQ.AccountNumber);
                    DataTable DtCustomerdata = _CustomerDetails[_REGISTRATION_REQ.AccountNumber];
                    _CommanDetails.SystemLogger.WriteTransLog(this, "data recieved from dtcustomerdata");
                    _REGISTRATION_REQ.MailID = "skabcd@gmail";
                    // DtCustomerdata.Rows[0]["e_mail"].ToString();//commented on 22012023
                    _CommanDetails.SystemLogger.WriteTransLog(this, "mail-id : " + _REGISTRATION_REQ.MailID);
                    //_REGISTRATION_REQ.InfoValue = infovalue;
                    //_REGISTRATION_REQ.InfoType = Convert.ToInt32(infotype);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "first_name : " + DtCustomerdata.Rows[0]["first_name"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "cust_no : " + DtCustomerdata.Rows[0]["cust_no"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "DeviceID : " + _REGISTRATION_REQ.DeviceID);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "MobileNumber : " + _REGISTRATION_REQ.MobileNumber);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "AccountNumber : " + _REGISTRATION_REQ.AccountNumber);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "account_type : " + DtCustomerdata.Rows[0]["account_type"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "Password : " + _REGISTRATION_REQ.Password);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "PINOFFSET : " + _REGISTRATION_REQ.PINOFFSET);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "CCY : " + DtCustomerdata.Rows[0]["CCY"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "RegType : " + DtCustomerdata.Rows[0]["RegType"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "InfoValue : " + DtCustomerdata.Rows[0]["InfoValue"].ToString());
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "InfoType : " + DtCustomerdata.Rows[0]["InfoType"].ToString());

                    if (CustomerStatus == 0)
                    {
                        string SMSBody = "Dear Customer," + Environment.NewLine + "Your Transaction TPIN for DrukPay is : " + _REGISTRATION_REQ.mPIN + "." + Environment.NewLine + "Do not share this transaction TPIN to anyone for security reasons.";
                        SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mpin Send Successfully");
                        //ProcessSendmPIN(_REGISTRATION_REQ);
                        //OTPmPINStatus.SmsStatus = true; OTPmPINStatus.MailStatus = true;
                        IMPSTransactions.CREATEPASSWORD(DtCustomerdata.Rows[0]["first_name"].ToString(), DtCustomerdata.Rows[0]["cust_no"].ToString(),
                                                        null, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, DtCustomerdata.Rows[0]["account_type"].ToString(), _REGISTRATION_REQ.Password,
                                                        _REGISTRATION_REQ.PINOFFSET, DtCustomerdata.Rows[0]["CCY"].ToString(), DtCustomerdata.Rows[0]["RegType"].ToString(), DtCustomerdata.Rows[0]["InfoValue"].ToString(), DtCustomerdata.Rows[0]["InfoType"].ToString(), out status);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "first_name : " + DtCustomerdata.Rows[0]["first_name"].ToString());
                        IMPSTransactions.CREATEPASSWORD(DtCustomerdata.Rows[0]["first_name"].ToString(), DtCustomerdata.Rows[0]["cust_no"].ToString(),
                                null, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, DtCustomerdata.Rows[0]["account_type"].ToString(), _REGISTRATION_REQ.Password,
                                _REGISTRATION_REQ.PINOFFSET, DtCustomerdata.Rows[0]["CCY"].ToString(), DtCustomerdata.Rows[0]["RegType"].ToString(), infovalue, infotype, out status);
                    }
                    //try
                    //{
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "first_name : " + DtCustomerdata.Rows[0]["first_name"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "last_name : " + DtCustomerdata.Rows[0]["last_name"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "cust_no : " + DtCustomerdata.Rows[0]["cust_no"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "DeviceID : " + _REGISTRATION_REQ.DeviceID);
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "MobileNumber : " + _REGISTRATION_REQ.MobileNumber);
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "AccountNumber : " + _REGISTRATION_REQ.AccountNumber);
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "account_type : " + DtCustomerdata.Rows[0]["account_type"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "Password : " + _REGISTRATION_REQ.Password);
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "PINOFFSET : " + _REGISTRATION_REQ.DeviceID);
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "CCY : " + DtCustomerdata.Rows[0]["CCY"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "RegType : " + DtCustomerdata.Rows[0]["RegType"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "InfoValue : " + DtCustomerdata.Rows[0]["InfoValue"].ToString());
                    //    //_CommanDetails.SystemLogger.WriteTransLog(this, "InfoType : " + DtCustomerdata.Rows[0]["InfoType"].ToString());

                    //    //          _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("first_name    : {0}" + "\t" + "last_name      : {1}" + "\t" + "cust_no      : {2}" + "\t" + "DeviceID: {3}" + "\t" +
                    //    //          "MobileNumber       : {4}" + "\t" + "AccountNumber   : {5}" + "\t" + "account_type   : {6}" + "\t" + "Password   : {7}" + "\t" +
                    //    //          "PINOFFSET   : {8}" + "\t" + "CCY    : {9}" + "\t" + "RegType : {10}" + "\t" + "InfoValue  : {11} "
                    //    //           , DtCustomerdata.Rows[0]["first_name"].ToString(), DtCustomerdata.Rows[0]["last_name"].ToString(), DtCustomerdata.Rows[0]["cust_no"].ToString(),_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber
                    //    //           , _REGISTRATION_REQ.AccountNumber, DtCustomerdata.Rows[0]["account_type"].ToString(), _REGISTRATION_REQ.Password, _REGISTRATION_REQ.PINOFFSET, DtCustomerdata.Rows[0]["CCY"].ToString(), DtCustomerdata.Rows[0]["RegType"].ToString(), DtCustomerdata.Rows[0]["InfoValue"].ToString()));


                    //    //IMPSTransactions.CREATEPASSWORD(DtCustomerdata.Rows[0]["first_name"].ToString() + " " + DtCustomerdata.Rows[0]["last_name"].ToString(), DtCustomerdata.Rows[0]["cust_no"].ToString(),
                    //    //                                null, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, DtCustomerdata.Rows[0]["account_type"].ToString(), _REGISTRATION_REQ.Password,
                    //    //                                _REGISTRATION_REQ.PINOFFSET, DtCustomerdata.Rows[0]["CCY"].ToString(), DtCustomerdata.Rows[0]["RegType"].ToString(), DtCustomerdata.Rows[0]["InfoValue"].ToString(), DtCustomerdata.Rows[0]["InfoType"].ToString(), out status);


                    //    IMPSTransactions.CREATEPASSWORD(DtCustomerdata.Rows[0]["first_name"].ToString() + " " + DtCustomerdata.Rows[0]["last_name"].ToString(), DtCustomerdata.Rows[0]["cust_no"].ToString(),
                    //                                    null, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, DtCustomerdata.Rows[0]["account_type"].ToString(), _REGISTRATION_REQ.Password,
                    //                                    _REGISTRATION_REQ.PINOFFSET, DtCustomerdata.Rows[0]["CCY"].ToString(), DtCustomerdata.Rows[0]["RegType"].ToString(),_REGISTRATION_REQ.InfoValue,Convert.ToString(_REGISTRATION_REQ.InfoType), out status);


                    //}
                    //catch (Exception ex)
                    //{

                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "error in create password db insertion");
                    //    _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                    //}
                    if (status == 0)
                    {
                        if (CustomerStatus == 0)
                        {
                            IMPSTransactions.UPDATEOFFSET(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _Authentication.NewOffset);

                            try
                            {
                                if (DtCustomerdata.Rows[0]["RegType"].ToString() == "J")//|| DtCustomerdata.Rows[0]["RegType"].ToString() == "C")
                                {
                                    var task = Task.Factory.StartNew(() =>
                                    {
                                        ProcessSignUpForm_Mail(_REGISTRATION_REQ);
                                    });
                                }
                            }
                            catch { }
                        }
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.UserID = DtCustomerdata.Rows[0]["cust_no"].ToString().Trim();
                        _REGISTRATION_RES.CustomerID = DtCustomerdata.Rows[0]["cust_no"].ToString().Trim();
                        _REGISTRATION_RES.CustomerName = DtCustomerdata.Rows[0]["first_name"].ToString() + " " + DtCustomerdata.Rows[0]["last_name"].ToString();
                        _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                        return;
                    }
                    else
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                        return;
                    }

                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ForgotPassword(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                if (!string.IsNullOrEmpty(_REGISTRATION_REQ.CitizenId))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.CitizenId;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.PassportNumber))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.PassportNumber;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.WorkPermit))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.WorkPermit;
                }
                else
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.LicenseNumber;
                }

                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.VALIDATEFORGOTPASS(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.InfoValue, _REGISTRATION_REQ.InfoType, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }

                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    ////*****************Commented On 21092020******************************************
                    ////DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);                    
                    if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }

                    else
                    {
                        if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
                        {
                            _REGISTRATION_REQ.OTP = GetRandomOTP();
                        }
                        else
                        {
                            _REGISTRATION_REQ.OTP = "123456";
                        }
                        //_REGISTRATION_REQ.OTP = GetRandomOTP();
                        //_REGISTRATION_REQ.OTP = "123456";
                        _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                        _REGISTRATION_REQ.MailID = _REGISTRATION_RES.EmailID;
                        try
                        {
                            _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                        }
                        catch (Exception ex)
                        { }
                        _CustomerDetails.Add(_REGISTRATION_REQ.AccountNumber, GetCustomerTable(_REGISTRATION_REQ, _REGISTRATION_RES));
                        string SMSBody = "Dear Customer," + Environment.NewLine + "OTP to reset your DrukPay Password is " + _REGISTRATION_REQ.OTP + "." + Environment.NewLine + "It will be valid for 5 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                        SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                        //ProcessSendForgorPasswordOTP(_REGISTRATION_REQ);
                        if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.ForgotPassword.ToString()))
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ChangePassword(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                IMPSTransactions.VALIDATELOGIN(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.Password, out CustomerName, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.CHANGEPASSWORD(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.NewPassword, out status);
                    if (status == 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.PasswordChanged);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.PasswordChanged);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.CustomerName = CustomerName;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToChangePassword);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.CustomerName = CustomerName;
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessSignIn(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.VALIDATESIGNIN(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.ReferenceNumber, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "ACCNO : " + _REGISTRATION_REQ.AccountNumber);
                        ////****************Commented On 21092020 (Customer Data Verification From CBS)**********************************************
                        ////DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);
                        _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "ACCNO 1: " + _REGISTRATION_RES.AccountNumber);
                        if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, "status: not zero");
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }

                        #region CBSWiseMobileUpdate

                        _CommanDetails.SystemLogger.WriteTransLog(this, "Old Mobile: " + _REGISTRATION_REQ.MobileNumber + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "CBS Mobile: " + _REGISTRATION_RES.MobileNumber + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                        if (status == 0)
                        {
                            if (_REGISTRATION_REQ.MobileNumber != _REGISTRATION_RES.MobileNumber.Substring(3))
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(this, "Signin MObileNumber Update started: ");
                                DataTable DT = IMPSTransactions.UpdateMobileCBSWise(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_RES.MobileNumber, out status);
                                _REGISTRATION_RES.IsMobileUpdate = true;
                                if (DT != null && DT.Rows.Count > 0)
                                {
                                    _REGISTRATION_REQ.MobileNumber = DT.Rows[0][1].ToString();
                                }
                                _CommanDetails.SystemLogger.WriteTransLog(this, "Updated MObile Number: " + _REGISTRATION_REQ.MobileNumber);
                            }
                        }

                        #endregion CBSWiseMobileUpdate

                        if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
                        {
                            _REGISTRATION_REQ.OTP = GetRandomOTP();
                        }
                        else
                        {
                            _REGISTRATION_REQ.OTP = "123456";
                        }
                        // _REGISTRATION_REQ.OTP = GetRandomOTP();
                        // _REGISTRATION_REQ.OTP = "123456";
                        _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                        //  _REGISTRATION_REQ.MailID =_REGISTRATION_RES.EmailID;                        
                        _CommanDetails.SystemLogger.WriteTransLog(this, "e_mail : " + _REGISTRATION_REQ.MailID);
                        try
                        {
                            _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                        }
                        catch { }
                        _CustomerDetails.Add(_REGISTRATION_REQ.AccountNumber, GetCustomerTable(_REGISTRATION_REQ, _REGISTRATION_RES));

                        if (_REGISTRATION_REQ.MobileNumber.Length > 7)
                            _REGISTRATION_REQ.MobileNumber = _REGISTRATION_REQ.MobileNumber.Substring(_REGISTRATION_REQ.MobileNumber.Length - 8);
                        string SMSBody = "Dear Customer," + Environment.NewLine + "your DrukPay login OTP is " + _REGISTRATION_REQ.OTP + "." + Environment.NewLine + "It will be valid for 5 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                        SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                        //ProcessSendSignINOTP(_REGISTRATION_REQ);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "ProcessSendSignINOTP: " + "1");
                        OTPmPINStatus.SmsStatus = true; OTPmPINStatus.MailStatus = true;
                        if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                        { }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        if (_REGISTRATION_REQ.MobileNumber.Length < 11)
                        {
                            _REGISTRATION_REQ.MobileNumber = "975" + _REGISTRATION_REQ.MobileNumber;
                        }
                        if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.SIGNIN.ToString()))
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        }
                        //_CommanDetails.SystemLogger.WriteTransLog(this, "ProcessSendSignINOTP: " + "2");
                    }
                }
            }
            catch (Exception ex)
            {
                //_CommanDetails.SystemLogger.WriteTransLog(this, "ProcessSendSignINOTP: " + "3");
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        public void ProcessLogin(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                int MOBstatus_old = -1;

                DataTable ExistingMobileNumber_oldmobile = IMPSTransactions.GetMobileDetails(_REGISTRATION_REQ.AccountNumber, out MOBstatus_old);
                if (MOBstatus_old == 0)
                {
                    if (ExistingMobileNumber_oldmobile.Rows[0][0].ToString().Length > 8)
                    {
                        _REGISTRATION_REQ.MobileNumber = ExistingMobileNumber_oldmobile.Rows[0][0].ToString().Substring(3, 8);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "ExistingMobileNumber_oldmobile  :" + _REGISTRATION_REQ.MobileNumber + "ref :" + _REGISTRATION_REQ.ReferenceNumber);
                    }
                    else
                    {
                        _REGISTRATION_REQ.MobileNumber = ExistingMobileNumber_oldmobile.Rows[0][0].ToString();
                    }
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "ExistingMobileNumber_oldmobile 1 :" + _REGISTRATION_REQ.MobileNumber + "ref :" + _REGISTRATION_REQ.ReferenceNumber);
                if (_REGISTRATION_REQ.Isbiometric)
                {
                    IMPSTransactions.VALIDATEBIOMETRICLOGIN(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, out CustomerName, out status);
                }
                else
                {
                    IMPSTransactions.VALIDATELOGIN(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.Password, out CustomerName, out status);
                }
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    string _AutoMobileUpdate = ConfigurationManager.AppSettings["AutoMobileUpdate"].ToString();
                    if (_AutoMobileUpdate == "true")
                    {
                        int MOBstatus = -1;
                        DataTable ExistingMobileNumber = IMPSTransactions.GetMobileDetails(_REGISTRATION_REQ.AccountNumber, out MOBstatus);
                        if (MOBstatus == 0)
                        {
                            _REGISTRATION_REQ.OLDMobileNumber = ExistingMobileNumber.Rows[0][0].ToString();
                        }
                        else
                        {
                            _REGISTRATION_REQ.OLDMobileNumber = "";
                        }
                        ////******************Added On 21092020*****************************************
                        _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);

                        ////******************Commented On 21092020*****************************************
                        ////DataTable DTCustomerdataMB = IMPSTransactions.VERIFYCUSTOMERDATA(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);
                        ///
                        if (_REGISTRATION_RES.ResponseCode == "00")
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Existing Mobile: " + _REGISTRATION_REQ.OLDMobileNumber + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "CBS Mobile: " + _REGISTRATION_RES.MobileNumber + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                            string _oldMobile = _REGISTRATION_REQ.OLDMobileNumber.Substring(_REGISTRATION_REQ.OLDMobileNumber.Length - 8, _REGISTRATION_REQ.OLDMobileNumber.Length - (_REGISTRATION_REQ.OLDMobileNumber.Length - 8));
                            string _newmobile = _REGISTRATION_RES.MobileNumber;
                            _CommanDetails.SystemLogger.WriteTransLog(this, "_oldMobile Mobile: " + _oldMobile + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "_newmobile Mobile: " + _newmobile + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                            DataTable DT_MobileExist = IMPSTransactions.MobileAlreadyInDB(_newmobile, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.DeviceID, out status);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Status : " + status);
                            if (status == 0)
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(this, " if Status 0 then : " + DT_MobileExist.Rows[0][1].ToString() + " " + _REGISTRATION_REQ.AccountNumber);
                                if (DT_MobileExist.Rows[0][1].ToString() != _REGISTRATION_REQ.AccountNumber)
                                {
                                    _CommanDetails.SystemLogger.WriteTransLog(this, "RC : 1");
                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.MobileAlreadyExist);
                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                    return;
                                }
                            }
                            else
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(this, " old mobile : " + _oldMobile + " new mobile :  " + _newmobile);
                                if (Convert.ToString(_oldMobile) != Convert.ToString(_newmobile) && (!string.IsNullOrEmpty(_newmobile)))
                                {
                                    _CommanDetails.SystemLogger.WriteTransLog(this, "RC : 2");
                                    _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile is not duplicated . RRN :" + _REGISTRATION_RES.ReferenceNumber);
                                    MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AutoCBSWiseMobileUpdate.ToString(), 1);
                                    int statusA = -1;
                                    DataTable DT = IMPSTransactions.UpdateMobileCBSWise(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_RES.MobileNumber, out statusA);
                                    if (DT != null && DT.Rows.Count > 0)
                                    {
                                        if (status == 0 && DT.Rows[0][1].ToString() == DTCustomerdata.Rows[0]["mobile_number"].ToString())
                                        {
                                            MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.AutoCBSWiseMobileUpdate.ToString(), 2);
                                            _REGISTRATION_REQ.MobileNumber = DT.Rows[0][1].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Change Mobile: " + _REGISTRATION_REQ.MobileNumber + " _REGISTRATION_RES.ReferenceNumber :" + _REGISTRATION_RES.ReferenceNumber);
                                        }
                                    }
                                }
                            }

                            if (_newmobile.Length > 8)
                            {
                                _REGISTRATION_REQ.MobileNumber = _newmobile.Substring(3, 8);
                            }
                            else
                            {
                                _REGISTRATION_REQ.MobileNumber = _newmobile;
                            }
                        }

                    }
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.CustomerName = CustomerName;
                    _REGISTRATION_RES.AutoLogout = ConfigurationManager.AppSettings["AutoLogoutValue"].ToString();
                    _REGISTRATION_RES.RoundValue = ConfigurationManager.AppSettings["RoundofValue"].ToString();
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessREQUESTUSERID(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                DTCustomerdata = IMPSTransactions.VALIDATEUSERID(_REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.CitizenshipCardNo, _REGISTRATION_REQ.DOB, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    _REGISTRATION_RES.Password = DTCustomerdata.Rows[0][1].ToString();
                    _REGISTRATION_RES.CustomerID = DTCustomerdata.Rows[0][0].ToString();
                    _REGISTRATION_REQ.OTP = "123456";
                    _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                    _REGISTRATION_REQ.MailID = _REGISTRATION_RES.EmailID;
                    _CommanDetails.SystemLogger.WriteTransLog(this, "e_mail : " + _REGISTRATION_REQ.MailID);


                    ProcessSendVerifyUserOTP(_REGISTRATION_REQ);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "ProcessREQUESTUSERIDOTP: " + "1");
                    OTPmPINStatus.SmsStatus = true; OTPmPINStatus.MailStatus = true;
                    if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                    { }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }

                    if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.REQUESTUSERID.ToString()))
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "ProcessSendSignINOTP: " + "2");
                }

            }
            catch (Exception ex)
            {
                //_CommanDetails.SystemLogger.WriteTransLog(this, "ProcessSendSignINOTP: " + "3");
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void processAddAccount(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
            {
                _REGISTRATION_REQ.OTP = GetRandomOTP();
            }
            else
            {
                _REGISTRATION_REQ.OTP = "123456";
            }
            _CommanDetails.SystemLogger.WriteTransLog(this, "OTP : " + _REGISTRATION_REQ.OTP);
            _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
            if (_REGISTRATION_REQ.MobileNumber.Length > 7)
                _REGISTRATION_REQ.MobileNumber = _REGISTRATION_REQ.MobileNumber.Substring(_REGISTRATION_REQ.MobileNumber.Length - 8);
            string SMSBody = "Dear Customer," + Environment.NewLine + "your DrukPay Add Account OTP is " + _REGISTRATION_REQ.OTP + "." + Environment.NewLine + "It will be valid for 5 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
            SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    // _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    //_REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    //_REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                if (_REGISTRATION_REQ.MobileNumber.Length < 11)
                {
                    _REGISTRATION_REQ.MobileNumber = "975" + _REGISTRATION_REQ.MobileNumber;
                }
                if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.ADDACCOUNT.ToString()))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    // _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    //_REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    //_REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                    return;
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    // _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    //_REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    //_REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                }

            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void UpdateAccount(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                //_ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                //if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                //{
                //    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(_REGISTRATION_RES.ResponseCode);
                //    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                //    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                //    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                //    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                //    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                //    return;
                //}
                //_CommanDetails.SystemLogger.WriteTransLog(this, "Request MobileNumber :  " + _REGISTRATION_REQ.MobileNumber + "  " + "Response MobileNumber : " + _REGISTRATION_RES.MobileNumber);
                //if (_REGISTRATION_REQ.MobileNumber != _REGISTRATION_RES.MobileNumber.Substring(3))
                //{
                //    _CommanDetails.SystemLogger.WriteTransLog(this, "MobileNumber Update started");
                //    IMPSTransactions.UpdateMobileCBSWise(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_RES.MobileNumber, out status);
                //    _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                //    _CommanDetails.SystemLogger.WriteTransLog(this, "MobileNumber Update completed");
                //}
                _ProcessHost.ProcessCustomerDataValidationFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                _CommanDetails.SystemLogger.WriteTransLog(this, "CID Update started : " + _REGISTRATION_RES.CustomerGovermentID);
                IMPSTransactions.UpdateCIDCBSWise(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_RES.CustomerGovermentID, out status);
                _CommanDetails.SystemLogger.WriteTransLog(this, "CID Update completed");
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void SelectImage(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            DataTable DtImageList = null;
            try
            {
                DtImageList = IMPSTransactions.SelectImages();
                _REGISTRATION_RES.ImagesList = DtImageList;
                _REGISTRATION_RES.ImagesList.TableName = "ImagesList";
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ImagesList = null;
                _REGISTRATION_RES.ImagesList.TableName = "ImagesList";
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Signup & Login

        #region Card Controller

        public void GETCARDDETAILS(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CardDetails = string.Empty;
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.DeviceID" + _REGISTRATION_REQ.DeviceID);
                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.CustomerID" + _REGISTRATION_REQ.CustomerID);
                _CommanDetails.SystemLogger.WriteTransLog(this, " _REGISTRATION_REQ.MobileNumber " + _REGISTRATION_REQ.MobileNumber);

                IMPSTransactions.GETCARDDETAILS(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.MobileNumber, out CardDetails, out status);
                //added by sk
                status = 0;
                CardDetails = "^9cca889213b3dc945dfd8da929dae7379f42d105e34309e3162ced675b5c3af5-5000036404012-000036404-FALSE-ATM_TRUE-POS_TRUE-ATML*40000-ATM*50-ATMA*50.00-POSL*50000-POS*70-POSA*70.00-visa^9cca889213b3dc945dfd8da929dae7379f42d105e34309e3162ced675b5c3af5-5000036404012-000036404-TRUE-ATM_TRUE-POS_TRUE-ATML*40000-ATM*50-ATMA*50.00-POSL*50000-POS*70-POSA*70.00-rupay^584a18b9e6932899cc2dbde9e3c90befc62105fc8e20d1a5776edd39d3939978-5000036404012-000036404-TRUE-ATM_TRUE-POS_TRUE-ATML*40000-ATM*50000-ATMA*50000.00-POSL*50000-POS*500-POSA*500.00-mastercard^68d653e48a55f28bee0fd0229621e39841fe4a5e7357fd3d9d3418361f5cf1e9-5000036404012-000036404-TRUE-ATM_TRUE-POS_FALSE-ATML*40000-ATM*600-ATMA*600.00-POSL*50000-POS*2000-POSA*2000.00-rupay^aa726300d33d7b8c107d39016378187e340c8bf86f23da65c76aab7f2011d19f-5000036404012-000036404-TRUE-ATM_TRUE-POS_TRUE-ATML*40000-ATM*25000-ATMA*25000.00-POSL*50000-POS*250-POSA*250.00-visa^f86acd9ce8735f4d247b1cfcfa9cff95fd4dcf825829f5f1e1dd8019f00d0b0f-5000036404012-000036404-TRUE-ATM_FALSE-POS_FALSE-ATML*40000-ATM*4000-ATMA*4000.00-POSL*50000-POS*1100-POSA*1100.00";
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.CardDetails = CardDetails;

                    //string[] SplitRecordDetails = new string[] { string.Empty };
                    //string[] SplitCardDetails = new string[] { string.Empty };
                    //string NewCardDetails = string.Empty;
                    //string FinalCardData = string.Empty;
                    //SplitRecordDetails = CardDetails.Split('^');
                    //foreach (string CardData in SplitRecordDetails)
                    //{
                    //    SplitCardDetails = CardData.Split('-');
                    //    for (int i = 0; i <= SplitCardDetails.Length - 1; i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            if (SplitCardDetails[0].Length > 10)
                    //            {
                    //                NewCardDetails = MaximusAESEncryption.EncryptString(ConnectionStringEncryptDecrypt.DecryptString(SplitCardDetails[0].ToString()), _Authentication.SsmMasterKey);
                    //            }
                    //            else
                    //            {
                    //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardNotFound);
                    //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    //                return;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            NewCardDetails += "-" + SplitCardDetails[i].ToString();
                    //        }
                    //    }
                    //    FinalCardData += "^" + NewCardDetails;
                    //}
                    //_REGISTRATION_RES.CardDetails = FinalCardData;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void BLOCKCARD(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CardDetails = string.Empty;
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                // IMPSTransactions.BLOCKCARD(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToBlock);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToBlock);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardBlockeded);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CardBlockeded);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.CardDetails = CardDetails;
                    //IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, "ALL", "CARD BLOCKED", out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void UNBLOCKCARD(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CardDetails = string.Empty;
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.UNBLOCKCARD(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToUnBlock);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToUnBlock);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardUnblocked);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CardUnblocked);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.CardDetails = CardDetails;
                    //IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, "ALL", "CARD UNBLOCKED", out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void SETATMLIMIT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                //string StrAmountAvailable = string.Empty;
                string StrAmountAvailable = "5000";
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.SET_CHANNELLIMIT(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber,
                //                                  _REGISTRATION_REQ.STRLIMITATM, _REGISTRATION_REQ.STRLIMITPOS, _REGISTRATION_REQ.STRLIMITECM, enumCHANNEL.ATM.ToString(), out StrAmountAvailable, out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.YourLimitChangeSuccessFully);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.YourLimitChangeSuccessFully);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.ATMLIMIT = _REGISTRATION_REQ.STRLIMITATM;
                    _REGISTRATION_RES.AmountAvailable = StrAmountAvailable;
                    // IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, enumCHANNEL.ATM.ToString(), "ATM LIMIT CHANGED TO " + _REGISTRATION_REQ.STRLIMITATM, out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void SETPOSLIMIT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                //string StrAmountAvailable = string.Empty;
                string StrAmountAvailable = "2000";
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.SET_CHANNELLIMIT(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber,
                //                                  _REGISTRATION_REQ.STRLIMITATM, _REGISTRATION_REQ.STRLIMITPOS, _REGISTRATION_REQ.STRLIMITECM, enumCHANNEL.POS.ToString(), out StrAmountAvailable, out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.YourLimitChangeSuccessFully);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.YourLimitChangeSuccessFully);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.POSLIMIT = _REGISTRATION_REQ.STRLIMITPOS;
                    _REGISTRATION_RES.AmountAvailable = StrAmountAvailable;
                    // IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, enumCHANNEL.POS.ToString(), "POS LIMIT CHANGE TO " + _REGISTRATION_REQ.STRLIMITPOS, out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void SETATMSTATUS(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                //string StrAmountAvailable = string.Empty;
                string StrAmountAvailable = "2000";
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.SET_CHANNELSTATUS(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber,
                //                                  _REGISTRATION_REQ.STRSTATUSATM, _REGISTRATION_REQ.STRSTATUSPOS, _REGISTRATION_REQ.STRSTATUSECM, enumCHANNEL.ATM.ToString(), out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.statuschangesuccess);
                    if (_REGISTRATION_REQ.STRSTATUSATM.ToUpper() == "TRUE")
                        _REGISTRATION_RES.ResponseDesc = "ATM channel unblocked successfully.";
                    else
                        _REGISTRATION_RES.ResponseDesc = "ATM channel blocked successfully.";
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.AmountAvailable = StrAmountAvailable;
                    string activity = string.Empty;
                    if (_REGISTRATION_REQ.STRSTATUSATM.ToUpper() == "TRUE")
                        activity = "ATM CHANNEL UNBLOCKED";
                    else
                        activity = "ATM CHANNEL BLOCKED";
                    // IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, enumCHANNEL.ATM.ToString(), activity, out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void SETPOSSTATUS(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                //string StrAmountAvailable = string.Empty;
                string StrAmountAvailable = "2000";
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.SET_CHANNELSTATUS(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber,
                //                                  _REGISTRATION_REQ.STRSTATUSATM, _REGISTRATION_REQ.STRSTATUSPOS, _REGISTRATION_REQ.STRSTATUSECM, enumCHANNEL.POS.ToString(), out status);
                status = 0;
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.statuschangesuccess);
                    if (_REGISTRATION_REQ.STRSTATUSPOS.ToUpper() == "TRUE")
                        _REGISTRATION_RES.ResponseDesc = "POS channel unblocked successfully.";
                    else
                        _REGISTRATION_RES.ResponseDesc = "POS channel blocked successfully.";
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.AmountAvailable = StrAmountAvailable;
                    string activity = string.Empty;
                    if (_REGISTRATION_REQ.STRSTATUSPOS.ToUpper() == "TRUE")
                        activity = "POS CHANNEL UNBLOCKED";
                    else
                        activity = "POS CHANNEL BLOCKED";
                    // IMPSTransactions.SET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey), _REGISTRATION_REQ.AccountNumber, enumCHANNEL.POS.ToString(), activity, out status);
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_ACTIVITYHISTORY(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                //int status = -1;
                //string ACTIVITYHISTORY = string.Empty;
                int status = 0;
                string ACTIVITYHISTORY = "^f86acd9ce8735f4d247b1cfcfa9cff95fd4dcf825829f5f1e1dd8019f00d0b0f-5000036404012-000036404-TRUE?52448-18/01/2021-Country Added-ATM and POS Channels are enabled successfully for country India.-!52447-18/01/2021-Country Added-ATM Channel is enabled And  POS Channel is disabled successfully for country Bhutan.-!52446-18/01/2021-POS-POS Channel is disabled successfully for the country India.-1100!52445-18/01/2021-ATM-ATM Channel is disabled successfully for the country India.-4000!52444-18/01/2021-ATM-ATM Channel is disabled successfully for the country Bhutan.-4000^9cca889213b3dc945dfd8da929dae7379f42d105e34309e3162ced675b5c3af5-5000036404012-000036404-TRUE?0-NA-NA-NA-NA^584a18b9e6932899cc2dbde9e3c90befc62105fc8e20d1a5776edd39d3939978-5000036404012-000036404-TRUE?0-NA-NA-NA-NA^aa726300d33d7b8c107d39016378187e340c8bf86f23da65c76aab7f2011d19f-5000036404012-000036404-TRUE?52190-08/01/2021-POS-POS Channel is enabled successfully for the country Africa CAMEU region.-250^9cca889213b3dc945dfd8da929dae7379f42d105e34309e3162ced675b5c3af5-5000036404012-000036404-TRUE?0-NA-NA-NA-NA^68d653e48a55f28bee0fd0229621e39841fe4a5e7357fd3d9d3418361f5cf1e9-5000036404012-000036404-TRUE?52504-26/04/2021-Country Added-ATM Channel is enabled And  POS Channel is disabled successfully for country Belgium.-!52503-26/04/2021-Country Added-ATM Channel is enabled And  POS Channel is disabled successfully for country Andorra.-!52474-01/03/2021-Country Added-ATM Channel is enabled And  POS Channel is disabled successfully for country China.-!52473-01/03/2021-Country Added-ATM Channel is enabled And  POS Channel is disabled successfully for country Anguilla.";
                CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);

                //IMPSTransactions.GET_ACTIVITYHISTORY(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, out ACTIVITYHISTORY, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.ActivityHistory = ACTIVITYHISTORY;

                    //string[] SplitRecordDetails = new string[] { string.Empty };
                    //string[] SplitCardDetails = new string[] { string.Empty };
                    //string NewCardDetails = string.Empty;
                    //string FinalCardData = string.Empty;
                    //SplitRecordDetails = ACTIVITYHISTORY.Split('^');
                    //Authentication Auth = new Authentication();
                    //foreach (string CardData in SplitRecordDetails)
                    //{
                    //    SplitCardDetails = CardData.Split('-');
                    //    for (int i = 0; i <= SplitCardDetails.Length - 1; i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            if (SplitCardDetails[0].Length > 10)
                    //            {
                    //                NewCardDetails = MaximusAESEncryption.EncryptString(ConnectionStringEncryptDecrypt.DecryptString(SplitCardDetails[0].ToString()), _Authentication.SsmMasterKey);
                    //            }
                    //            else
                    //            {
                    //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardNotFound);
                    //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    //                return;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            NewCardDetails += "-" + SplitCardDetails[i].ToString();
                    //        }
                    //    }
                    //    FinalCardData += "^" + NewCardDetails;
                    //}
                    //_REGISTRATION_RES.ActivityHistory = FinalCardData;
                    //return;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Card Controller

        public void ChangeMpin(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _SSM.VerifyPin(ref _Authentication, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID);
                _CommanDetails.SystemLogger.WriteTransLog(this, "mPIN verification status : " + _Authentication.TransactionStatus);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    string mPIN = string.Empty;
                    Authentication _Auth = new Authentication();
                    _SSM.ChangePin(ref _Auth, ref _REGISTRATION_REQ, out mPIN);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Change mPIN status : " + _Auth.TransactionStatus);

                    if (_Auth.TransactionStatus == enumTransactionStatus.Successful && !string.IsNullOrEmpty(_Auth.NewOffset))
                    {
                        IMPSTransactions.UPDATEOFFSET(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _Auth.NewOffset);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChangeMpinSuccess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChangeMpinSuccess);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                }
                return;
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ForgotMpin(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.VERIFYCUSTOMERDATA_FP(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.DeviceID, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UserNotRegistered);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    ////********************Commented On 21092020********************************
                    ////DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);
                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                    {
                        ////_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);
                        int statuscustverify = -1;
                        IMPSTransactions.VERIFYCUSTOMERDATADETAILS(_REGISTRATION_REQ.AccountNumber, MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey).ToString(), out statuscustverify, _REGISTRATION_REQ.ExpiredDate);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "statuscustverify : " + statuscustverify);
                        if (statuscustverify == 1)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardNotFound);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        if (statuscustverify == 2)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        if (statuscustverify == 3)
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidExpire);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        if (status == 0)
                        {
                            CONFIGURATIONCONFIGDATA.GetKeys(ref _Authentication.SsmComkey, ref _Authentication.SsmMasterKey, ref _Authentication.SsmPvk, ref _Authentication.HsmZpk, ref _Authentication.HsmPvk, ref _Authentication.HsmComkey, ref _Authentication.HsmCvv1, ref _Authentication.HsmCvv2, ref _Authentication.TmkEncryptedKey);
                            string[] Track2 = (MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER, _Authentication.SsmMasterKey) + "=" + _REGISTRATION_REQ.ExpiredDate + "000" + _REGISTRATION_REQ.CVV).Split('=');
                            _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _SSM.VerifyATMPin(ref _Authentication, Track2, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ExpiredDate, _REGISTRATION_REQ.AccountNumber);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "ATM PIN verification status : " + _Authentication.TransactionStatus);

                            if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                _REGISTRATION_RES.OTP = "";
                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode).Replace("mPIN", "PIN");
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void CreateNewMpin(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.ValideOTP, out status);
                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.ReferenceNumber : " + _REGISTRATION_REQ.ReferenceNumber.ToString());
                _CommanDetails.SystemLogger.WriteTransLog(this, "status : " + status.ToString());
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    string mPIN = string.Empty;
                    Authentication _Auth = new Authentication();
                    _SSM.ChangePin(ref _Auth, ref _REGISTRATION_REQ, out mPIN);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Ceate New mPIN status : " + _Auth.TransactionStatus);

                    if (_Auth.TransactionStatus == enumTransactionStatus.Successful && !string.IsNullOrEmpty(_Auth.NewOffset))
                    {
                        IMPSTransactions.UPDATEOFFSET(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _Auth.NewOffset);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChangeMpinSuccess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChangeMpinSuccess);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void CreateGreenpin(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.ReferenceNumber : " + _REGISTRATION_REQ.ReferenceNumber.ToString());
                _CommanDetails.SystemLogger.WriteTransLog(this, "status : " + status.ToString());
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    string mPIN = string.Empty;
                    Authentication _Auth = new Authentication();
                    Authentication _AuthGetKey = new Authentication();
                    int Cardverifystatus = -1;
                    DataTable CardVerifyExpire = null;
                    _SSM.GetkeyDetails(ref _AuthGetKey, ref _REGISTRATION_REQ);
                    string DecryptedCardNo = MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER.Trim(), _AuthGetKey.SsmMasterKey);
                    /* adding card No */
                    _REGISTRATION_REQ.UserID = ConnectionStringEncryptDecrypt.EncryptString(DecryptedCardNo);
                    MapyOtherTransactions((int)enumCommandTypeEnum.AuthorizationRequestMessage, _REGISTRATION_REQ, _REGISTRATION_RES, enumTransactionType.CreateGreenpin.ToString(), 1);
                    CardVerifyExpire = IMPSTransactions.CardVerification(_REGISTRATION_REQ.CUST_AC_NO, DecryptedCardNo, out Cardverifystatus);
                    if (Cardverifystatus != 0 || CardVerifyExpire == null || CardVerifyExpire.Rows.Count <= 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    if (CardVerifyExpire != null || CardVerifyExpire.Rows.Count > 0)
                    {
                        string CardExpiry = Convert.ToString(CardVerifyExpire.Rows[0][1]);
                        if (CardExpiry == _REGISTRATION_REQ.CARDEXP)
                        { }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidExpire);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                    }
                    _SSM.GenrationGreenPin(ref _Auth, ref _REGISTRATION_REQ, out mPIN);
                    //  _CommanDetails.SystemLogger.WriteTransLog(this, "Ceate New ATMPIN status : " + _Auth.TransactionStatus);
                    // _CommanDetails.SystemLogger.WriteTransLog(this, "Ceate New ATMPIN  NewOffset : " + _Auth.NewOffset);
                    if (_Auth.TransactionStatus == enumTransactionStatus.Successful && !string.IsNullOrEmpty(_Auth.NewOffset))
                    {
                        IMPSTransactions.UPDATEATMOFFSET(MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER.Trim(), _Auth.SsmMasterKey), _REGISTRATION_REQ.MobileNumber, _Auth.NewOffset);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChangeATMpinSuccess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChangeATMpinSuccess).Replace("@MSGID", _REGISTRATION_REQ.ReferenceNumber);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        #region Email/SMS
                        SMSJson _SMSJson = new SMSJson();
                        string MailMsg = _REGISTRATION_RES.ResponseDesc;
                        ProcessGreenPin_SMS(ref _SMSJson, _REGISTRATION_REQ, MailMsg);

                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_REGISTRATION_REQ.CUST_AC_NO, _REGISTRATION_REQ.MobileNumber, out status);

                        if (DTCustomerdata != null && DTCustomerdata.Rows.Count > 0)
                        {
                            _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();


                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" Green Pin send _REGISTRATION_REQ.MailID : {0} ", _REGISTRATION_REQ.MailID));

                            RequestMoneyProcess_Mail(_REGISTRATION_REQ, MailMsg, "Green PIN");
                        }

                        #endregion Email/SMS
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void CreateGreenpinVerification(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                _CommanDetails.SystemLogger.WriteTransLog(this, "_REGISTRATION_REQ.ReferenceNumber : " + _REGISTRATION_REQ.ReferenceNumber.ToString());
                _CommanDetails.SystemLogger.WriteTransLog(this, "status : " + status.ToString());
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    string mPIN = string.Empty;
                    Authentication _Auth = new Authentication();
                    Authentication _AuthGetKey = new Authentication();
                    int Cardverifystatus = -1;
                    DataTable CardVerifyExpire = null;
                    _SSM.GetkeyDetails(ref _AuthGetKey, ref _REGISTRATION_REQ);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Cardno:" + _REGISTRATION_REQ.CARDNUMBER.Trim());
                    string DecryptedCardNo = MaximusAESEncryption.DecryptString(_REGISTRATION_REQ.CARDNUMBER.Trim(), _AuthGetKey.SsmMasterKey);
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "CardExpiry Verified Sucessful : DecryptedCardNo" + _REGISTRATION_REQ.ReferenceNumber + "  Card No :" + DecryptedCardNo);
                    CardVerifyExpire = IMPSTransactions.CardVerification(_REGISTRATION_REQ.CUST_AC_NO, DecryptedCardNo, out Cardverifystatus);
                    if (Cardverifystatus != 0 || CardVerifyExpire == null || CardVerifyExpire.Rows.Count <= 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    if (CardVerifyExpire != null || CardVerifyExpire.Rows.Count > 0)
                    {
                        string CardExpiry = Convert.ToString(CardVerifyExpire.Rows[0][1]);
                        if (CardExpiry == _REGISTRATION_REQ.CARDEXP)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(this, "CardExpiry Verified Sucessful");
                            _REGISTRATION_REQ.OTP = GetRandomOTP();
                            IMPSTransactions.GreenPinOTPRequest(_REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.CARDEXP, ConnectionStringEncryptDecrypt.EncryptString(DecryptedCardNo), _REGISTRATION_REQ.CUST_AC_NO, ConnectionStringEncryptDecrypt.EncryptString(_REGISTRATION_REQ.OTP), out status, _REGISTRATION_REQ.DeviceID);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "OTP :" + ConnectionStringEncryptDecrypt.EncryptString(_REGISTRATION_REQ.OTP));
                            if (status == 0)
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.GreenPinRequestAccepted);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.GreenPinRequestAccepted).Replace("@OTP", _REGISTRATION_REQ.OTP);
                                #region Email/SMS
                                SMSJson _SMSJson = new SMSJson();
                                string SMSMsg = _REGISTRATION_RES.ResponseDesc;//"Dear customer, GreenPin OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                                ProcessGreenPin_SMS(ref _SMSJson, _REGISTRATION_REQ, SMSMsg);

                                DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_REGISTRATION_REQ.CUST_AC_NO, _REGISTRATION_REQ.MobileNumber, out status);

                                if (DTCustomerdata != null && DTCustomerdata.Rows.Count > 0)
                                {
                                    _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                                    // string MailMsg = "GreenPin OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" Green Pin Genearation _REGISTRATION_REQ.MailID : {0} ", _REGISTRATION_REQ.MailID));

                                    RequestMoneyProcess_Mail(_REGISTRATION_REQ, SMSMsg, "Green PIN");
                                }
                                #endregion Email/SMS                            
                            }
                            else
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                return;
                            }
                            //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidExpire);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.CUST_AC_NO;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void CardLessRequest(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                DataTable MinMaxData = IMPSTransactions.GetMinMaxData("", "", "", "", "", _REGISTRATION_REQ.DeviceID, enumSource.BPCBILLPAYMENT.ToString());
                if (MinMaxData != null && MinMaxData.Rows.Count > 0)
                {
                    if (Convert.ToInt32(_REGISTRATION_REQ.WDLAMOUNT) > Convert.ToInt32(MinMaxData.Rows[0][10].ToString()))
                    {
                        string LimitThousdDecimal = Convert.ToDouble(MinMaxData.Rows[0][10].ToString()).ToString("N");
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardlessLimit);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CardlessLimit).Replace("@Limit", LimitThousdDecimal);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        return;
                    }
                }
                if (CONFIGURATIONCONFIGDATA.SKIPMPIN)
                {
                    _REGISTRATION_REQ.OTP = GetRandomOTP();
                    IMPSTransactions.CardLessRequest(_REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.WDLAMOUNT, _REGISTRATION_REQ.REMITTERMOB, _REGISTRATION_REQ.REMITTERACC, _REGISTRATION_REQ.OTP, out status);
                    if (status == 0)
                    {
                        SMSJson _SMSJson = new SMSJson();
                        ProcessCardLess_SMS(ref _SMSJson, _REGISTRATION_REQ);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardLessRequestAccepted);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CardLessRequestAccepted).Replace("@OTP", _REGISTRATION_REQ.OTP);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        return;
                    }
                }
                else
                {
                    _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _SSM.VerifyPin(ref _Authentication, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "mPIN verification status : " + _Authentication.TransactionStatus);
                    if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                    {
                        _REGISTRATION_REQ.OTP = GetRandomOTP();
                        //commented by sk for testing
                        //IMPSTransactions.CardLessRequest(_REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.WDLAMOUNT, _REGISTRATION_REQ.REMITTERMOB, _REGISTRATION_REQ.REMITTERACC, _REGISTRATION_REQ.OTP, out status);
                        status = 0;//added by sk for testing
                        if (status == 0)
                        {
                            SMSJson _SMSJson = new SMSJson();
                            //commented by sk for testing
                            //  ProcessCardLess_SMS(ref _SMSJson, _REGISTRATION_REQ);
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CardLessRequestAccepted);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CardLessRequestAccepted).Replace("@OTP", _REGISTRATION_REQ.OTP);
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            return;
                        }
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    }
                }
                return;
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void FeedBackRequest(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                _REGISTRATION_REQ.OTP = GetRandomOTP();
                IMPSTransactions.FeedBackRequest(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.Email, _REGISTRATION_REQ.PRODUCTTYPE, _REGISTRATION_REQ.Comment, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.FeedBackAccepted);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.FeedBackAccepted);
                    ProcessFeedBack_Mail(_REGISTRATION_REQ);
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_RES.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    return;
                }
                return;
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public DataTable ListOfCustomerID(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            DataTable _dtCustomerid = new DataTable();
            try
            {
                GET_LISTOFCUSTOMERID(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                if (_MOBILEBANKING_RESP.ListOfCustomerID.Rows.Count > 0)
                    _dtCustomerid = _MOBILEBANKING_RESP.ListOfCustomerID;
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
            return _dtCustomerid;
        }

        public DataTable ListOfProducts(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            DataTable _dtCustomerid = new DataTable();
            try
            {
                GET_LISTOFPRODUCTS(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
            return _dtCustomerid;
        }

        public DataTable ListOfDonor(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            DataTable _dtCustomerid = new DataTable();
            try
            {
                GET_LISTOFDONOR(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
            return _dtCustomerid;
        }

        public string GetRandomOTP()
        {
            string text = GetUniqueKeyCHARECTER(0);
            string Number = GetUniqueNUMBER(6);
            string Message = text + Number;
            return Message;
        }

        public static string GetUniqueKeyCHARECTER(int maxSize)
        {
            // Main();
            //string s = Main();
            char[] chars = new char[62];
            chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray();
            byte[] data = new byte[1];
            RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
            crypto.GetNonZeroBytes(data);
            data = new byte[maxSize];
            crypto.GetNonZeroBytes(data);
            StringBuilder result = new StringBuilder(maxSize);
            foreach (byte b in data)
            {
                result.Append(chars[b % (chars.Length)]);
            }
            return result.ToString();
        }

        public static string GetUniqueNUMBER(int maxSize)
        {
            // Main();
            //string s = Main();
            char[] chars = new char[62];
            chars = "1234567890".ToCharArray();
            byte[] data = new byte[1];
            RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
            crypto.GetNonZeroBytes(data);
            data = new byte[maxSize];
            crypto.GetNonZeroBytes(data);
            StringBuilder result = new StringBuilder(maxSize);
            foreach (byte b in data)
            {
                result.Append(chars[b % (chars.Length)]);
            }
            return result.ToString();
        }

        public void VERIFYRESETTPIN(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                if (!string.IsNullOrEmpty(_REGISTRATION_REQ.CitizenId))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.CitizenId;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.PassportNumber))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.PassportNumber;
                }
                else if (!string.IsNullOrEmpty(_REGISTRATION_REQ.WorkPermit))
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.WorkPermit;
                }
                else
                {
                    _REGISTRATION_REQ.InfoValue = _REGISTRATION_REQ.LicenseNumber;
                }

                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.VALIDATEFORGOTPASS(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.InfoValue, _REGISTRATION_REQ.InfoType, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    _ProcessHost.ProcessAccountQueryFromHost(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                    if (Convert.ToInt32(_REGISTRATION_RES.ResponseCode) != 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        //string mPIN = string.Empty;
                        //_SSM.ResetTpin(ref _Authentication, ref _REGISTRATION_REQ, out mPIN);
                        //if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                        //{
                        //    IMPSTransactions.UPDATEOFFSET(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _Authentication.NewOffset);
                        //    _REGISTRATION_REQ.NewMPIN = mPIN;
                        //}
                        //else
                        //{
                        //    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                        //    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        //    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        //    return;
                        //}
                        // _CommanDetails.SystemLogger.WriteTransLog(this, "New Offset is : " + _Authentication.NewOffset + " New Pin :- " + _REGISTRATION_REQ.NewMPIN);
                        if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
                        {
                            _REGISTRATION_REQ.OTP = GetRandomOTP();
                        }
                        else
                        {
                            _REGISTRATION_REQ.OTP = "123456";
                        }
                        // _REGISTRATION_REQ.OTP = GetRandomOTP();
                        //_REGISTRATION_REQ.OTP = "123456";
                        _REGISTRATION_REQ.MobileNumber = _REGISTRATION_RES.MobileNumber;
                        _REGISTRATION_REQ.MailID = _REGISTRATION_RES.EmailID;
                        try
                        {
                            _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                        }
                        catch (Exception ex)
                        { }
                        _CustomerDetails.Add(_REGISTRATION_REQ.AccountNumber, GetCustomerTable(_REGISTRATION_REQ, _REGISTRATION_RES));
                        string SMSBody = "Dear Customer," + Environment.NewLine + "OTP to reset your DrukPay TPIN is " + _REGISTRATION_REQ.OTP + "." + Environment.NewLine + "It will be valid for 5 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                        SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                        //ProcessSendForgorPasswordOTP(_REGISTRATION_REQ);
                        if (IMPSTransactions.INSERTOTP(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.OTP, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.MailID, enumTransactionType.ForgotMpin.ToString()))
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void RESETPIN(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                string mPIN = string.Empty;
                _CommanDetails.SystemLogger.WriteTransLog(this, "Transaction Sent To Reset Pin With RerenceNumber : " + _REGISTRATION_REQ.ReferenceNumber + "  AccountNuymber : " + _REGISTRATION_REQ.AccountNumber + "  MobileNumber : " + _REGISTRATION_REQ.MobileNumber);
                _SSM.ResetTpin(ref _Authentication, ref _REGISTRATION_REQ, out mPIN);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    IMPSTransactions.UPDATEOFFSET(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _Authentication.NewOffset);
                    _REGISTRATION_REQ.NewMPIN = mPIN;
                    _CommanDetails.SystemLogger.WriteTransLog(this, "New Offset is : " + _Authentication.NewOffset + " New Pin :- " + _REGISTRATION_REQ.NewMPIN);
                    string SMSBody = "Dear Customer," + Environment.NewLine + "Your TPIN for DrukPay is : " + _REGISTRATION_REQ.NewMPIN + "." + Environment.NewLine + "Do not share this TPIN to anyone for security reasons.";
                    SendSmsCommon(SMSBody, _REGISTRATION_REQ.MobileNumber);
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    return;
                }

            }

            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        #region Manage Account

        //public void SyncAccounts(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    try
        //    {
        //        int status = -1;
        //        DataTable DtAllAccount = null;
        //        DtAllAccount = IMPSTransactions.SyncAccounts(_REGISTRATION_RES.CustomerID, out status);
        //        if (status != 0)
        //        {
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
        //            return;
        //        }
        //        else
        //        {
        //            if (DtAllAccount.Rows.Count > 0)
        //            {
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Start Account Syncing... for reference number {0} and Customer ID {1} ", _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_RES.CustomerID));
        //                for (int i = 0; i < DtAllAccount.Rows.Count; i++)
        //                {
        //                    IMPSTransactions.InsertAllAccounts(_REGISTRATION_REQ.AccountNumber, DtAllAccount.Rows[i]["first_name"].ToString() + " " + DtAllAccount.Rows[i]["last_name"].ToString(), DtAllAccount.Rows[i]["cust_no"].ToString(),
        //                                                    null, _REGISTRATION_REQ.DeviceID, DtAllAccount.Rows[i]["mobile_number"].ToString(), DtAllAccount.Rows[i]["cust_ac_no"].ToString(), DtAllAccount.Rows[i]["account_type"].ToString(), _REGISTRATION_REQ.Password,
        //                                                    _REGISTRATION_REQ.PINOFFSET, out status);

        //                }
        //                _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Total " + DtAllAccount.Rows.Count + " Account Synced Successful... for reference number {0} and Customer ID {1} ", _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_RES.CustomerID));
        //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SyncAccountSuccess);
        //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
        //            }
        //            else
        //            {
        //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
        //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
        //            }
        //            return;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //    }
        //}

        //public void GET_MANAGEACCOUNT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    try
        //    {
        //        int TransType = -1;
        //        if (_REGISTRATION_REQ.IsBLQ)
        //            TransType = (int)enumTransactionType.BalanceEnquiry;
        //        else if (_REGISTRATION_REQ.IsManageAccount)
        //            TransType = (int)enumTransactionType.Get_ManageAccount;
        //        else if (_REGISTRATION_REQ.IsMini)
        //            TransType = (int)enumTransactionType.MiniStatement;
        //        else
        //            TransType = (int)enumTransactionType.FundTransfer;

        //        int status = -1;
        //        DataTable Dtaccountdetails = null;
        //        Dtaccountdetails = IMPSTransactions.GET_MANAGEACCOUNT(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.CustomerID,
        //                                        TransType, out status);
        //        if (status == 0)
        //        {
        //            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //            _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
        //            _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
        //            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
        //            _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //            _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            _REGISTRATION_RES.CustomerDetails = Dtaccountdetails;
        //        }
        //        else if (status == 1)
        //        {
        //            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //            _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
        //            _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
        //            _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
        //            _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //            _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoBenificiaryFound);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        }
        //        else
        //        {
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //    }
        //}

        public void GET_MANAGEACCOUNT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string CustID = string.Empty;
            try
            {
                int TransType = -1;
                if (_REGISTRATION_REQ.IsBLQ)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.BalanceEnquiry;
                }
                else if (_REGISTRATION_REQ.IsManageAccount)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.Get_ManageAccount;
                }
                else if (_REGISTRATION_REQ.IsMini)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.MiniStatement;
                }
                else if (_REGISTRATION_REQ.IsCC)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.CREDITCARD_LIST;
                }
                else if (_REGISTRATION_REQ.IsPayment)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.PAYMENT;
                }
                else if (_REGISTRATION_REQ.IsCardless)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.CardLess;
                }
                else if (_REGISTRATION_REQ.IsOtherBank)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.OtherBank;
                }
                else if (_REGISTRATION_REQ.IsRecurring)
                {
                    CustID = _REGISTRATION_REQ.CustomerBaseNumber;
                    TransType = (int)enumTransactionType.ViewRecurringLoan;
                }
                else if (_REGISTRATION_REQ.IsTerm)
                {
                    CustID = _REGISTRATION_REQ.CustomerBaseNumber;
                    TransType = (int)enumTransactionType.ViewTermLoan;
                }
                else if (_REGISTRATION_REQ.IsLoanPayment)
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.PAYMENT;
                }
                else
                {
                    CustID = _REGISTRATION_REQ.CustomerID;
                    TransType = (int)enumTransactionType.FundTransfer;
                }

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.SyncAccounts(CustID, _REGISTRATION_REQ.DeviceID, TransType, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.CustomerDetails = Dtaccountdetails;
                }
                else if (status == 1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;

                    if (_REGISTRATION_REQ.IsCC)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoCreditCardAccuntFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                }
                else
                {
                    if (_REGISTRATION_REQ.IsCC)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoCreditCardAccuntFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_MANAGEMPAYACCOUNT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string CustID = string.Empty;
            try
            {

                int TransType = -1;
                CustID = _REGISTRATION_REQ.CustomerID;
                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.MpaySyncAccounts(CustID, _REGISTRATION_REQ.DeviceID, TransType, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.BenificiaryAccountNumber = _REGISTRATION_REQ.BenificiaryAccountNumber;
                    _REGISTRATION_RES.BenificiaryBankCode = _REGISTRATION_REQ.BenificiaryBankCode;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.BenificiaryMobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                    _REGISTRATION_RES.BenificiaryNickName = _REGISTRATION_REQ.BenificiaryNickName;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.CustomerDetails = Dtaccountdetails;
                }

                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }

            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_BLOCKACCOUNT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string CustID = string.Empty;
            try
            {

                int TransType = -1;
                CustID = _REGISTRATION_REQ.CustomerID;
                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                IMPSTransactions.MpayBlockAccounts(CustID, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, out status);
                if (status > 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountBlock);
                    //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountBlock);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.AccountBlock).Replace("@accountno ", _REGISTRATION_REQ.AccountNumber);


                }
                else if (status == -1)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToProcess);



                }

                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountAlreadyBlock);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                }
            }

            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_REQUESTMONEYHISTORY(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string CustID = string.Empty;
            try
            {

                CustID = _REGISTRATION_REQ.CustomerID;

                int status = -1;
                DataTable DTRequestMoneyHistory = null;

                DTRequestMoneyHistory = IMPSTransactions.MpayRequestmoneyhistory(CustID, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, out status);
                if (status == 0)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.RequestmoneyBlockHistory = DTRequestMoneyHistory;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.Approved);

                }
                else if (status == -1)
                {
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.CustomerID = _REGISTRATION_REQ.CustomerID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.RequestmoneyBlockHistory = DTRequestMoneyHistory;
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFoundDB);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DataNotFoundDB);

                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.UnableToProcess);

                }


            }

            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_LISTOFCUSTOMERID(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                int TransType = -1;

                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.SyncCustomerID(_MOBILEBANKING_REQ.CUSTOMERID, _MOBILEBANKING_REQ.DeviceID, TransType, out status);
                if (status == 0)
                {
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ListOfCustomerID = Dtaccountdetails;
                    _MOBILEBANKING_RESP.ListOfCustomerID = _MOBILEBANKING_RESP.ListOfCustomerID.DefaultView.ToTable(true, "CUSTOMERID");
                    _MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";

                }
                else if (status == 1)
                {
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                }
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_LISTOFPRODUCTS(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                int TransType = -1;

                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.LISTOFPRODUCTS(_MOBILEBANKING_REQ.LoanCustomerID, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.PRODUCTTYPE, _MOBILEBANKING_REQ.ACCOUNTCREATIONTYPE, out status);
                if (status == 0)
                {
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ListOfCustomerID = Dtaccountdetails;
                    _MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";

                }
                else if (status == 1)
                {
                    _MOBILEBANKING_RESP.ListOfCustomerID = null;
                    //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                }
                else
                {
                    _MOBILEBANKING_RESP.ListOfCustomerID = null;
                    //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoProductFound);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                }
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ListOfCustomerID = null;
                //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void GET_LISTOFDONOR(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                int TransType = -1;

                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.LISTOFDONOR(_MOBILEBANKING_REQ.LoanCustomerID, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.PRODUCTTYPE, _MOBILEBANKING_REQ.ACCOUNTCREATIONTYPE, _MOBILEBANKING_REQ.IsMisc, out status);
                if (status == 0)
                {
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ListOfCustomerID = Dtaccountdetails;
                    if (_MOBILEBANKING_RESP.ListOfCustomerID != null && _MOBILEBANKING_RESP.ListOfCustomerID.Rows.Count > 0)
                        _MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfDonor";

                }
                else if (status == 1)
                {
                    _MOBILEBANKING_RESP.ListOfCustomerID = null;
                    //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                }
                else
                {
                    _MOBILEBANKING_RESP.ListOfCustomerID = null;
                    //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NoProductFound);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);

                }
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ListOfCustomerID = null;
                //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessSendSignUpOTP(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                #region old code commented by sk
                //    try
                //    {
                //        SMSJson _SMSJson = new SMSJson();
                //       ProcessSignUp_SMS(ref _SMSJson, _REGISTRATION_REQ);
                //        if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                //            OTPmPINStatus.SmsStatus = true;
                //        else
                //            OTPmPINStatus.SmsStatus = false;
                //    }
                //    catch (Exception ex)
                //    {
                //        OTPmPINStatus.SmsStatus = false;
                //    }

                //    try
                //    {
                //        ProcessSignUp_Mail(_REGISTRATION_REQ);
                //    }
                //    catch (Exception ex)
                //    {
                //        OTPmPINStatus.MailStatus = false;
                //    }
                //}
                #endregion old code commented by sk

                #region New Code Added By sk
                //    try
                //    {
                //    string SMS = string.Empty;
                //    //SMS Using SMPP  Protocall
                //    string SMSIP =System.Configuration.ConfigurationManager.AppSettings["SMSIP"].ToString();
                //    string SMSPORT =System.Configuration.ConfigurationManager.AppSettings["SMSPORT"].ToString();
                //    string SMSUserName = System.Configuration.ConfigurationManager.AppSettings["SMSUserName"].ToString();
                //    string SMSPWD = System.Configuration.ConfigurationManager.AppSettings["SMSPWD"].ToString();
                //    string SMSProtocol =System.Configuration.ConfigurationManager.AppSettings["SMSProtocol"].ToString();
                //    string ServiceType =System.Configuration.ConfigurationManager.AppSettings["ServiceType"].ToString();
                //    ///TCELL
                //    string TSMSIP =System.Configuration.ConfigurationManager.AppSettings["TSMSIP"].ToString();
                //    string TSMSPORT =System.Configuration.ConfigurationManager.AppSettings["TSMSPORT"].ToString();
                //    string TSMSUserName =System.Configuration.ConfigurationManager.AppSettings["TSMSUserName"].ToString();
                //    string TSMSPWD =System.Configuration.ConfigurationManager.AppSettings["TSMSPWD"].ToString();
                //    string TServiceType =System.Configuration.ConfigurationManager.AppSettings["TServiceType"].ToString();
                //    string TSMSProtocol = System.Configuration.ConfigurationManager.AppSettings["TSMSProtocol"].ToString();

                //    SmppClient client = new SmppClient();
                //    SmppConnectionProperties properties = new SmppConnectionProperties();
                //    TextMessage msg = new TextMessage();
                //    client = new SmppClient();
                //    properties = client.Properties;
                //    string MobileNumber = _REGISTRATION_REQ.MobileNumber.Substring(0, 4);
                //    if (MobileNumber == "9751")
                //    {
                //        _CommanDetails.SystemLogger.WriteTransLog(this, "IP : " + SMSIP + " SMSPORT : " + SMSPORT + " SMSUSERNAME : " + SMSUserName + " SMSpwd : " + SMSPWD + " SMSProtocol : " + SMSProtocol + " SERVICETYPE : " + ServiceType + " MobileNumber : " + MobileNumber);
                //        SMS = "Dear customer, your DrukPay Sign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                //        properties.SystemID = SMSUserName;
                //        properties.Password = SMSPWD;
                //        properties.Port = int.Parse(SMSPORT); //IP port to use
                //        properties.Host = SMSIP;
                //        properties.DefaultServiceType = ServiceType;
                //        properties.SystemType = SMSProtocol;
                //       // msg.SourceAddress = SenderMFI;
                //    }
                //    else
                //    {
                //        SMS = "Dear customer, your DrukPay Sign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                //        _CommanDetails.SystemLogger.WriteTransLog(this, "TIP : " + TSMSIP + " TSMSPORT : " + TSMSPORT + " TSMSUserName : " + TSMSUserName + " TSMSPWD : " + TSMSPWD + " TSMSProtocol : " + TSMSProtocol + " TServiceType : " + TServiceType + " MobileNumber : " + MobileNumber);
                //        properties.SystemID = TSMSUserName;
                //        properties.Password = TSMSPWD;
                //        properties.Port = int.Parse(TSMSPORT); //IP port to use
                //        properties.Host = TSMSIP;
                //        properties.DefaultServiceType = TServiceType;
                //        properties.InterfaceVersion = JamaaTech.Smpp.Net.Lib.InterfaceVersion.v34;
                //        properties.SystemType = "SMPP";
                //        properties.AddressTon = JamaaTech.Smpp.Net.Lib.TypeOfNumber.Aphanumeric;
                //        properties.AddressNpi = JamaaTech.Smpp.Net.Lib.NumberingPlanIndicator.Unknown;
                //        msg.SourceAddress = "123";
                //        properties.SystemType = TSMSProtocol;
                //    }
                //    _CommanDetails.SystemLogger.WriteTransLog(this, "     properties.SystemType: " + properties.SystemType);
                //    client.AutoReconnectDelay = 3000;
                //    client.KeepAliveInterval = 30000;
                //    client.Start();
                //   // client.ConnectionStateChanged += client_ConnectionStateChanged;
                //    if (client.ConnectionState != SmppConnectionState.Connected)
                //        client.ForceConnect(5000);
                //    // send message now
                //    msg = new TextMessage();
                //    msg.DestinationAddress = _REGISTRATION_REQ.MobileNumber;
                //    _CommanDetails.SystemLogger.WriteTransLog(this," msg.DestinationAddress : " + msg.DestinationAddress);
                //    msg.Text = SMS;
                //    _CommanDetails.SystemLogger.WriteTransLog(this,"   msg.Text : " + msg.Text);
                //    msg.RegisterDeliveryNotification = true;
                //    client.SendMessage(msg, 5000);
                //    client.Shutdown();
                //    _CommanDetails.SystemLogger.WriteTransLog(this,"   before send : ");
                //    Response = "Send";
                //    MessageBox.Show("last : " );
                //}
                //catch (Exception ex)
                //{
                //    MessageBox.Show("exception: " + ex.ToString());
                //  // Uobj.CatchAllErrors(ex.Message);
                //}


            }

            #endregion New Code Added By sk
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendSMS(MOBILEBANKING_REQ _MOBILEBANKING_REQ, string SendSMS, string mailsubject, string mailbody)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    RequestMoneyProcessDecline_SMS(ref _SMSJson, _MOBILEBANKING_REQ, SendSMS);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }

                try
                {
                    Process_Mail(_MOBILEBANKING_REQ, mailbody, mailsubject);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendRequestMoneySMS(REGISTRATION_REQ _REGISTRATION_REQ, string SendSMS, string mailsubject, string mailbody)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    RequestMoneySMS(ref _SMSJson, _REGISTRATION_REQ, SendSMS);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }

                try
                {
                    RequestMoneyProcess_Mail(_REGISTRATION_REQ, SendSMS, mailsubject);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void Process_Mail(MOBILEBANKING_REQ _MOBILEBANKING_REQ, string msg, string subject)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/> " + msg + "<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEBANKING_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEBANKING_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = subject;
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void RequestMoneyProcess_Mail(REGISTRATION_REQ _REGISTRATION_REQ, string msg, string subject)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/> " + msg + "<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = subject;
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        /*remitter*/
        public void ProcessSendRemitterSMS(MOBILEBANKING_REQ _MOBILEBANKING_REQ, string SendSMS, string mailsubject, string mailbody)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    // RequestMoneyProcessRemitter_SMS(ref _SMSJson, _MOBILEBANKING_REQ, SendSMS);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                    _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                }

                try
                {
                    ProcessRemitter_Mail(_MOBILEBANKING_REQ, mailbody, mailsubject);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessRemitter_Mail(MOBILEBANKING_REQ _MOBILEBANKING_REQ, string msg, string subject)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/> " + msg + "<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                //_MOBILEBANKING_REQ.RemitterMailID = "archana.hadawale@maximusinfoware.in";
                //_CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEBANKING_REQ.RemitterMailID));
                //System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                //message.To.Add(new System.Net.Mail.MailAddress("archana.hadawale@maximusinfoware.in"));
                //message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                //message.Subject = subject;
                //message.IsBodyHtml = true;
                //message.Body = SMS;
                //System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                //client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                //client.EnableSsl = true;
                //client.UseDefaultCredentials = true;
                //client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                //client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);

                ////System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate(object s,
                ////        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                ////        System.Security.Cryptography.X509Certificates.X509Chain chain,
                ////        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                ////{
                ////    return true;
                ////};

                //System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                //client.Send(message);




                MailMessage mail = new MailMessage();
                SmtpClient SmtpServer = new SmtpClient("drukpnbbank.bt");

                mail.From = new MailAddress("drukpay@drukpnbbank.bt");
                mail.To.Add("archana.hadawale@maximusinfoware.in");
                mail.Subject = "Test Mail";
                mail.Body = "This is for testing test mail from DRuk";

                SmtpServer.Port = 587;
                SmtpServer.Credentials = new System.Net.NetworkCredential("drukpay@drukpnbbank.bt", "dpnb@2020");
                SmtpServer.EnableSsl = true;

                SmtpServer.Send(mail);

                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception e)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(null, e);

            }
        }

        public void ProcessSendSignINOTP(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessSignIn_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessSignIn_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendVerifyUserOTP(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessVerifyUser_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessSignIn_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendmPIN(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessmPIN_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessmPIN_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendForgorPasswordOTP(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessFP_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessFP_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendForgorMpinOTP(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessFMPIN_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessFMPIN_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendResetmPIN(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessResetmPIN_SMS(ref _SMSJson, _MOBILEPORTAL_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessResetmPIN_Mail(_MOBILEPORTAL_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendResetPassword(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessResetPassword_SMS(ref _SMSJson, _MOBILEPORTAL_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessResetPassword_Mail(_MOBILEPORTAL_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositNotification(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationCheque_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationCheque_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositPortalRemitter(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationChequePortal_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationChequePortal_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositPortalDeclineRemitter(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationChequeDecline_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationChequeDecline_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositPortalBeneficiary(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationChequePortalBeneficiary_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationChequePortalBeneficiary_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositPortalDeclineBeneficiary(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationChequeDeclineBeneficiary_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationChequeDeclineBeneficiary_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessSendChequeDepositNotificationRemitter(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessnotificationChequeRemitter_SMS(ref _SMSJson, _REGISTRATION_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessnotificationChequeRemitter_Mail(_REGISTRATION_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void RegisterTokenID(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("RegisterTokenID () "));
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" _REGISTRATION_REQ.TokenID.ToString()  : {0} ", _REGISTRATION_REQ.TokenID.ToString()));

                if (_REGISTRATION_REQ.TokenID.ToString() == "" || _REGISTRATION_REQ.TokenID.ToString() == "TokenID" || _REGISTRATION_REQ.TokenID.Length < 8)
                {
                    IMPSTransactions.RegisterTokenID(_REGISTRATION_REQ.TokenID, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.DeviceType, _REGISTRATION_REQ.ReferenceNumber, out status);
                    //ProcessrequestMoney_Mail(_REGISTRATION_REQ);
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TokenNotfound);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.TokenNotfound);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {
                    IMPSTransactions.RegisterTokenID(_REGISTRATION_REQ.TokenID, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.DeviceType, _REGISTRATION_REQ.ReferenceNumber, out status);
                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Insert Register TokenID status: {0} ", status));
                    if (status == 1)
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TokenUpdated);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }


                    else if (status == 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.OTP = _REGISTRATION_REQ.OTP;
                        return;
                    }
                    else if (status == 2)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }

                }

            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        //public void RequestMoney(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        //{


        //    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("RequestMoney "));
        //    int TransType = -1;
        //    TransType = (int)enumTransactionType.RequestMoney;
        //    int status = -1;
        //    DataTable DtTokendetails = null;
        //    DataTable DtUservalidation = null;
        //    string Remitter = _REGISTRATION_REQ.REMITTERNAME;
        //    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
        //    Remitter = textInfo.ToTitleCase(Remitter.ToLower());
        //    _REGISTRATION_REQ.REMITTERNAME = Remitter;

        //    try
        //    {
        //        if (_REGISTRATION_REQ.MobileNumber == _REGISTRATION_REQ.BenificiaryMobileNumber)
        //        {
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InvalidUser);
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            return;
        //        }
        //        else
        //        {
        //            int StatusUserExist = -1;

        //            DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out StatusUserExist);

        //            if (StatusUserExist == 0)
        //            {

        //                DtTokendetails = IMPSTransactions.GetTokenDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out status);

        //                if (DtTokendetails.Rows.Count > 0 && DtTokendetails.Rows[0][0].ToString().Length > 8 && DtTokendetails.Rows[0][0].ToString() != "TokenID")
        //                {
        //                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Device Type   : {0} ", DtTokendetails.Rows[0][4].ToString()));

        //                    #region Android
        //                    if (DtTokendetails.Rows[0][4].ToString() == "Android")
        //                    {

        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

        //                        if (status == 0)
        //                        {
        //                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Successful Token  : {0} ", status.ToString()));
        //                            /*logic of send Token*/

        //                            string SERVERKEY = CONFIGURATIONCONFIGDATA.SERVERKEY;
        //                            string RETURNVALUE = string.Empty;
        //                            try
        //                            {
        //                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SERVERKEY  : {0} ", SERVERKEY.ToString()));
        //                                //_REGISTRATION_REQ.ExpiredDate = DateTime.Now.AddDays(1).ToString();
        //                                DateTime currentTime = DateTime.Now;
        //                                DateTime x24HRMinsLater = currentTime.AddMinutes(1440);
        //                                _REGISTRATION_REQ.ExpiredDate = x24HRMinsLater.ToString();

        //                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("_REGISTRATION_REQ.ExpiredDate  : {0} ", _REGISTRATION_REQ.ExpiredDate.ToString()));
        //                                //  _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Convert.ToDecimal(_REGISTRATION_REQ.Amount)  : {0} ", Convert.ToDecimal(_REGISTRATION_REQ.Amount)));

        //                                IMPSTransactions.InsertTokenDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.AccountNumber, DtTokendetails.Rows[0][0].ToString(), "0", "0", "", 1, Convert.ToDecimal(_REGISTRATION_REQ.Amount), _REGISTRATION_REQ.Remark, out status, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ExpiredDate, DtTokendetails.Rows[0][2].ToString(), "", "", _REGISTRATION_REQ.REMITTERNAME, "");

        //                                if (status == 0)
        //                                {

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("InsertTokenDetails : {0} ", "InsertTokenDetails SUCCESS"));
        //                                    string RESULT = "-1", RESULTMSG = "-1";
        //                                    string WEBADDR = CONFIGURATIONCONFIGDATA.WEBADDR.ToString();
        //                                    string REQUESTMONEYNOTIFICATIONTITLE = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;

        //                                    string Requestmsg = DtTokendetails.Rows[0][2].ToString();
        //                                    string regID = DtTokendetails.Rows[0][0].ToString();

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Requestmsg  : {0} ", Requestmsg.ToString()));

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID  : {0} ", regID.ToString()));

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("WEBADDR  : {0} ", WEBADDR.ToString()));

        //                                    #region Local

        //                                    //var httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR);
        //                                    //httpWebRequest.ContentType = "application/json";
        //                                    //httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
        //                                    //httpWebRequest.Method = "POST";
        //                                    #endregion Local


        //                                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
        //                                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
        //                                    System.Security.Cryptography.X509Certificates.X509Chain chain,
        //                                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
        //                                    {
        //                                        return true;
        //                                    };

        //                                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR.ToString());
        //                                    WebProxy WEBproxy = new WebProxy("172.19.10.222", 3128);
        //                                    WEBproxy.BypassProxyOnLocal = false;
        //                                    httpWebRequest.Proxy = WEBproxy;
        //                                    httpWebRequest.ContentType = "application/json";
        //                                    httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
        //                                    httpWebRequest.Method = "POST";


        //                                    //string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " Requesting Money  Nu." + _REGISTRATION_REQ.Amount + " " + _REGISTRATION_REQ.Reason;

        //                                    //string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " has requested money from you on your DrukPayapp. On approving the request, Nu." + _REGISTRATION_REQ.Amount + " will be debited from your account.";

        //                                    string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " has request Nu. " + _REGISTRATION_REQ.Amount + " from you via mPAY. Login to DrukPayto approve or decline the request.";

        //                                    //   string SMSreqMsg = _REGISTRATION_REQ.REMITTERNAME + " has request Nu. " + _REGISTRATION_REQ.Amount + " from you via mPAY. Login to DrukPayto approve or decline the request.";


        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("reqmsg : {0} ", reqmsg.ToString()));


        //                                    DataTable DtRequestdetails = IMPSTransactions.GetRequestMoneyDashBoardDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out status);
        //                                    _REGISTRATION_RES.NotificationCount = DtRequestdetails.Rows.Count.ToString();

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtRequestdetails.Rows.Count.ToString()));
        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));


        //                                    string json;

        //                                    using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
        //                                    {
        //                                        json = "{\"to\": \"" + regID + "\",\"notification\": {\"title\": \" " + REQUESTMONEYNOTIFICATIONTITLE + "\",\"body\": \"" + reqmsg + "\",\"badge\": \"" + DtRequestdetails.Rows.Count.ToString() + "\"},\"priority\":10}";
        //                                        streamWriter.Write(json);
        //                                        streamWriter.Flush();
        //                                    }
        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("json : {0} ", json.ToString()));
        //                                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        //                                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
        //                                    {
        //                                        RESULT = streamReader.ReadToEnd();
        //                                    }

        //                                    RETURNVALUE = RESULT;
        //                                    var data = JObject.Parse(RETURNVALUE);

        //                                    if (data.ToString().Contains("NotRegistered") == true)
        //                                    {

        //                                        //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CustomerNotIligible);
        //                                        //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CustomerNotIligible);

        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Usernotregister);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.Usernotregister);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                        return;
        //                                    }

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("data : {0} ", data.ToString()));
        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID 1 : {0} ", regID.ToString()));


        //                                    string success = Convert.ToString(data["success"]);
        //                                    string failure = Convert.ToString(data["failure"]);
        //                                    string message_id = data["results"][0]["message_id"].ToString();
        //                                    string multicastID = Convert.ToString(data["multicast_id"]);

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("multicastID : {0} For Reference Number : {1}", multicastID.ToString(), _REGISTRATION_REQ.ReferenceNumber));

        //                                    IMPSTransactions.InsertTokenDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.AccountNumber, DtTokendetails.Rows[0][0].ToString(), success, failure, message_id, 2, Convert.ToDecimal(_REGISTRATION_REQ.Amount), _REGISTRATION_REQ.Remark, out status, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ExpiredDate, DtTokendetails.Rows[0][2].ToString(), "", "", "", "");
        //                                    if (Convert.ToInt16(success) > 0)
        //                                    {

        //                                        /*SMS 28022020*/
        //                                        string BenificiaryAccNo = "";
        //                                        BenificiaryAccNo = DtUservalidation.Rows[0][0].ToString();
        //                                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(BenificiaryAccNo, _REGISTRATION_REQ.BenificiaryMobileNumber, out status);

        //                                        if (DTCustomerdata != null && DTCustomerdata.Rows.Count > 0)
        //                                        {
        //                                            _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
        //                                        }

        //                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" Request Money _REGISTRATION_REQ.MailID : {0} ", _REGISTRATION_REQ.MailID));

        //                                        var task = Task.Factory.StartNew(() =>
        //                                        {
        //                                            ProcessSendRequestMoneySMS(_REGISTRATION_REQ, reqmsg, "Request Money", reqmsg);
        //                                        });



        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneySuccessful);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestMoneySuccessful).Replace("@BenificiaryName", DtTokendetails.Rows[0][2].ToString()).Replace("@Amount", _REGISTRATION_REQ.Amount);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;

        //                                    }
        //                                    else
        //                                    {
        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneyServerDown);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                        return;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                    _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                    _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                    return;
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //                            }


        //                        }
        //                    }


        //                    #endregion Android

        //                    #region ios
        //                    if (DtTokendetails.Rows[0][4].ToString() == "Ios")
        //                    {
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

        //                        if (status == 0)
        //                        {
        //                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Successful Token  : {0} ", status.ToString()));
        //                            /*logic of send Token*/

        //                            string SERVERKEY = CONFIGURATIONCONFIGDATA.SERVERKEYIos;
        //                            string SENDERID = CONFIGURATIONCONFIGDATA.SENDERID;
        //                            string RETURNVALUE = string.Empty;
        //                            try
        //                            {
        //                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SENDERID  : {0} ", SENDERID.ToString()));
        //                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SERVERKEY  : {0} ", SERVERKEY.ToString()));
        //                                //_REGISTRATION_REQ.ExpiredDate = DateTime.Now.AddDays(1).ToString();
        //                                DateTime currentTime = DateTime.Now;
        //                                DateTime x24HRMinsLater = currentTime.AddMinutes(1440);
        //                                _REGISTRATION_REQ.ExpiredDate = x24HRMinsLater.ToString();

        //                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("_REGISTRATION_REQ.ExpiredDate  : {0} ", _REGISTRATION_REQ.ExpiredDate.ToString()));

        //                                IMPSTransactions.InsertTokenDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.AccountNumber, DtTokendetails.Rows[0][0].ToString(), "0", "0", "", 1, Convert.ToDecimal(_REGISTRATION_REQ.Amount), _REGISTRATION_REQ.Remark, out status, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ExpiredDate, DtTokendetails.Rows[0][2].ToString(), "", "", _REGISTRATION_REQ.REMITTERNAME, "");

        //                                if (status == 0)
        //                                {

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("InsertTokenDetails : {0} ", "InsertTokenDetails SUCCESS"));
        //                                    string RESULT = "-1";
        //                                    string WEBADDR = CONFIGURATIONCONFIGDATA.WEBADDR.ToString();
        //                                    string REQUESTMONEYNOTIFICATIONTITLE = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;

        //                                    string Requestmsg = DtTokendetails.Rows[0][2].ToString();
        //                                    string regID = DtTokendetails.Rows[0][0].ToString();

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Requestmsg  : {0} ", Requestmsg.ToString()));

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID  : {0} ", regID.ToString()));

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("WEBADDR  : {0} ", WEBADDR.ToString()));

        //                                    #region Local

        //                                    //var httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR);
        //                                    //httpWebRequest.ContentType = "application/json";
        //                                    //httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
        //                                    //httpWebRequest.Method = "POST";
        //                                    #endregion Local


        //                                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
        //                                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
        //                                    System.Security.Cryptography.X509Certificates.X509Chain chain,
        //                                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
        //                                    {
        //                                        return true;
        //                                    };

        //                                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR.ToString());
        //                                    WebProxy WEBproxy = new WebProxy("172.19.10.222", 3128);
        //                                    WEBproxy.BypassProxyOnLocal = false;
        //                                    httpWebRequest.Proxy = WEBproxy;
        //                                    httpWebRequest.ContentType = "application/json";
        //                                    httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
        //                                    //httpWebRequest.Headers.Add("Sender: id={0}", SENDERID.ToString());
        //                                    httpWebRequest.Method = "POST";

        //                                    //string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " Requesting Money  Nu." + _REGISTRATION_REQ.Amount + " " + _REGISTRATION_REQ.Reason;
        //                                    //string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " has requested money from you on your DrukPayapp. On approving the request, Nu." + _REGISTRATION_REQ.Amount + " will be debited from your account.";

        //                                    string reqmsg = _REGISTRATION_REQ.REMITTERNAME + " has request Nu. " + _REGISTRATION_REQ.Amount + " from you via mPAY. Login to DrukPayto approve or decline the request.";


        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("reqmsg : {0} ", reqmsg.ToString()));


        //                                    string json;
        //                                    using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
        //                                    {
        //                                        json = "{\"to\": \"" + regID + "\",\"notification\": {\"title\": \" " + REQUESTMONEYNOTIFICATIONTITLE + "\",\"body\": \"" + reqmsg + "\"},\"priority\":10}";

        //                                        streamWriter.Write(json);
        //                                        streamWriter.Flush();
        //                                    }

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("json : {0} ", json.ToString()));

        //                                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        //                                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
        //                                    {
        //                                        RESULT = streamReader.ReadToEnd();
        //                                    }
        //                                    RETURNVALUE = RESULT;

        //                                    var data = JObject.Parse(RETURNVALUE);


        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("data : {0} ", data.ToString()));
        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID 1 : {0} ", regID.ToString()));

        //                                    if (data.ToString().Contains("NotRegistered") == true)
        //                                    {

        //                                        //_REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.CustomerNotIligible);
        //                                        //_REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.CustomerNotIligible);
        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Usernotregister);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.Usernotregister);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                        return;
        //                                    }

        //                                    string success = Convert.ToString(data["success"]);
        //                                    string failure = Convert.ToString(data["failure"]);
        //                                    string message_id = data["results"][0]["message_id"].ToString();
        //                                    string multicastID = Convert.ToString(data["multicast_id"]);

        //                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("multicastID : {0} For Reference Number : {1}", multicastID.ToString(), _REGISTRATION_REQ.ReferenceNumber));

        //                                    IMPSTransactions.InsertTokenDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.AccountNumber, DtTokendetails.Rows[0][0].ToString(), success, failure, message_id, 2, Convert.ToDecimal(_REGISTRATION_REQ.Amount), _REGISTRATION_REQ.Remark, out status, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ExpiredDate, DtTokendetails.Rows[0][2].ToString(), "", "", "", "");
        //                                    if (Convert.ToInt16(success) > 0)
        //                                    {
        //                                        /*SMS 28022020*/
        //                                        string BenificiaryAccNo = "";
        //                                        BenificiaryAccNo = DtUservalidation.Rows[0][0].ToString();
        //                                        DataTable DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(BenificiaryAccNo, _REGISTRATION_REQ.BenificiaryMobileNumber, out status);

        //                                        if (DTCustomerdata != null && DTCustomerdata.Rows.Count > 0)
        //                                        {
        //                                            _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
        //                                        }

        //                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" Ios Request Money _REGISTRATION_REQ.MailID : {0} ", _REGISTRATION_REQ.MailID));
        //                                        var task = Task.Factory.StartNew(() =>
        //                                        {
        //                                            ProcessSendRequestMoneySMS(_REGISTRATION_REQ, reqmsg, "Request Money", reqmsg);
        //                                        });


        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneySuccessful);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RequestMoneySuccessful).Replace("@BenificiaryName", DtTokendetails.Rows[0][2].ToString()).Replace("@Amount", _REGISTRATION_REQ.Amount);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;


        //                                    }
        //                                    else
        //                                    {
        //                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RequestMoneyServerDown);
        //                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
        //                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
        //                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                        return;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //                                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                    _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
        //                                    _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
        //                                    return;
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //                            }


        //                        }
        //                    }



        //                    #endregion ios
        //                }
        //                else
        //                {
        //                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ForRequestMoneyusernotRegister);
        //                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.ForRequestMoneyusernotRegister);
        //                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //                    return;
        //                }
        //            }
        //            else
        //            {
        //                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
        //                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
        //                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {

        //        //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //        _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //    }



        //}

        public void RequestMoneyDashBoard(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            int status = -1;
            string count = string.Empty;
            DataTable DtRequestdetails = null;
            DataTable DtBellRequestdetails = null;
            DtRequestdetails = IMPSTransactions.GetRequestMoneyDashBoardDetails(_REGISTRATION_REQ.MobileNumber, out status);
            DtBellRequestdetails = IMPSTransactions.GetRequestBellMoneyDashBoardDetails(_REGISTRATION_REQ.MobileNumber, out status);

            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtRequestdetails.Rows.Count.ToString()));
            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

            if (status == 0 && DtBellRequestdetails != null && DtBellRequestdetails.Rows.Count > 0)
            {
                count = DtBellRequestdetails.Rows.Count.ToString();
            }

            if (status == 0 && DtRequestdetails != null && DtRequestdetails.Rows.Count > 0)
            {

                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.CustomerDetails = DtRequestdetails;
                _REGISTRATION_RES.NotificationCount = count;


            }

            else if (status == 1)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeDataNotFound);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
                _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
                _REGISTRATION_RES.NotificationCount = count;
                return;
            }




        }

        public void RequestMoneyDashBoardHistory(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            int status = -1;
            string count = string.Empty;
            DataTable DtRequestdetails = null;
            DtRequestdetails = IMPSTransactions.GetRequestMoneyDashBoardHistoryDetails(_REGISTRATION_REQ.MobileNumber, out status);

            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtRequestdetails.Rows.Count.ToString()));
            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));


            if (status == 0 && DtRequestdetails != null && DtRequestdetails.Rows.Count > 0)
            {

                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.CustomerDetails = DtRequestdetails;
                _REGISTRATION_RES.NotificationCount = count;


            }

            else if (status == 1)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeDataNotFound);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
                _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
                _REGISTRATION_RES.NotificationCount = count;
                return;
            }




        }

        //public void MpayDashBoard(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        //{
        //    DataTable DtMpayDashboarddetails = null;
        //    DataTable DtAccountDetails = null;
        //    DataTable WeeklyTransDetails = new DataTable();
        //    DataTable ASSET = new DataTable();
        //    DataTable LIABLITY = new DataTable();
        //    DataTable CBSTransDetails = new DataTable();
        //    DataTable CBSLiablityAsset = new DataTable();
        //    DataTable CBSTrans = new DataTable();
        //    DataTable CBSLoan = new DataTable();
        //    string AccountDetails = string.Empty;
        //    Double tot = 0;
        //    Double TotAsset = 0;
        //    Double TotLiablity = 0;

        //    try
        //    {
        //        int status = -1;

        //        DtAccountDetails = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.MobileNumber, out status);
        //        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get DtAccountDetails Row Count (): {0} ", DtAccountDetails.Rows.Count.ToString()));

        //        string Account = string.Empty;

        //        if (status == 0 && DtAccountDetails != null && DtAccountDetails.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < DtAccountDetails.Rows.Count; i++)
        //            {
        //                AccountDetails = AccountDetails + "," + "'" + DtAccountDetails.Rows[i][0].ToString() + "'";
        //                Account = Account + "," + DtAccountDetails.Rows[i][0].ToString();

        //            }
        //            AccountDetails = AccountDetails.Substring(1, AccountDetails.Length - 1);
        //            Account = Account.Substring(1, Account.Length - 1);
        //            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get AccountDetails : {0} ", Account.ToString()));



        //            #region HardCodeValue
        //            //CBSTransDetails.Clear();
        //            //CBSTransDetails.Columns.Add("Assets");
        //            //CBSTransDetails.Columns.Add("Liabilities");
        //            //CBSTransDetails.Columns.Add("Balance");

        //            //DataRow _Rows = CBSTransDetails.NewRow();
        //            //_Rows["Assets"] = "1000000"; //Assets
        //            //_Rows["Liabilities"] = "20000"; //Liabilies
        //            //_Rows["Balance"] = "1020000";//Assets+Liabilies
        //            //CBSTransDetails.Rows.Add(_Rows);


        //            #endregion HardCodeValue

        //            #region Asset/Liablity
        //            DataView DataViewAsset;
        //            DataView DataViewLiablity;
        //            DataTable TableAsset = new DataTable();

        //            TableAsset.Columns.Add("Amount", typeof(string));
        //            TableAsset.Columns.Add("ACCOUNT_TYPE", typeof(string));



        //            for (int i = 0; i < DtAccountDetails.Rows.Count; i++)
        //            {
        //                //LIVE
        //                /// CBSTransDetails = IMPSTransactions.GETASSETLIABLITY(DtAccountDetails.Rows[i][0].ToString(), out status, _REGISTRATION_REQ.AccountType);
        //                //LOCAL

        //                CBSTransDetails = IMPSTransactions.GETASSETLIABLITY_Loc(DtAccountDetails.Rows[i][0].ToString(), out status, _REGISTRATION_REQ.AccountType);

        //                if (CBSTransDetails.Rows.Count > 0 && CBSTransDetails != null)
        //                {
        //                    for (int j = 0; j < CBSTransDetails.Rows.Count; j++)
        //                    {
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" WeeklyTrans.Rows.Count : {0} ", CBSTransDetails.Rows.Count.ToString()));
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Account : {0} ", CBSTransDetails.Rows[j][0].ToString()));
        //                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Account Type : {0} ", CBSTransDetails.Rows[j][4].ToString()));

        //                        TableAsset.Rows.Add(CBSTransDetails.Rows[j][2].ToString(), CBSTransDetails.Rows[j][4].ToString());


        //                        DataViewAsset = TableAsset.DefaultView;
        //                        DataViewAsset.RowFilter = "ACCOUNT_TYPE IN( 'SAVING','CURRENT','TERM DEPOSIT','RECURRING')";
        //                        ASSET = DataViewAsset.ToTable();

        //                        DataViewLiablity = TableAsset.DefaultView;
        //                        DataViewLiablity.RowFilter = "ACCOUNT_TYPE IN( 'OVER DRAFT','WORKING CAPITAL')";
        //                        LIABLITY = DataViewLiablity.ToTable();
        //                    }
        //                    for (int k = 0; k <= ASSET.Rows.Count - 1; k++)
        //                    {
        //                        TotAsset = TotAsset + Convert.ToDouble(ASSET.Rows[i][0].ToString());
        //                    }


        //                    for (int k = 0; k <= LIABLITY.Rows.Count - 1; k++)
        //                    {
        //                        TotLiablity = TotLiablity + Convert.ToDouble(LIABLITY.Rows[i][0].ToString());
        //                    }





        //                    CBSLiablityAsset.Clear();
        //                    CBSLiablityAsset.Columns.Add("Assets", typeof(string));
        //                    CBSLiablityAsset.Columns.Add("Liabilities", typeof(string));
        //                    CBSLiablityAsset.Columns.Add("Balance", typeof(string));

        //                    CBSLiablityAsset.Rows.Add(TotAsset.ToString(), TotLiablity.ToString(), (Convert.ToDecimal(TotLiablity) + Convert.ToDecimal(TotAsset)).ToString());
        //                }
        //            }
        //            #endregion Asset/Liablity

        //            #region graph
        //            /*Weekly data */
        //            DataTable WeeklyTrans;
        //            DataView dataView;

        //            DataTable table = new DataTable();
        //            table.Columns.Add("ac_no", typeof(string));
        //            table.Columns.Add("ac_branch", typeof(string));
        //            table.Columns.Add("cust_no", typeof(string));
        //            table.Columns.Add("ACCOUNT_CLASS", typeof(string));
        //            table.Columns.Add("TRN_DATE", typeof(string));
        //            table.Columns.Add("TOTAL_DEBIT", typeof(string));
        //            table.Columns.Add("TOTAL_CREDIT", typeof(string));
        //            table.Columns.Add("ACCOUNT_TYPE", typeof(string));

        //            if (DtAccountDetails.Rows.Count > 0 && DtAccountDetails != null)
        //            {

        //                for (int i = 0; i < DtAccountDetails.Rows.Count; i++)
        //                {
        //                    //Live
        //                    // WeeklyTrans = IMPSTransactions.GETWeeklyTransDT(DtAccountDetails.Rows[i][0].ToString(), out status, _REGISTRATION_REQ.AccountType);
        //                    //Local
        //                    WeeklyTrans = IMPSTransactions.GETWeeklyTransDTLocal(DtAccountDetails.Rows[i][0].ToString(), out status, _REGISTRATION_REQ.AccountType);

        //                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format(" WeeklyTrans.Rows.Count : {0} ", WeeklyTrans.Rows.Count.ToString()));
        //                    //_CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Account : {0} ", WeeklyTrans.Rows[0][0].ToString()));
        //                    //_CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Account Type : {0} ", WeeklyTrans.Rows[0][7].ToString()));

        //                    if (WeeklyTrans.Rows.Count > 0 && WeeklyTrans != null)
        //                    {
        //                        for (int j = 0; j < WeeklyTrans.Rows.Count; j++)
        //                        {
        //                            table.Rows.Add(WeeklyTrans.Rows[j][0].ToString(), WeeklyTrans.Rows[j][1].ToString(), WeeklyTrans.Rows[j][2].ToString(),
        //                            WeeklyTrans.Rows[j][3].ToString(), WeeklyTrans.Rows[j][4].ToString(), WeeklyTrans.Rows[j][5].ToString(),
        //                            WeeklyTrans.Rows[j][6].ToString(), WeeklyTrans.Rows[j][7].ToString());
        //                        }
        //                    }

        //                }

        //                dataView = table.DefaultView;
        //                dataView.RowFilter = "ACCOUNT_TYPE = '" + _REGISTRATION_REQ.AccountType + "'";
        //                WeeklyTransDetails = dataView.ToTable();


        //                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get WeeklyTrans Row Count (): {0} ", WeeklyTransDetails.Rows.Count.ToString()));

        //            }

        //            #endregion graph

        //            # region investmentdata

        //            DtMpayDashboarddetails = IMPSTransactions.GetMpayDashBoardDetails(Account, out status);
        //            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get MpayDashboarddetails Row Count (): {0} ", DtMpayDashboarddetails.Rows.Count.ToString()));
        //            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

        //            tot = 0;

        //            if (DtMpayDashboarddetails != null && DtMpayDashboarddetails.Rows.Count > 0)
        //            {
        //                for (int i = 0; i < DtMpayDashboarddetails.Rows.Count - 1; i++)
        //                {

        //                    tot = tot + Convert.ToDouble(DtMpayDashboarddetails.Rows[i][1].ToString());

        //                }
        //            }
        //            # endregion investmentdata



        //            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", "3"));
        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            _REGISTRATION_RES.CBSTransDT = CBSLiablityAsset;
        //            _REGISTRATION_RES.MonthlyTransDT = WeeklyTransDetails;
        //            _REGISTRATION_RES.TransDT = DtMpayDashboarddetails;
        //            _REGISTRATION_RES.TotAsset = TotAsset;
        //            _REGISTRATION_RES.TotLiablity = TotLiablity;
        //            _REGISTRATION_RES.TotAmount = tot;


        //            if (_REGISTRATION_RES.CBSTransDT != null && _REGISTRATION_RES.CBSTransDT.Rows.Count > 0)
        //                _REGISTRATION_RES.CBSTransDT.TableName = "CBSTransDT";
        //            if (_REGISTRATION_RES.MonthlyTransDT != null && _REGISTRATION_RES.MonthlyTransDT.Rows.Count > 0)
        //                _REGISTRATION_RES.MonthlyTransDT.TableName = "MonthlyTransDT";
        //            if (_REGISTRATION_RES.TransDT != null && _REGISTRATION_RES.TransDT.Rows.Count > 0)
        //                _REGISTRATION_RES.TransDT.TableName = "TransDT";





        //        }
        //        else
        //        {

        //            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidAccount);
        //            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
        //            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
        //            _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;

        //            _REGISTRATION_RES.CBSTransDT = CBSLiablityAsset;
        //            _REGISTRATION_RES.MonthlyTransDT = WeeklyTransDetails;
        //            _REGISTRATION_RES.TransDT = DtMpayDashboarddetails;
        //            _REGISTRATION_RES.TotAsset = TotAsset;
        //            _REGISTRATION_RES.TotLiablity = TotLiablity;
        //            _REGISTRATION_RES.TotAmount = tot;

        //            return;

        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //        _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
        //        _REGISTRATION_RES.CBSTransDT = CBSLiablityAsset;
        //        _REGISTRATION_RES.MonthlyTransDT = WeeklyTransDetails;
        //        _REGISTRATION_RES.TransDT = DtMpayDashboarddetails;
        //        _REGISTRATION_RES.TotAsset = TotAsset;
        //        _REGISTRATION_RES.TotLiablity = TotLiablity;
        //        _REGISTRATION_RES.TotAmount = tot;
        //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
        //    }
        //}

        public void RequestMoneyFinalPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ, string TransactioAppDec)
        {


            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("RequestMoney "));
            int TransType = -1;
            TransType = (int)enumTransactionType.RequestMoney;
            int status = -1;

            DataTable DtTokendetails = null;
            DataTable DTCustomerdata = new DataTable();
            DataTable DTRemitterCustomerdata = new DataTable();
            DTRemitterCustomerdata = null;
            DTCustomerdata = null;
            int Remitterstatus = -1;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("_MOBILEBANKING_REQ.BENIFICIARYMOBILE " + _MOBILEBANKING_REQ.BENIFICIARYMOBILE));
                DtTokendetails = IMPSTransactions.GetTokenDetails(_MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));



                if (DtTokendetails.Rows.Count > 0 && DtTokendetails.Rows[0][0].ToString().Length > 8 && DtTokendetails.Rows[0][0].ToString() != "TokenID")
                {

                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("inside process"));


                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Device Type   : {0} ", DtTokendetails.Rows[0][4].ToString()));

                    #region Android
                    if (DtTokendetails.Rows[0][4].ToString() == "Android")
                    {
                        if (status == 0)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("DtTokendetails status  : {0} ", status.ToString()));
                            /*logic of send Token*/

                            string SERVERKEY = CONFIGURATIONCONFIGDATA.SERVERKEY;
                            string RETURNVALUE = string.Empty;
                            try
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SERVERKEY  : {0} ", SERVERKEY.ToString()));


                                if (status == 0)
                                {


                                    string RESULT = "-1", RESULTMSG = "-1";
                                    string WEBADDR = CONFIGURATIONCONFIGDATA.WEBADDR.ToString();
                                    string REQUESTMONEYNOTIFICATIONTITLE = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;

                                    string Requestmsg = DtTokendetails.Rows[0][2].ToString();
                                    string regID = DtTokendetails.Rows[0][0].ToString();

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Requestmsg  : {0} ", Requestmsg.ToString()));

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID  : {0} ", regID.ToString()));

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("WEBADDR  : {0} ", WEBADDR.ToString()));

                                    #region Local

                                    //var httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR);
                                    //httpWebRequest.ContentType = "application/json";
                                    //httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
                                    //httpWebRequest.Method = "POST";
                                    #endregion Local


                                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                                    {
                                        return true;
                                    };

                                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR.ToString());
                                    WebProxy WEBproxy = new WebProxy("172.19.10.222", 3128);
                                    WEBproxy.BypassProxyOnLocal = false;
                                    httpWebRequest.Proxy = WEBproxy;
                                    httpWebRequest.ContentType = "application/json";
                                    httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
                                    httpWebRequest.Method = "POST";
                                    string reqmsg = string.Empty;
                                    if (TransactioAppDec == "Accept")
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Accept for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                        DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);

                                        DTRemitterCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, out Remitterstatus);


                                        if (status != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Customerdata Status : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }


                                        else if (Remitterstatus != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata Remitterstatus : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }

                                        else
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Customerdata status : " + status.ToString());


                                            //reqmsg = " Transaction initiated by  " + _MOBILEBANKING_REQ.REMITTERNAME + " for amount " + _MOBILEBANKING_REQ.TXNAMT.ToString() + "Nu.";                                        ProcessSendSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Accept", reqmsg);
                                            /*Benificiary SMS Mail */
                                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "MOBILEBANKING_REQ.MailID : " + _MOBILEBANKING_REQ.MailID.ToString());
                                            //  reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been approved by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Reason: " + _MOBILEBANKING_REQ.RemarkfinalPayment + " Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy"); 
                                            reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been approved by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");

                                            var task = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);
                                            });



                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);

                                            /*Remmitter SMS Mail */
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata status : " + Remitterstatus.ToString());
                                            _MOBILEBANKING_REQ.RemitterMailID = DTRemitterCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "MOBILEBANKING_REQ.RemitterMailID : " + _MOBILEBANKING_REQ.RemitterMailID.ToString());

                                            //reqmsg = "Your approved request Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " for  " + _MOBILEBANKING_REQ.BenificiaryNickName + " Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber;
                                            reqmsg = "You have approved Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " to " + _MOBILEBANKING_REQ.BenificiaryNickName + ". Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");



                                            var task1 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendRemitterSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);
                                            });




                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remmitter SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remmitter Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);

                                            if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                                            {
                                            }
                                            else
                                            {
                                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.BENIFICIARYMOBILE;

                                            }


                                        }
                                    }
                                    else
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline MOBILEBANKING_REQ.BENIFICIARYACC " + _MOBILEBANKING_REQ.BENIFICIARYACC);
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline MOBILEBANKING_REQ.BENIFICIARYMOBILE " + _MOBILEBANKING_REQ.BENIFICIARYMOBILE);
                                        DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline status " + status.ToString());

                                        /*Remitter SMS Mail */
                                        DTRemitterCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, out Remitterstatus);



                                        if (status != 0)
                                        {
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }
                                        else if (Remitterstatus != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata Error : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }
                                        else
                                        {
                                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Decline MOBILEBANKING_REQ.MailID " + _MOBILEBANKING_REQ.MailID);
                                            reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been declined by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Reason: " + _MOBILEBANKING_REQ.RemarkfinalPayment + " Transaction reference number is " + _MOBILEBANKING_REQ.ReferenceNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");

                                            var task2 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Declined", reqmsg);
                                            });




                                            _CommanDetails.SystemLogger.WriteTransLog(this, "SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary  SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);


                                            /*Remmitter SMS Mail */
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata status : " + Remitterstatus.ToString());
                                            _MOBILEBANKING_REQ.RemitterMailID = DTRemitterCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "MOBILEBANKING_REQ.RemitterMailID : " + _MOBILEBANKING_REQ.RemitterMailID.ToString());
                                            // reqmsg = "Your Declined request  Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " for  " + _MOBILEBANKING_REQ.BenificiaryNickName + " Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber;
                                            reqmsg = "You have declined Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " to " + _MOBILEBANKING_REQ.BenificiaryNickName + ". Transaction reference number is " + _MOBILEBANKING_REQ.ReferenceNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");

                                            var task3 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendRemitterSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);
                                            });




                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remmitter SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remmitter Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);



                                            if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                                            { }
                                            else
                                            {
                                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.BENIFICIARYMOBILE;
                                                return;
                                            }
                                        }
                                    }


                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("reqmsg : {0} ", reqmsg.ToString()));


                                    DataTable DtRequestdetails = IMPSTransactions.GetRequestMoneyDashBoardDetails(_MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);
                                    //_REGISTRATION_RES.NotificationCount = DtRequestdetails.Rows.Count.ToString();

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtRequestdetails.Rows.Count.ToString()));
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));
                                    #region FCM

                                    #endregion FCM
                                }
                                else
                                {
                                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;

                                    return;
                                }
                            }
                            catch (Exception ex)
                            {

                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                            }


                        }
                    }


                    #endregion Android

                    #region ios
                    if (DtTokendetails.Rows[0][4].ToString() == "Ios")
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));
                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

                        if (status == 0)
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Ios DtTokendetails status  : {0} ", status.ToString()));
                            /*logic of send Token*/

                            string SERVERKEY = CONFIGURATIONCONFIGDATA.SERVERKEYIos;
                            string SENDERID = CONFIGURATIONCONFIGDATA.SENDERID;
                            string RETURNVALUE = string.Empty;
                            try
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SENDERID  : {0} ", SENDERID.ToString()));
                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SERVERKEY  : {0} ", SERVERKEY.ToString()));

                                if (status == 0)
                                {

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("InsertTokenDetails : {0} ", "InsertTokenDetails SUCCESS"));
                                    string RESULT = "-1";
                                    string WEBADDR = CONFIGURATIONCONFIGDATA.WEBADDR.ToString();
                                    string REQUESTMONEYNOTIFICATIONTITLE = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;

                                    string Requestmsg = DtTokendetails.Rows[0][2].ToString();
                                    string regID = DtTokendetails.Rows[0][0].ToString();

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Requestmsg  : {0} ", Requestmsg.ToString()));

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID  : {0} ", regID.ToString()));

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("WEBADDR  : {0} ", WEBADDR.ToString()));

                                    #region Local

                                    //var httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR);
                                    //httpWebRequest.ContentType = "application/json";
                                    //httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
                                    //httpWebRequest.Method = "POST";
                                    #endregion Local


                                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                                    {
                                        return true;
                                    };

                                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR.ToString());
                                    WebProxy WEBproxy = new WebProxy("172.19.10.222", 3128);
                                    WEBproxy.BypassProxyOnLocal = false;
                                    httpWebRequest.Proxy = WEBproxy;
                                    httpWebRequest.ContentType = "application/json";
                                    httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
                                    //httpWebRequest.Headers.Add("Sender: id={0}", SENDERID.ToString());
                                    httpWebRequest.Method = "POST";

                                    string reqmsg = string.Empty;
                                    if (TransactioAppDec == "Accept")
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Ios request monry final payment Accept for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                        //reqmsg = " Transaction initiated by  " + _MOBILEBANKING_REQ.REMITTERNAME + " for amount " + _MOBILEBANKING_REQ.TXNAMT.ToString() +"Nu.";

                                        DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);
                                        DTRemitterCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, out Remitterstatus);



                                        if (status != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata Remitterstatus : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }

                                        else if (Remitterstatus != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata Remitterstatus : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }

                                        else
                                        {
                                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                                            //reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been approved by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Reason: " + _MOBILEBANKING_REQ.RemarkfinalPayment + " Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");
                                            reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been approved by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");

                                            var task4 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);

                                            });


                                            _CommanDetails.SystemLogger.WriteTransLog(this, " Benificiary SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);

                                            /*Remmitter SMS Mail */
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "DTRemitterCustomerdata status : " + Remitterstatus.ToString());
                                            _MOBILEBANKING_REQ.RemitterMailID = DTRemitterCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_REQ.RemitterMailID : " + _MOBILEBANKING_REQ.RemitterMailID.ToString());
                                            reqmsg = "You have approved Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " to " + _MOBILEBANKING_REQ.BenificiaryNickName + ". Transaction reference number is " + _MOBILEBANKING_RESP.CBSRefNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");
                                            //  reqmsg = "Your approving request  Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " for  " + _MOBILEBANKING_REQ.BenificiaryNickName + " Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber;


                                            var task5 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendRemitterSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);

                                            });



                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remitter SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remitter Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                                            { }
                                            else
                                            {
                                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.BENIFICIARYMOBILE;

                                            }
                                        }
                                    }
                                    else
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);

                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline MOBILEBANKING_REQ.BENIFICIARYACC " + _MOBILEBANKING_REQ.BENIFICIARYACC);
                                        _CommanDetails.SystemLogger.WriteTransLog(this, "Decline MOBILEBANKING_REQ.BENIFICIARYMOBILE " + _MOBILEBANKING_REQ.BENIFICIARYMOBILE);

                                        DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.BENIFICIARYACC, _MOBILEBANKING_REQ.BENIFICIARYMOBILE, out status);
                                        DTRemitterCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_REQMONEY(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, out Remitterstatus);



                                        if (status != 0)
                                        {
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }

                                        else if (Remitterstatus != 0)
                                        {
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata Error : " + status.ToString());
                                            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                                            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_REQ.ResponseCode);
                                            _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                            _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                            _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                                            return;
                                        }



                                        else
                                        {

                                            _MOBILEBANKING_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();

                                            // reqmsg = _MOBILEBANKING_REQ.REMITTERNAME + " has declined your request of Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " via mPAY.";

                                            reqmsg = "Your request for Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + "  has been declined by " + _MOBILEBANKING_REQ.REMITTERNAME + ". Reason: " + _MOBILEBANKING_REQ.RemarkfinalPayment + " Transaction referencer number is " + _MOBILEBANKING_REQ.ReferenceNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");
                                            var task5 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Declined", reqmsg);

                                            });




                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Benificiary Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);

                                            /*Remmitter SMS Mail */
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "RemitterCustomerdata status : " + Remitterstatus.ToString());
                                            _MOBILEBANKING_REQ.RemitterMailID = DTRemitterCustomerdata.Rows[0]["e_mail"].ToString();
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "MOBILEBANKING_REQ.RemitterMailID : " + _MOBILEBANKING_REQ.RemitterMailID.ToString());

                                            //reqmsg = "Your approving request  Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " for  " + _MOBILEBANKING_REQ.BenificiaryNickName + " Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber;
                                            reqmsg = "You have declined Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " to " + _MOBILEBANKING_REQ.BenificiaryNickName + ". Transaction referencer number is " + _MOBILEBANKING_REQ.ReferenceNumber + "  " + DateTime.Now.ToString("dddd, dd MMMM yyyy");

                                            var task6 = Task.Factory.StartNew(() =>
                                            {
                                                ProcessSendRemitterSMS(_MOBILEBANKING_REQ, reqmsg, "Request Money Approved", reqmsg);

                                            });


                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remitter SMS STATUS : " + OTPmPINStatus.SmsStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            _CommanDetails.SystemLogger.WriteTransLog(this, "Remitter Email Status : " + OTPmPINStatus.MailStatus + "for referencenumber:" + _MOBILEBANKING_REQ.ReferenceNumber);
                                            if (OTPmPINStatus.SmsStatus || OTPmPINStatus.MailStatus)
                                            { }
                                            else
                                            {
                                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToSendMessage);
                                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.BENIFICIARYMOBILE;
                                                return;
                                            }
                                        }

                                    }
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("reqmsg : {0} ", reqmsg.ToString()));
                                    #region FCM
                                    //if (TransactioAppDec == "Accept")
                                    //{
                                    //    string json;
                                    //    using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                                    //    {
                                    //        json = "{\"to\": \"" + regID + "\",\"notification\": {\"title\": \" " + REQUESTMONEYNOTIFICATIONTITLE + "\",\"body\": \"" + reqmsg + "\"},\"priority\":10}";

                                    //        streamWriter.Write(json);
                                    //        streamWriter.Flush();
                                    //    }

                                    //    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("json : {0} ", json.ToString()));

                                    //    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                                    //    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                                    //    {
                                    //        RESULT = streamReader.ReadToEnd();
                                    //    }
                                    //    RETURNVALUE = RESULT;

                                    //    var data = JObject.Parse(RETURNVALUE);


                                    //    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("data : {0} ", data.ToString()));
                                    //    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID 1 : {0} ", regID.ToString()));


                                    //    string success = Convert.ToString(data["success"]);
                                    //    string failure = Convert.ToString(data["failure"]);
                                    //    string message_id = data["results"][0]["message_id"].ToString();
                                    //    string multicastID = Convert.ToString(data["multicast_id"]);

                                    //    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("multicastID : {0} For Reference Number : {1}", multicastID.ToString(), _MOBILEBANKING_REQ.ReferenceNumber));

                                    //    if (Convert.ToInt16(success) > 0)
                                    //    {
                                    //        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Token send success : {0} For Reference Number : {1}", success.ToString(), _MOBILEBANKING_REQ.ReferenceNumber));

                                    //    }
                                    //    else
                                    //    {
                                    //        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Token send Failed: {0} For Reference Number : {1}", success.ToString(), _MOBILEBANKING_REQ.ReferenceNumber));
                                    //        return;
                                    //    }
                                    //}
                                    #endregion FCM
                                }
                                else
                                {
                                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                    return;
                                }
                            }
                            catch (Exception ex)
                            {
                                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                            }


                        }
                    }



                    #endregion ios
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InvalidUser);
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public void RequestMoneyvalidReq(ref int reqstatus, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                int status = -1;
                DataTable DtReqDetails = null;
                DtReqDetails = IMPSTransactions.ReqValidation(_MOBILEBANKING_REQ.ReferenceNumber, out status);
                if (DtReqDetails != null && DtReqDetails.Rows.Count > 0)
                {
                    reqstatus = 0;
                }
                else
                {
                    reqstatus = 1;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        //added by sk
        public void SendSmsCommon(string SMSBody, string MobNumber)
        {
            try
            {
                SmppClient client = new SmppClient();
                SmppConnectionProperties properties = new SmppConnectionProperties();
                TextMessage msg = new TextMessage();
                client = new SmppClient();
                #region New Code Added By sk
                try
                {
                    string SMS = string.Empty;
                    string Response = string.Empty;
                    string a = string.Empty;
                    //SMS Using SMPP  Protocall
                    string SMSIP = System.Configuration.ConfigurationManager.AppSettings["SMSIP"].ToString();
                    string SMSPORT = System.Configuration.ConfigurationManager.AppSettings["SMSPORT"].ToString();
                    string SMSUserName = System.Configuration.ConfigurationManager.AppSettings["SMSUserName"].ToString();
                    string SMSPWD = System.Configuration.ConfigurationManager.AppSettings["SMSPWD"].ToString();
                    string SMSProtocol = System.Configuration.ConfigurationManager.AppSettings["SMSProtocol"].ToString();
                    string ServiceType = System.Configuration.ConfigurationManager.AppSettings["ServiceType"].ToString();
                    ///TCELL
                    string TSMSIP = System.Configuration.ConfigurationManager.AppSettings["TSMSIP"].ToString();
                    string TSMSPORT = System.Configuration.ConfigurationManager.AppSettings["TSMSPORT"].ToString();
                    string TSMSUserName = System.Configuration.ConfigurationManager.AppSettings["TSMSUserName"].ToString();
                    string TSMSPWD = System.Configuration.ConfigurationManager.AppSettings["TSMSPWD"].ToString();
                    string TServiceType = System.Configuration.ConfigurationManager.AppSettings["TServiceType"].ToString();
                    string TSMSProtocol = System.Configuration.ConfigurationManager.AppSettings["TSMSProtocol"].ToString();


                    properties = client.Properties;

                    if (MobNumber.Length == 8)
                    {
                        MobNumber = "975" + MobNumber;//97511111111

                    }
                    a = MobNumber.Substring(0, 4);//9751
                                                  // string MobileNumber = MobNumber.Substring(0, 1);
                    if (a == "9751")
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "IP : " + SMSIP + " SMSPORT : " + SMSPORT + " SMSUSERNAME : " + SMSUserName + " SMSpwd : " + SMSPWD + " SMSProtocol : " + SMSProtocol + " SERVICETYPE : " + ServiceType + " MobileNumber : " + a);
                        SMS = SMSBody;
                        //"Dear customer, your DrukPay Sign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                        // properties.SystemID = SMSUserName;
                        // properties.Password = SMSPWD;
                        // properties.Port = int.Parse(SMSPORT); //IP port to use
                        // properties.Host = SMSIP;
                        // properties.DefaultServiceType = ServiceType;
                        // properties.SystemType = SMSProtocol;
                        //// msg.SourceAddress = "DRUK PNB";
                        //// msg.SourceAddress = SenderMFI;


                        ////////////////////////////////////////////////////////////

                        properties.SystemID = SMSUserName;
                        properties.Password = SMSPWD;
                        properties.Port = int.Parse(SMSPORT); //IP port to use
                        properties.Host = SMSIP;
                        properties.DefaultServiceType = ServiceType;
                        properties.SystemType = SMSProtocol;
                        // msg.SourceAddress = SenderMFI;
                        //client.AutoReconnectDelay = 3000;//commented on 19062024
                        //client.KeepAliveInterval = 30000;//commented on 19062024
                        client.Start();
                        // client.ConnectionStateChanged += client_ConnectionStateChanged;
                        if (client.ConnectionState != SmppConnectionState.Connected)
                            client.ForceConnect(5000);
                        // send message now
                        msg = new TextMessage();
                        msg.DestinationAddress = MobNumber;
                        msg.SourceAddress = "DRUK PNB";
                        msg.Text = SMS;
                        msg.RegisterDeliveryNotification = true;
                        client.SendMessage(msg,10000);
                        client.Shutdown();
                        _CommanDetails.SystemLogger.WriteTransLog(this, "SMS Sent Succesfully");

                    }
                //commented for testing on 03072024    //else
                    //{
                    //    SMS = SMSBody;
                    //    //"Dear customer, your DrukPay Sign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "TIP : " + TSMSIP + " TSMSPORT : " + TSMSPORT + " TSMSUserName : " + TSMSUserName + " TSMSPWD : " + TSMSPWD + " TSMSProtocol : " + TSMSProtocol + " TServiceType : " + TServiceType + " MobileNumber : " + a);
                    //    /////////////////////////////////////////////////
                    //    properties.SystemID = TSMSUserName;
                    //    properties.Password = TSMSPWD;
                    //    properties.Port = int.Parse(TSMSPORT); //IP port to use
                    //    properties.Host = TSMSIP;
                    //    properties.DefaultServiceType = TServiceType;

                    //    properties.InterfaceVersion = JamaaTech.Smpp.Net.Lib.InterfaceVersion.v34;
                    //    properties.SystemType = "SMPP";
                    //    properties.AddressTon = JamaaTech.Smpp.Net.Lib.TypeOfNumber.Aphanumeric;
                    //    properties.AddressNpi = JamaaTech.Smpp.Net.Lib.NumberingPlanIndicator.Unknown;
                    //    msg.SourceAddress = "123";
                    //    properties.SystemType = TSMSProtocol;
                    //    client.AutoReconnectDelay = 3000;
                    //    client.KeepAliveInterval = 30000;
                    //    client.Start();
                    //    System.Threading.Thread.Sleep(1000);
                    //    // client.ConnectionStateChanged += client_ConnectionStateChanged;
                    //    if (client.ConnectionState != SmppConnectionState.Connected)
                    //    {

                    //        client.ForceConnect(5000);
                    //        _CommanDetails.SystemLogger.WriteTransLog(this, "Force connected");
                    //    }
                           
                    //    // send message now
                    //    msg = new TextMessage();
                    //    msg.DestinationAddress = MobNumber;
                    //    msg.Text = SMS;
                    //    msg.RegisterDeliveryNotification = true;
                    //    client.SendMessage(msg, 5000);
                    //    client.Shutdown();
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "SMS Sent Succesfully");
                    //}
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "exception: " + ex.ToString());
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Error In SMSC: " + ex.ToString());
                    client.Shutdown();
                    // Uobj.CatchAllErrors(ex.Message);
                }
            }
            #endregion New Code Added By sk

            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }


        #region SEND SIGNUP OTP
        public void ProcessSignUp_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear customer, your DrukPay Sign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _REGISTRATION_REQ.MobileNumber.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _REGISTRATION_REQ.ReferenceNumber));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessSignUp_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>your BNB DrukPaySign Up OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "ONE TIME PASSWORD";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessrequestMoney_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>your firebase cloud messaging service upgrade.<br/> <br/> <br/> Kindly register and  update in application .<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                //_CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();

                message.To.Add(new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailUserTo.ToString()));
                message.CC.Add(new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailUserCc.ToString()));
                message.Bcc.Add(new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailUserBcc.ToString()));

                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Firebase Cloud Messaging Service(FCM) Upgradation";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion SEND SIGNUP OTP

        #region RequestMoneyDeclineSMS
        public void RequestMoneyProcessDecline_SMS(ref SMSJson _SMSJson, MOBILEBANKING_REQ _MOBILEBANKING_REQ, string SendSMS)
        {
            string MobileNumber = string.Empty;
            string SMS = SendSMS;//_MOBILEBANKING_REQ.REMITTERNAME + " has declined your request of Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " via mPAY.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _MOBILEBANKING_REQ.BENIFICIARYMOBILE.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _MOBILEBANKING_REQ.BENIFICIARYMOBILE.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _MOBILEBANKING_REQ.ReferenceNumber));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion RequestMoneyDeclineSMS

        #region RequestMoney
        public void RequestMoneySMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ, string SendSMS)
        {
            string MobileNumber = string.Empty;
            string SMS = SendSMS;//_MOBILEBANKING_REQ.REMITTERNAME + " has declined your request of Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " via mPAY.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _REGISTRATION_REQ.BenificiaryMobileNumber.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.BenificiaryMobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _REGISTRATION_REQ.ReferenceNumber));

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS  : {0} For Reference Number : {1} ", URL, _REGISTRATION_REQ.ReferenceNumber));


            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion RequestMoney

        #region RequestMoneyRemitterSMS
        public void RequestMoneyProcessRemitter_SMS(ref SMSJson _SMSJson, MOBILEBANKING_REQ _MOBILEBANKING_REQ, string SendSMS)
        {
            string MobileNumber = string.Empty;
            string SMS = SendSMS;//_MOBILEBANKING_REQ.REMITTERNAME + " has declined your request of Nu." + _MOBILEBANKING_REQ.TXNAMT.ToString() + " via mPAY.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _MOBILEBANKING_REQ.MobileNumber.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _MOBILEBANKING_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _MOBILEBANKING_REQ.ReferenceNumber));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion RequestMoneyRemitterSMS

        #region SEND PIN
        public void ProcessmPIN_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer, Your transaction TPIN for DrukPayis : " + _REGISTRATION_REQ.mPIN + ". Do not share this transaction TPIN to anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessmPIN_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your transaction TPIN for DrukPayis : " + _REGISTRATION_REQ.mPIN + ". Do not share this transaction TPIN to anyone for secuirity reasons.<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "TPIN";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessSignUpForm_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Thank you for registering with  DrukPayMobile Banking services. Since your account type is either Current or Joint you are requested to fill up the attached form and submit to the nearest branch or email to tsheyangsd@bnb.bt"
                       + "<br/><br/>Upon verification we will notify you via email/SMS.<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                System.Net.Mail.Attachment attachment;
                attachment = new System.Net.Mail.Attachment(HostingEnvironment.MapPath("~/FileManager/BNB DrukPayapplication form.pdf"));
                message.Attachments.Add(attachment);
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = " DrukPayapplication form";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessResetmPIN_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer, Your TPIN for DrukPay is : " + _MOBILEPORTAL_REQ.NewMpin + ". Do not share this TPIN to anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessResetmPIN_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your TPIN for DrukPayis : " + _MOBILEPORTAL_REQ.NewMpin + ". Do not share this TPIN to anyone for security reasons.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "TPIN";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessResetPassword_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer, Your new password for DrukPay is : " + _MOBILEPORTAL_REQ.LoginPassword + ". Do not share this password to anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessResetPassword_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your new password for BNB DrukPay is : " + _MOBILEPORTAL_REQ.LoginPassword + ". Do not share this Password to anyone for security reasons.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "DrukPayPassword";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion SEND PIN

        #region SEND SIGNIN OTP
        public void ProcessSignIn_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear customer, your DrukPaySign in OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0}", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                      System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                      System.Security.Cryptography.X509Certificates.X509Chain chain,
                      System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessSignIn_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your BNB DrukPaySign in OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons. <br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "ONE TIME PASSWORD";
                message.IsBodyHtml = true;
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessVerifyUser_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear customer, your BNB DrukPayVerify User OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0}", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                      System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                      System.Security.Cryptography.X509Certificates.X509Chain chain,
                      System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion SEND SIGNIN OTP

        #region Forgot Password
        public void ProcessFP_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear customer, the OTP to reset your DrukPaypassword is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0}", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                      System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                      System.Security.Cryptography.X509Certificates.X509Chain chain,
                      System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessFP_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>The OTP to reset your BNB DrukPaypassword is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "ONE TIME PASSWORD";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Forgot Password

        #region Forgot Mpin
        public void ProcessFMPIN_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear customer, the OTP to reset your DrukPay TPIN is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0}", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                      System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                      System.Security.Cryptography.X509Certificates.X509Chain chain,
                      System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessFMPIN_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>The OTP to reset your BNB DrukPay TPIN is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "ONE TIME PASSWORD";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Forgot Mpin

        #region Approve Decline SignUp Req
        public void ProcessSendApproveDeclineNotification(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessApproveDeclineNotification_SMS(ref _SMSJson, _MOBILEPORTAL_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessApproveDeclineNotification_Mail(_MOBILEPORTAL_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessApproveDeclineNotification_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            if (_MOBILEPORTAL_REQ.ApproveStatus == "0")
                SMS = "Dear Customer, Your SignUp request has been approved from bank, now you can login in DrukPay with your password";
            else
                SMS = "Dear Customer, Your SignUp request has been declined by bank, please visit to branch for more information.";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessApproveDeclineNotification_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            if (_MOBILEPORTAL_REQ.ApproveStatus == "0")
                SMS = "Dear Customer,<br/><br/> Your SignUp request has been approved from bank, now you can login in DrukPay with your password.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            else
                SMS = "Dear Customer,<br/><br/> Your SignUp request has been declined by bank, please visit to branch for more information.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "mPAY";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Approve Decline SignUp Req

        #region Approve Decline Add Account

        public void ProcessSendApproveDeclineAddAccountNotification(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessApproveDeclineAddAccountNotification_SMS(ref _SMSJson, _MOBILEPORTAL_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessApproveDeclineAddAccountNotification_Mail(_MOBILEPORTAL_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessApproveDeclineAddAccountNotification_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            if (_MOBILEPORTAL_REQ.ApproveStatus == "APPROVE")
                SMS = "Dear Customer, Your request for additional account has been approved by the bank.";
            else
                SMS = "Dear Customer, Your request for additional account has been declined by the bank, please visit bank for more information.";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                CommonLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessApproveDeclineAddAccountNotification_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            if (_MOBILEPORTAL_REQ.ApproveStatus == "APPROVE")
                SMS = "Dear Customer,<br/><br/> Your request for additional account has been approved by the bank.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            else
                SMS = "Dear Customer,<br/><br/> Your request for additional account has been declined by the bank, please visit bank for more information.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "mPAY";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                CommonLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Approve Decline Add Account

        #region SEND CARDLESS OTP
        public void ProcessCardLess_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            //string SMS = "Dear customer, your ATM Cardless OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";

            string SMS = "Dear Customer, Your ATM cardless OTP is  " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons. ";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _REGISTRATION_REQ.MobileNumber.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.REMITTERMOB.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _REGISTRATION_REQ.ReferenceNumber));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion SEND CARDLESS OTP

        #region SEND ProcessGreenPin_SMS
        public void ProcessGreenPin_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;//"Dear customer, GreenPin OTP is " + _REGISTRATION_REQ.OTP + ". It will be valid for 5 minutes. Do not share this OTP with anyone for security reasons.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", "975" + _REGISTRATION_REQ.MobileNumber.Trim()));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                    System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                    System.Security.Cryptography.X509Certificates.X509Chain chain,
                    System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} For Reference Number : {1} ", Data, _REGISTRATION_REQ.ReferenceNumber));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion SEND ProcessGreenPin_SMS

        #region Send FeedBack to BNBL

        public void ProcessFeedBack_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "From: " + _REGISTRATION_REQ.CustomerName + "<br/>Mobile No. : " + _REGISTRATION_REQ.MobileNumber + "<br/>Email : " + _REGISTRATION_REQ.Email + "<br/><br/>Dear Sir/Madam,<br/><br/>" + _REGISTRATION_REQ.Comment + " <br/><br/><br/><br/><span style='color:gray'>---<br/>This e-mail was sent from mPAY.</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", "contact@bnb.bt"));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress("contact@bnb.bt"));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, "DrukPay Feedback");
                message.Subject = _REGISTRATION_REQ.PRODUCTTYPE;
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Send FeedBack to BNBL

        #region TerminateUser

        public void ProcessSendTerminationNotification(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessTerminationNotification_SMS(ref _SMSJson, _MOBILEPORTAL_REQ);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessTerminationNotification_Mail(_MOBILEPORTAL_REQ);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessTerminationNotification_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            SMS = "Dear Customer, Your DrukPay account has been terminated by the bank.";

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                CommonLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessTerminationNotification_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = string.Empty;
            SMS = "Dear Customer,<br/><br/> Your DrukPay account has been terminated by the bank.<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "mPAY";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                CommonLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion TerminateUser

        #region Notification for Cheque Deposit
        public void ProcessnotificationCheque_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been received by BNB on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Please contact the bank if you didn't issue the cheque.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationCheque_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been received by BNB on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Please contact the bank if you didn't issue the cheque.<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeRemitter_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = _REGISTRATION_REQ.Text;
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeRemitter_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>" + _REGISTRATION_REQ.Text + "<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequePortal_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been accepted by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ".";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequePortal_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been accepted the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ".<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeDecline_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been declined by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Reason :" + _REGISTRATION_REQ.Reason + ". Please contact the bank for further inquiry.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeDecline_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your cheque " + _REGISTRATION_REQ.ChequeNumber + " to " + _REGISTRATION_REQ.CustomerName + " for Nu. " + _REGISTRATION_REQ.DepositAmount + " has been declined by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Reason :" + _REGISTRATION_REQ.Reason + ". Please contact the bank for further inquiry.<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        ///////// Beneficiary /////////
        public void ProcessnotificationChequePortalBeneficiary_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Your cheque " + _REGISTRATION_REQ.ChequeNumber + " for Nu." + _REGISTRATION_REQ.DepositAmount + " has been accepted by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". You will receive deposit on the next business day";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequePortalBeneficiary_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your cheque " + _REGISTRATION_REQ.ChequeNumber + " for Nu." + _REGISTRATION_REQ.DepositAmount + " has been accepted by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ".<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeDeclineBeneficiary_SMS(ref SMSJson _SMSJson, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Your cheque " + _REGISTRATION_REQ.ChequeNumber + " for Nu." + _REGISTRATION_REQ.DepositAmount + " has been declined by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Reason :" + _REGISTRATION_REQ.Reason + ". Please contact the bank for further inquiry.";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _REGISTRATION_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _REGISTRATION_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessnotificationChequeDeclineBeneficiary_Mail(REGISTRATION_REQ _REGISTRATION_REQ)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>Your cheque " + _REGISTRATION_REQ.ChequeNumber + " for Nu." + _REGISTRATION_REQ.DepositAmount + " has been declined by the bank on " + System.DateTime.Now.ToString("dd/MM/yyyy") + ". Reason :" + _REGISTRATION_REQ.Reason + ". Please contact the bank for further inquiry.<br/<br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _REGISTRATION_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_REGISTRATION_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "Cheque Deposit";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion Notification for Cheque Deposit

        #endregion Manage Account

        #region Cheque Deposit

        public void ChequeDeposit(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                string CustomerName = string.Empty;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                _Authentication.TransactionRefrenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _SSM.VerifyPin(ref _Authentication, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.mPIN, _REGISTRATION_REQ.DeviceID);
                _CommanDetails.SystemLogger.WriteTransLog(this, "mPIN verification status : " + _Authentication.TransactionStatus);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    string StrAmountAvailable = string.Empty;

                    //Check stop payment.

                    DataTable _dtChequePaymentStop = IMPSTransactions.ValidChequePaymentStop(_REGISTRATION_REQ.ChequeAccountNumber, _REGISTRATION_REQ.ChequeNumber);

                    _CommanDetails.SystemLogger.WriteTransLog(this, "_dtChequePaymentStop : " + _dtChequePaymentStop.Rows.Count.ToString());


                    if (_dtChequePaymentStop != null && _dtChequePaymentStop.Rows.Count > 0)
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeStopForPayment);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeStopForPayment);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }



                    //////// CHECKING ACCOUNT & CHEQUENUMBER IS PRESENT OR NOT

                    DataTable _dtChequeDetails = IMPSTransactions.ValidCheque(_REGISTRATION_REQ.ChequeAccountNumber, _REGISTRATION_REQ.ChequeNumber);
                    if (_dtChequeDetails != null && _dtChequeDetails.Rows.Count > 0)
                    {
                        DataRow[] Rows = _dtChequeDetails.Select("STATUS = 'U'");
                        if (Rows.Count() > 0)
                        {
                            string ChequeData = string.Empty;
                            try { ChequeData = Convert.ToDateTime(Rows[0]["PRESENTATION_DATE"]).ToString("dd/MMM/yyyy"); }
                            catch { }
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeAlreadyProcessed);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeAlreadyProcessed).Replace("@ChequeNo", _REGISTRATION_REQ.ChequeNumber).Replace("@Date", ChequeData).Replace("@AMOUNT", Convert.ToDecimal(Rows[0]["amount"].ToString().Trim()).ToString("N2"));
                            return;

                        }


                        else
                        {
                            DataTable DTCustomerdataChequeAmount = new DataTable();


                            DTCustomerdataChequeAmount = IMPSTransactions.ValidChequeAmount(_REGISTRATION_REQ.ChequeAccountNumber, _REGISTRATION_REQ.DepositAmount, _REGISTRATION_REQ.ChequeDate, out status);

                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("DTCustomerdataChequeAmount : {0} ", DTCustomerdataChequeAmount.Rows.Count.ToString()));
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("DTCustomerdataChequeAmount : status : {0} ", status.ToString()));


                            if (status == 14)
                            {
                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InsufficiantChequeBalance);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InsufficiantChequeBalance);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                return;

                            }


                            if (status == 0)
                            {
                                DataColumnCollection columns = DTCustomerdataChequeAmount.Columns;
                                if (columns.Contains("line_expiry_date"))
                                {
                                    DateTime TodaysDate = DateTime.Now.Date;
                                    DateTime line_expiry_date = Convert.ToDateTime(DTCustomerdataChequeAmount.Rows[0]["line_expiry_date"].ToString().Trim()).Date;

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("line_expiry_date : {0} ", line_expiry_date.ToString()));
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("TodaysDate : status : {0} ", TodaysDate.ToString()));


                                    if (line_expiry_date < TodaysDate)
                                    {
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeExpiry);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeExpiry);
                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                        return;
                                    }
                                }


                                if (Convert.ToDecimal(DTCustomerdataChequeAmount.Rows[0]["BALANCE"].ToString()) >= Convert.ToDecimal(_REGISTRATION_REQ.DepositAmount))
                                {

                                    IMPSTransactions.ChequeDeposit(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.CustomerID,
                                                         _REGISTRATION_REQ.UserID, _REGISTRATION_REQ.ChequeNumber, _REGISTRATION_REQ.FrontImage, _REGISTRATION_REQ.BackImage, _REGISTRATION_REQ.DepositAmount, _REGISTRATION_REQ.DepositAccountNumber, _REGISTRATION_REQ.ChequeAccountNumber, _REGISTRATION_REQ.ChequeDate, out status);

                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));

                                    if (status == 0)
                                    {
                                        DataTable DTCustomerdataCheque = new DataTable();
                                        DataTable DTCustomerdataDeposit = new DataTable();
                                        try
                                        {
                                            DTCustomerdataCheque = IMPSTransactions.GETCUSTOMERDETAILS_ADDACC(_REGISTRATION_REQ.ChequeAccountNumber, out status);
                                        }
                                        catch { }

                                        try
                                        {
                                            DTCustomerdataDeposit = IMPSTransactions.GETCUSTOMERDETAILS_ADDACC(_REGISTRATION_REQ.DepositAccountNumber, out status);
                                        }
                                        catch { }
                                        try { _CommanDetails.SystemLogger.WriteTransLog(this, "Email : " + _REGISTRATION_REQ.Email + " Mobile : " + _REGISTRATION_REQ.MobileNumber + " for reference number : " + _REGISTRATION_REQ.ReferenceNumber); }
                                        catch { }
                                        try
                                        {
                                            try { _REGISTRATION_REQ.MailID = DTCustomerdataCheque.Rows[0]["e_mail"].ToString(); }
                                            catch { }
                                            try { _REGISTRATION_REQ.MobileNumber = DTCustomerdataCheque.Rows[0]["mobile_number"].ToString(); }
                                            catch { }
                                            try { _REGISTRATION_REQ.CustomerName = DTCustomerdataDeposit.Rows[0]["FIRST_NAME"].ToString(); }
                                            catch { }
                                            _REGISTRATION_REQ.Text = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeDepositedSuccess);
                                            ProcessSendChequeDepositNotification(_REGISTRATION_REQ);
                                        }
                                        catch { }
                                        try
                                        {
                                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeDepositedSuccess);
                                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeDepositedSuccess);

                                            try { _REGISTRATION_REQ.MailID = DTCustomerdataDeposit.Rows[0]["e_mail"].ToString(); }
                                            catch { }
                                            try { _REGISTRATION_REQ.MobileNumber = DTCustomerdataDeposit.Rows[0]["mobile_number"].ToString(); }
                                            catch { }
                                            ProcessSendChequeDepositNotificationRemitter(_REGISTRATION_REQ);
                                        }
                                        catch { }

                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                        return;
                                    }
                                    if (status == 1)
                                    {
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeDepositedUnSuccess);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeDepositedUnSuccess);
                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                        return;
                                    }
                                    if (status == 2)
                                    {
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeAlreadyExist);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeAlreadyExist);
                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                        return;
                                    }
                                    else
                                    {
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ChequeDepositedUnSuccess);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ChequeDepositedUnSuccess);
                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                        return;
                                    }
                                }
                                else
                                {
                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InsufficiantChequeBalance);
                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InsufficiantChequeBalance);
                                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidChequeDetails);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.InvalidChequeDetails);
                        return;
                    }
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.IncorrectMPIN);
                    return;
                }


            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion  Cheque Deposit

        #region Transaction Response
        public void ProcessSendApproveTransaction(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            try
            {
                //try
                //{
                //    SMSJson _SMSJson = new SMSJson();
                //    ProcessTransactionMessage_SMS(ref _SMSJson, _MOBILEPORTAL_REQ, Message);
                //    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                //        OTPmPINStatus.SmsStatus = true;
                //    else
                //        OTPmPINStatus.SmsStatus = false;
                //}
                //catch (Exception ex)
                //{
                //    OTPmPINStatus.SmsStatus = false;
                //}

                try
                {
                    ProcessTransactionMessage_MAIL(_MOBILEPORTAL_REQ, Message);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }


        public void ProcessSendApproveTransaction_NQRC(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            try
            {

                try
                {
                    ProcessTransactionMessage_MAIL_NQRC(_MOBILEPORTAL_REQ, Message);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }


        public void ProcessSendApproveTransactionRRCO(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessRRCOTransactionMessage_SMS(ref _SMSJson, _MOBILEPORTAL_REQ, Message);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    ProcessTransactionMessage_MAIL(_MOBILEPORTAL_REQ, Message);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }


        public void ProcessSendApproveTransactionFundTransfer(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessRRCOTransactionMessage_SMS(ref _SMSJson, _MOBILEPORTAL_REQ, Message);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }


            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }


        public void ProcessSendApproveTransaction_Merchant(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessTransactionMessage_SMS_Merchant(ref _SMSJson, _MOBILEPORTAL_REQ, Message);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessTransactionMessage_SMS(ref SMSJson _SMSJson, MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;


            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _MOBILEPORTAL_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessTransactionMessage_SMS_Merchant(ref SMSJson _SMSJson, MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;


            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Transaction Confirmation SMS Sent To Merchant Mobile Number : {0} ", _MOBILEPORTAL_REQ.MerchantMobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _MOBILEPORTAL_REQ.MerchantMobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessTransactionMessage_MAIL(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = "Dear Customer,<br/><br/>" + Message + "<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "DrukPay Transaction Confirmation";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }


        public void ProcessTransactionMessage_MAIL_NQRC(MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;

            string SMS = "Dear Customer,<br/><br/>" + Message + "<br/><br/>Thank You. <br/><br/><br/><br/><span style='color:red'>*** This is an automatically generated email, please do not reply. ***</span>";

            //string msg = SMS.Replace("\n", "<br/>");

            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("msg : {0} ", SMS));
            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "DrukPay Transaction Confirmation";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }




        public void ProcessRRCOTransactionMessage_SMS(ref SMSJson _SMSJson, MOBILEBANKING_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;


            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Transaction Confirmation SMS Sent To Customer Mobile Number : {0} ", _MOBILEPORTAL_REQ.MobileNumber));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + "975" + _MOBILEPORTAL_REQ.MobileNumber.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Approve Decline SignUp Req

        #region Loans & Payment

        public void ProcessGetListofloanaccount(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.QUERYACCSUMM_IOFS_REQ _QUERYACCOUNT_IOFS_REQ,
                                                                 FCUBSAccService.QUERYACCSUMM_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.ACTION;

                if (_QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.Approved);
                        try
                        {
                            int i = 0;
                            DataTable DtAccountList = new DataTable();
                            DtAccountList.Columns.Add("CUSTACNO");
                            DtAccountList.Columns.Add("BRANCH_CODE");
                            DtAccountList.Columns.Add("CCY");
                            DtAccountList.Columns.Add("ACCOUNT_TYPE");
                            DtAccountList.Columns.Add("CUSTOMER_NAME");
                            DtAccountList.Columns.Add("ACCSTATUS");
                            for (i = 0; i < _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA.Count(); i++)
                            {
                                DtAccountList.Rows.Add(_QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA[i].CUSTACNO, _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA[i].BRANCH_CODE,
                                                       _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA[i].CCY, _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA[i].ACCOUNT_TYPE,
                                                       _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.StvwAccountSumaryFull.StvwAccountSumaryA[i].CUSTOMER_NAME, "ACTIVE");
                            }
                            _MOBILEBANKING_RESP.ListOfLoanAccounts = DtAccountList;
                            _MOBILEBANKING_RESP.ListOfLoanAccounts.TableName = "ListOfAccount";
                        }
                        catch { }

                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;


            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessViewLoanDetails(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ,
                                                                 FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.ACTION;

                if (_QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.LoanHolderName = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.OthrApplicants[0].CUSTNAME.ToString();
                        _MOBILEBANKING_RESP.LoanAccountNumber = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.ACCNO.ToString();
                        try
                        {
                            //_MOBILEBANKING_RESP.AmountFinanced = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.Components[0].Disbursals[0].AMTDISBURSED.ToString("N2");
                            _MOBILEBANKING_RESP.AmountFinanced = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.AMTFINANCED.ToString("N2");
                        }
                        catch { }
                        double Outstndamt = 0;
                        double InterestOutstanding = 0;
                        double PenalityAmount = 0;
                        double ExpectedInterest = 0;
                        double EMIAMOUNT = 0;
                        try
                        {
                            int statusF = -1;
                            DataTable DT_LoanDetails = IMPSTransactions.GET_LOANDETAILS(_MOBILEBANKING_REQ.LoanAccountNumber, out statusF);
                            if (statusF == 0)
                            {
                                try
                                {
                                    _MOBILEBANKING_RESP.OverDueDays = DT_LoanDetails.Compute("MAX([OD_DAYS])", "").ToString();


                                    //_MOBILEBANKING_RESP.OverDueDays = (DT_LoanDetails.AsEnumerable()
                                    //            .Max(row => row["OD_DAYS"])).ToString();

                                }
                                catch { }
                                for (int i = 0; i < DT_LoanDetails.Rows.Count; i++)
                                {
                                    if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "INTEREST1")
                                        InterestOutstanding = Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());

                                    else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "MAIN_INT")
                                        InterestOutstanding = InterestOutstanding + Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());




                                    else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "PRINCIPAL")
                                        _MOBILEBANKING_RESP.PrincipalOutstanding = Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString()).ToString("N2");

                                    //else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "INTEREST1")
                                    //    PenalityAmount = Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());

                                    //else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "LFEE1")
                                    //    PenalityAmount += Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());

                                    else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "LFEE")
                                        PenalityAmount = Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());


                                    else if (DT_LoanDetails.Rows[i]["COMPONENT_NAME"].ToString() == "LFEE1")
                                        PenalityAmount = PenalityAmount + Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());



                                    Outstndamt += Convert.ToDouble(DT_LoanDetails.Rows[i]["AMOUNT_DUE"].ToString());
                                }

                                _CommanDetails.SystemLogger.WriteTransLog(null, "MAIN_INT 2" + InterestOutstanding.ToString());
                            }
                        }
                        catch
                        { }
                        /////// Overdue Details
                        double PrincipleOverDue = 0;
                        double InterestOverDue = 0;
                        double TotalOverdue = 0;
                        try
                        {
                            int statusOverdue = -1;
                            DataTable DT_LoanOverdue = IMPSTransactions.GET_LOANOVERDUEDETAILS(_MOBILEBANKING_REQ.LoanAccountNumber, out statusOverdue);
                            if (statusOverdue == 0)
                            {
                                PrincipleOverDue = Convert.ToDouble(DT_LoanOverdue.Rows[0]["PRIN_ODUE"].ToString());
                                InterestOverDue = Convert.ToDouble(DT_LoanOverdue.Rows[0]["INT_ODUE"].ToString());
                                TotalOverdue = Convert.ToDouble(DT_LoanOverdue.Rows[0]["TOT_ODUE"].ToString());
                            }
                        }
                        catch { }
                        foreach (var OutstandingAmount in _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.AccountStats)
                        {
                            try
                            {
                                if (OutstandingAmount.COMPNAME == "MAIN_INT")
                                    ExpectedInterest = Convert.ToDouble(OutstandingAmount.EXPECTED.ToString());
                            }
                            catch { }
                        }
                        foreach (var EffectDate in _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.EffecDate)
                        {
                            try
                            {
                                foreach (var InterestRate in EffectDate.UdeVals)
                                {
                                    if (InterestRate.UDEID == "INTEREST_RATE")
                                        _MOBILEBANKING_RESP.LoanInterestRate = InterestRate.RESOLVEDVAL.ToString() + " %";
                                }
                            }
                            catch { }
                        }
                        try
                        {
                            //foreach (var EMI in _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.Components[3].AccSchCmp)
                            //{
                            try
                            {
                                EMIAMOUNT += Convert.ToDouble(_QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.Components[3].AccSchCmp[_QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.Components[3].AccSchCmp.Count() - 7].EMAMT);
                            }
                            catch { }
                            //}
                        }
                        catch
                        { }
                        _MOBILEBANKING_RESP.EMIAMOUNT = EMIAMOUNT.ToString("N2");
                        _MOBILEBANKING_RESP.TotalOutstandingAmount = Outstndamt.ToString("N2");
                        _MOBILEBANKING_RESP.InterestOutstanding = InterestOutstanding.ToString("N2");
                        _MOBILEBANKING_RESP.ExpectedInterest = ExpectedInterest.ToString("N2");
                        _MOBILEBANKING_RESP.PenalityAmount = PenalityAmount.ToString("N2");
                        _MOBILEBANKING_RESP.LoanDisbursment = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.VALDT.ToString("dd-MMM-yyyy");
                        _MOBILEBANKING_RESP.MaturityDate = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.AccountMasterFull.MATDT.ToString("dd-MMM-yyyy");
                        try
                        {
                            _MOBILEBANKING_RESP.PrincipleOverDue = PrincipleOverDue.ToString("N2");
                            _MOBILEBANKING_RESP.InterestOverDue = InterestOverDue.ToString("N2");
                            _MOBILEBANKING_RESP.TotalOverDueAmt = TotalOverdue.ToString("N2");
                        }
                        catch { }
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _QUERYACCOUNT_IOFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _QUERYACCOUNT_IOFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _QUERYACCOUNT_IOFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;

                ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessViewRecurringTermDetails(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ,
                                                                FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {

                ViewLoansTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _QUERYACCOUNT_IOFS_REQ, _QUERYACCOUNT_IOFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void ProcessLoanPayment(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSCLService.CREATEPAYMENT_FSFS_REQ _CREATEPAYMENT_FSFS_REQ,
                                                                 FCUBSCLService.CREATEPAYMENT_FSFS_RES _CREATEPAYMENT_FSFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.LoanPaymentSuccess);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.LoanPaymentSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString()).Replace("@primaryaccount", _MOBILEBANKING_REQ.LoanAccountNumber.ToString()).Replace("@MSGID",
                                                                                                    _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.LiqFull.Settelments[0].STLREFNO.ToString());
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATEPAYMENT_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATEPAYMENT_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATEPAYMENT_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                LoansPaymentTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATEPAYMENT_FSFS_REQ, _CREATEPAYMENT_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        //public void ProcessViewRecurringLoanDetails(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ,
        //                                                         FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        //{
        //    try
        //    {
        //        _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
        //        _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
        //        _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
        //        _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
        //        _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
        //        _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
        //        _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
        //        _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
        //        _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
        //        _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
        //        _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

        //        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
        //        {

        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
        //                _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

        //                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DrukComSuccess);
        //                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DrukComSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString());
        //            }
        //            catch { }
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
        //            }
        //            catch { }
        //        }
        //        else
        //        {
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
        //                _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
        //            }
        //            catch { }
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
        //            }
        //            catch { }

        //            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
        //            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

        //            _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
        //            _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
        //        }

        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
        //        _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
        //        _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
        //        _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
        //        _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
        //        _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
        //        _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
        //        _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
        //        _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
        //        _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
        //        _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
        //        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
        //        _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
        //        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
        //        _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
        //        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
        //        _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
        //        //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
        //        _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
        //        _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
        //        _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;
        //        LoansAndPaymentTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
        //        _MOBILEBANKING_RESP.ResponseData = null;
        //    }
        //}

        //public void ProcessViewTermLoanDetails(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSCLService.QUERYACCOUNT_IOFS_REQ _QUERYACCOUNT_IOFS_REQ,
        //                                                         FCUBSCLService.QUERYACCOUNT_IOFS_RES _QUERYACCOUNT_IOFS_RES, FCUBSCLService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        //{
        //    try
        //    {
        //        _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
        //        _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
        //        _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
        //        _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
        //        _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
        //        _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
        //        _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
        //        _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
        //        _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
        //        _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
        //        _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;

        //        if (_CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
        //        {

        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
        //                _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

        //                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DrukComSuccess);
        //                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.DrukComSuccess).Replace("@Amount", _MOBILEBANKING_REQ.TXNAMT.ToString());
        //            }
        //            catch { }
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
        //            }
        //            catch { }
        //        }
        //        else
        //        {
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
        //                _MOBILEBANKING_RESP.HostWarningDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
        //            }
        //            catch { }
        //            try
        //            {
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
        //                _MOBILEBANKING_RESP.HostWarningCode = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
        //            }
        //            catch { }

        //            _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
        //            _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

        //            _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
        //            _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
        //        }

        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.SOURCE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SOURCE;
        //        _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
        //        _MOBILEBANKING_RESP.MSGID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGID;
        //        _MOBILEBANKING_RESP.CORRELID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.CORRELID;
        //        _MOBILEBANKING_RESP.USERID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.USERID;
        //        _MOBILEBANKING_RESP.BRANCH = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.BRANCH;
        //        _MOBILEBANKING_RESP.MODULEID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MODULEID;
        //        _MOBILEBANKING_RESP.SERVICE = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.SERVICE;
        //        _MOBILEBANKING_RESP.OPERATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.OPERATION;
        //        _MOBILEBANKING_RESP.MSGSTAT = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
        //        _MOBILEBANKING_RESP.DESTINATION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.DESTINATION;
        //        _MOBILEBANKING_RESP.MULTITRIPID = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
        //        _MOBILEBANKING_RESP.ACTION = _CREATETRANSACTION_FSFS_RES.FCUBS_HEADER.ACTION;
        //        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
        //        _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
        //        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
        //        _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETRANSACTION_FSFS_REQ.FCUBS_HEADER.BRANCH;
        //        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
        //        _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
        //        //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
        //        _MOBILEBANKING_RESP.TXNAMT = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.BAMT;
        //        _MOBILEBANKING_RESP.REMITTERACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.CUSTACNO;
        //        _MOBILEBANKING_RESP.XREF = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.XREF;
        //        LoansAndPaymentTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.Unknown, _CREATETRANSACTION_FSFS_REQ, _CREATETRANSACTION_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
        //    }
        //    catch (Exception ex)
        //    {
        //        _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
        //        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
        //        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
        //        _MOBILEBANKING_RESP.ResponseData = null;
        //    }
        //}

        public void ProcessCreateTermLoanAccount(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.CREATETDCUSTACC_FSFS_REQ _CREATETDCUSTACC_FSFS_REQ,
                                                                 FCUBSAccService.CREATETDCUSTACC_FSFS_RES _CREATETDCUSTACC_FSFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.TDSUCCESS);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.TDSUCCESS).Replace("@Account", _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.TERM_ACNO.ToString());
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.Tddetails.TDAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.CUSTNO;

                CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationRequestMessage, enumSource.CREATETERM, enumTransactionType.CreateTerm, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }


        public void ProcessCreateRecurringLoanAccount(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, FCUBSAccService.CREATETDCUSTACC_FSFS_REQ _CREATETDCUSTACC_FSFS_REQ,
                                                                 FCUBSAccService.CREATETDCUSTACC_FSFS_RES _CREATETDCUSTACC_FSFS_RES, FCUBSAccService.FCUBS_HEADERType _FCUBS_HEADERType, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                _MOBILEBANKING_RESP.SOURCE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _FCUBS_HEADERType.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _FCUBS_HEADERType.CORRELID;
                _MOBILEBANKING_RESP.USERID = _FCUBS_HEADERType.USERID;
                _MOBILEBANKING_RESP.BRANCH = _FCUBS_HEADERType.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _FCUBS_HEADERType.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _FCUBS_HEADERType.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _FCUBS_HEADERType.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.ACTION;

                if (_CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString().Contains("SUCCESS"))
                {

                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WCODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[0].WDESC;

                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.RDSUCCESS);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.RDSUCCESS).Replace("@Account", _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.TERM_ACNO.ToString());
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_WARNING_RESP[1].WCODE;
                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                        _MOBILEBANKING_RESP.HostWarningDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                    }
                    catch { }
                    try
                    {
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                        _MOBILEBANKING_RESP.HostWarningCode = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[1].ECODE;
                    }
                    catch { }

                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(_CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_MOBILEBANKING_RESP.ResponseCode);

                    _MOBILEBANKING_RESP.HOSTResponseCODE = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].ECODE;
                    _MOBILEBANKING_RESP.HOSTResponseDesc = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.FCUBS_ERROR_RESP[0].EDESC;
                }

                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.SOURCE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SOURCE;
                _MOBILEBANKING_RESP.UBSCOMP = FCUBSAccService.UBSCOMPType.FCUBS.ToString();
                _MOBILEBANKING_RESP.MSGID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGID;
                _MOBILEBANKING_RESP.CORRELID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.CORRELID;
                _MOBILEBANKING_RESP.USERID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.USERID;
                _MOBILEBANKING_RESP.BRANCH = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.MODULEID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MODULEID;
                _MOBILEBANKING_RESP.SERVICE = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.SERVICE;
                _MOBILEBANKING_RESP.OPERATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.OPERATION;
                _MOBILEBANKING_RESP.MSGSTAT = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MSGSTAT.ToString();
                _MOBILEBANKING_RESP.DESTINATION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.DESTINATION;
                _MOBILEBANKING_RESP.MULTITRIPID = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.MULTITRIPID;
                _MOBILEBANKING_RESP.ACTION = _CREATETDCUSTACC_FSFS_RES.FCUBS_HEADER.ACTION;
                _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                _MOBILEBANKING_RESP.DeviceLocation = _MOBILEBANKING_REQ.DeviceLocation;
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.BRANCH_CODE = _CREATETDCUSTACC_FSFS_REQ.FCUBS_HEADER.BRANCH;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.TransactionRefrenceNumber = _MOBILEBANKING_REQ.TransactionRefrenceNumber;
                //_MOBILEBANKING_RESP.BENIFICIARYACC = _CREATETRANSACTION_FSFS_RES.FCUBS_BODY.TransactionDetails.OFFSETACC;
                _MOBILEBANKING_RESP.TXNAMT = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.Tddetails.TDAMT;
                _MOBILEBANKING_RESP.REMITTERACC = _CREATETDCUSTACC_FSFS_RES.FCUBS_BODY.CustAccountFull.CUSTNO;

                CreateRDandTDTransaction((int)enumCommandTypeEnum.AuthorizationResponseMessage, enumSource.CREATERECURRING, enumTransactionType.CreateRecurring, _CREATETDCUSTACC_FSFS_REQ, _CREATETDCUSTACC_FSFS_RES, _FCUBS_HEADERType, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.ResponseData = null;
            }
        }

        public void StatementRequest(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                try
                {
                    int status = -1;
                    DataTable DTCustomerdata = new DataTable();
                    DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);
                    if (status != 0)
                    {
                        _REGISTRATION_REQ.MailID = null;
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(_REGISTRATION_REQ.MailID))
                        {
                            DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);
                        }
                        _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                    }

                    if (string.IsNullOrEmpty(_REGISTRATION_REQ.MailID))
                    {
                        string ACC = string.Empty;
                        string CID = string.Empty;
                        ACC = _REGISTRATION_REQ.AccountNumber;
                        CID = _REGISTRATION_REQ.AccountNumber.Substring(1, 9);
                        Get_RegisteredUsersAccountList(ref _REGISTRATION_RES, _REGISTRATION_REQ);
                        for (int j = 0; j < _REGISTRATION_RES.CustomerDetails.Rows.Count; j++)
                        {
                            if (string.IsNullOrEmpty(_REGISTRATION_REQ.MailID))
                            {
                                DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA_FORMAIL(_REGISTRATION_RES.CustomerDetails.Rows[j]["ACCOUNTNUMBER"].ToString(), _REGISTRATION_REQ.MobileNumber, out status);
                                _REGISTRATION_REQ.MailID = DTCustomerdata.Rows[0]["e_mail"].ToString();
                            }
                        }
                    }
                    if (string.IsNullOrEmpty(_REGISTRATION_REQ.MailID))
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.EmailIDisnotupdated);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.EmailIDisnotupdated);
                        return;
                    }
                }
                catch { }

                int TransType = -1;
                int StatusFinal = -1;
                TransType = (int)enumTransactionType.BalanceEnquiry;
                DataTable Dtaccountdetails = null;
                IMPSTransactions.OfflineRequest(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, enumTransactionType.AccountStatementRequest.ToString(), _REGISTRATION_REQ.FromDate, _REGISTRATION_REQ.ToDate, _REGISTRATION_REQ.MailID, _REGISTRATION_REQ.State, out StatusFinal);
                if (StatusFinal != 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(StatusFinal.ToString());
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(StatusFinal.ToString());
                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.StatementRequestAccepted);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.StatementRequestAccepted);
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        public void Get_RegisteredUsersAccountList(ref REGISTRATION_RES _MOBILEPORTAL_RES, REGISTRATION_REQ _MOBILEPORTAL_REQ)
        {
            int status = -1;
            DataTable DtUserDetails = null;
            try
            {
                DtUserDetails = MobilePortalProcess.SyncAccounts(_MOBILEPORTAL_REQ.CustomerID, _MOBILEPORTAL_REQ.AccountNumber, out status);
                if (status == 0)
                {

                    _MOBILEPORTAL_RES.CustomerDetails = DtUserDetails;
                    _MOBILEPORTAL_RES.CustomerDetails.TableName = "RegisteredUsersAccountList";
                    _MOBILEPORTAL_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEPORTAL_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEPORTAL_RES.ResponseCode);
                }
                else
                {

                    _MOBILEPORTAL_RES.CustomerDetails = DtUserDetails;
                    _MOBILEPORTAL_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DataNotFound);
                    _MOBILEPORTAL_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEPORTAL_RES.ResponseCode);
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Loans & Payment

        #region OfflineRequest notification
        public void ProcessSendApproveDeclineOfflineNotification(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ, string Message, string Maild)
        {
            try
            {
                try
                {
                    SMSJson _SMSJson = new SMSJson();
                    ProcessApproveDeclineOfflineNotification_SMS(ref _SMSJson, _MOBILEPORTAL_REQ, Message);
                    if (_SMSJson.data[0].Status.ToUpper().Contains("OK"))
                        OTPmPINStatus.SmsStatus = true;
                    else
                        OTPmPINStatus.SmsStatus = false;
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.SmsStatus = false;
                }

                try
                {
                    if (_MOBILEPORTAL_REQ.MailID != null && _MOBILEPORTAL_REQ.MailID != "")
                        ProcessApproveDeclineOfflineNotification_Mail(_MOBILEPORTAL_REQ, Maild);
                }
                catch (Exception ex)
                {
                    OTPmPINStatus.MailStatus = false;
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessApproveDeclineOfflineNotification_SMS(ref SMSJson _SMSJson, MOBILEPORTAL_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("SMS Sent To Mobile Number : {0} ", _MOBILEPORTAL_REQ.MOBILENUMBER));
                JavaScriptSerializer json = new JavaScriptSerializer();
                URL = CONFIGURATIONCONFIGDATA.SMSURL + _MOBILEPORTAL_REQ.MOBILENUMBER.Trim() + "&msg=" + SMS;

                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                     System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                     System.Security.Cryptography.X509Certificates.X509Chain chain,
                     System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };

                WebRequest myWebRequest = WebRequest.Create(URL);
                WebResponse myWebResponse = myWebRequest.GetResponse();
                Stream ReceiveStream = myWebResponse.GetResponseStream();
                Encoding encode = System.Text.Encoding.GetEncoding("utf-8");
                StreamReader readStream = new StreamReader(ReceiveStream, encode);
                string strResponse = readStream.ReadToEnd();
                var dic = json.Deserialize<Dictionary<string, dynamic>>(strResponse);
                _SMSJson = json.Deserialize<SMSJson>(strResponse);
                Data = _SMSJson.data[0].Status;
                CommonLogger.WriteTransLog(null, string.Format("SMS Status : {0} ", Data));

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessApproveDeclineOfflineNotification_Mail(MOBILEPORTAL_REQ _MOBILEPORTAL_REQ, string Message)
        {
            string MobileNumber = string.Empty;
            string SMS = Message;

            string URL = string.Empty;
            string Data = string.Empty;
            try
            {

                CommonLogger.WriteTransLog(null, string.Format("Mail Sent To Mail ID : {0} ", _MOBILEPORTAL_REQ.MailID));
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add(new System.Net.Mail.MailAddress(_MOBILEPORTAL_REQ.MailID.Trim()));
                message.From = new System.Net.Mail.MailAddress(CONFIGURATIONCONFIGDATA.MailAddress, CONFIGURATIONCONFIGDATA.MailName);
                message.Subject = "mPAY";
                message.IsBodyHtml = true;
                message.Body = SMS;
                System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                client.Port = Convert.ToInt16(CONFIGURATIONCONFIGDATA.MailPort);//25;
                client.EnableSsl = true;
                client.UseDefaultCredentials = true;
                client.Host = CONFIGURATIONCONFIGDATA.MailHost;
                client.Credentials = new NetworkCredential(CONFIGURATIONCONFIGDATA.MailUserName, CONFIGURATIONCONFIGDATA.MailUserPassword);
                System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                {
                    return true;
                };
                client.Send(message);
                OTPmPINStatus.MailStatus = true;
                CommonLogger.WriteTransLog(null, string.Format("Mail Status : {0} ", OTPmPINStatus.MailStatus));

            }
            catch (Exception ex)
            {
                OTPmPINStatus.MailStatus = false;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }
        #endregion OfflineRequest notification

        public void ProcessSelfNQRCGeneration(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            DataTable AllQRList = new DataTable { TableName = "QRLIST" };
            AllQRList.Columns.AddRange(new DataColumn[3] { new DataColumn("AccountNumber"), new DataColumn("QRValue"), new DataColumn("AccountType") });
            try
            {
                if (_REGISTRATION_REQ.MobileNumber.Length > 8)
                {
                    _REGISTRATION_REQ.MobileNumber = _REGISTRATION_REQ.MobileNumber.Substring(3, 8);
                }
                int status = -1;
                //_REGISTRATION_REQ.OTP = GetRandomOTP();
                //_CommanDetails.SystemLogger.WriteTransLog(this, " _REGISTRATION_REQ.OTP  :" + _REGISTRATION_REQ.OTP);
                try
                {
                    _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
                }
                catch { }
                _CommanDetails.SystemLogger.WriteTransLog(this, "SMS STATUS : " + OTPmPINStatus.SmsStatus + "\t MAIL STATUS : " + OTPmPINStatus.MailStatus);

                string[] AllAccount = _REGISTRATION_REQ.AllAccounts.Split(',');
                for (int i = 0; i <= AllAccount.Count() - 1; i++)
                {
                    _REGISTRATION_REQ.AccountNumber = (AllAccount[i]);
                    status = ProcessGenerateSelfQR(_REGISTRATION_RES, _REGISTRATION_REQ, status);
                    AllQRList.Rows.Add(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_RES.QRValue, _REGISTRATION_RES.AccountType);
                    _REGISTRATION_RES.AllAccountsQRList = AllQRList;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        private int ProcessGenerateSelfQR(REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ, int status)
        {
            try
            {
                DataTable DTBranchCity = IMPSTransactions.GET_NQRCBranchCity(_REGISTRATION_REQ.AccountNumber, out status);
                if (DTBranchCity != null && DTBranchCity.Rows.Count > 0)
                {
                    _REGISTRATION_REQ.Category = "9999";//"0"+ DTBranchCity.Rows[0][3].ToString();
                    _REGISTRATION_REQ.City = DTBranchCity.Rows[0][6].ToString();
                    _CommanDetails.SystemLogger.WriteTransLog(this, "City : " + DTBranchCity.Rows[0][6].ToString());
                }

                if (_REGISTRATION_REQ.City != "" && _REGISTRATION_REQ.Category != "" && _REGISTRATION_REQ.CustomerName != "")
                {
                    int alreadydata = -1;
                    DataTable DTNQRCExist = IMPSTransactions.GET_NQRCExistWithDetails(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.City, _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.Category, out alreadydata, _REGISTRATION_REQ.MobileNumber);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "DTNQRCExist  Count" + DTNQRCExist.Rows.Count);
                    _CommanDetails.SystemLogger.WriteTransLog(this, "DTNQRCExist  staus" + alreadydata);
                    if (alreadydata == 0)
                    {
                        string BranchCode = Convert.ToString(ConfigurationManager.AppSettings["BankQRBankCode"]) + "1";
                        _CommanDetails.SystemLogger.WriteTransLog(this, "City : " + DTBranchCity.Rows[0][6].ToString());
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Branch : " + BranchCode);
                        _REGISTRATION_REQ.typeofUser = "SelfNQRC";
                        int identifierstatus = -1;
                        DataTable DTIdentifierExist = IMPSTransactions.GET_NQRCIdentifierExistWithDetails(_REGISTRATION_REQ.AccountNumber, "SelfNQRC", out identifierstatus);
                        if (identifierstatus == 0)
                        {
                            _REGISTRATION_REQ.MerchantIdentifier = ConnectionStringEncryptDecrypt.DecryptString(DTIdentifierExist.Rows[0][5].ToString());
                        }
                        else
                        {
                            _REGISTRATION_REQ.MerchantIdentifier = MerchantPANGeneration(BranchCode, "");
                        }
                        _CommanDetails.SystemLogger.WriteTransLog(this, "MerchantIdentifier STATUS : " + _REGISTRATION_REQ.MerchantIdentifier);
                        string Additionaldata = "02" + Convert.ToString(_REGISTRATION_REQ.MobileNumber.Length).PadLeft(2, '0') + _REGISTRATION_REQ.MobileNumber.ToString();
                        string SequenceData = NQRCConfiguration.PAYLOAD_FORMAT_INDICATOR.ToString() + NQRCConfiguration.POINT_OF_INITIATION_METHOD.ToString()
                        + NQRCConfiguration.MERCHANT_IDENTIFIER.ToString() + _REGISTRATION_REQ.MerchantIdentifier
                       + NQRCConfiguration.MERCHANT_CATEGORY_CODE.ToString() + _REGISTRATION_REQ.Category
                       + NQRCConfiguration.TRANSACTION_CURRENCY_CODE.ToString() + NQRCConfiguration.COUNTRY_CODE.ToString()
                       + NQRCConfiguration.MERCHANT_NAME + Convert.ToString(_REGISTRATION_REQ.CustomerName.Length).PadLeft(2, '0')
                       + _REGISTRATION_REQ.CustomerName + NQRCConfiguration.MERCHANT_CITY
                       + Convert.ToString(_REGISTRATION_REQ.City.Length).PadLeft(2, '0')
                       + _REGISTRATION_REQ.City + NQRCConfiguration.MERCHANTADDITIONALDATA + Convert.ToString(Additionaldata.Length).PadLeft(2, '0')
                       + Additionaldata + NQRCConfiguration.MERCHANT_CRC;
                        string CRC = CalcCRC16(SequenceData);
                        _REGISTRATION_REQ.SequecnceData = SequenceData + CRC;
                        if (IMPSTransactions.INSERTSelfNQRCDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.MerchantIdentifier,
                                            _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.SequecnceData,
                                            _REGISTRATION_REQ.typeofUser, _REGISTRATION_REQ.Category,
                                             NQRCConfiguration.TRANSACTION_CURRENCY_CODE.ToString().Substring(4, 3), NQRCConfiguration.COUNTRY_CODE.ToString().Substring(4, 2), _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.City, BranchCode))
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SelfQRGenerated);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.SelfQRGenerated);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            _REGISTRATION_RES.QRValue = _REGISTRATION_REQ.SequecnceData;
                            _REGISTRATION_RES.AccountType = DTBranchCity.Rows[0][3].ToString();
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        }
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Already QR generated in DB ");
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NQRCAlreadyExist);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.NQRCAlreadyExist);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.QRValue = ConnectionStringEncryptDecrypt.DecryptString(DTNQRCExist.Rows[0]["SequecnceData"].ToString());
                        _REGISTRATION_RES.AccountType = DTBranchCity.Rows[0][3].ToString();
                    }
                }
                else
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "City/Name/Category blank ");
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                }
                return status;
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                return status;
            }
        }

            #region BhimQR

            //public void ProcessSelfBhimQRGeneration(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
            //{
            //    DataTable AllQRList = new DataTable { TableName = "QRLIST" };
            //    AllQRList.Columns.AddRange(new DataColumn[3] { new DataColumn("AccountNumber"), new DataColumn("QRValue"), new DataColumn("AccountType") });
            //    try
            //    {
            //        if (_REGISTRATION_REQ.MobileNumber.Length > 8)
            //        {
            //            _REGISTRATION_REQ.MobileNumber = _REGISTRATION_REQ.MobileNumber.Substring(3, 8);
            //        }
            //        int status = -1;
            //        //_REGISTRATION_REQ.OTP = GetRandomOTP();
            //        //_CommanDetails.SystemLogger.WriteTransLog(this, " _REGISTRATION_REQ.OTP  :" + _REGISTRATION_REQ.OTP);
            //        try
            //        {
            //            _CustomerDetails.Remove(_REGISTRATION_REQ.AccountNumber);
            //        }
            //        catch { }
            //        _CommanDetails.SystemLogger.WriteTransLog(this, "SMS STATUS : " + OTPmPINStatus.SmsStatus + "\t MAIL STATUS : " + OTPmPINStatus.MailStatus);

            //        string[] AllAccount = _REGISTRATION_REQ.AllAccounts.Split(',');
            //        for (int i = 0; i <= AllAccount.Count() - 1; i++)
            //        {
            //            _REGISTRATION_REQ.AccountNumber = (AllAccount[i]);
            //            status = ProcessGenerateSelfBhimQR(_REGISTRATION_RES, _REGISTRATION_REQ);
            //            AllQRList.Rows.Add(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_RES.QRValue, _REGISTRATION_RES.AccountType);
            //            _REGISTRATION_RES.AllAccountsQRList = AllQRList;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
            //        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
            //        _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            //    }
            //}

            public void ProcessGenerateSelfBhimQR(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            int status;
            BhimQrReqRes _BhimResp = new BhimQrReqRes();
            DataTable DTBranchCity = IMPSTransactions.GET_NQRCBranchCity(_REGISTRATION_REQ.AccountNumber, out status);
            if (DTBranchCity != null && DTBranchCity.Rows.Count > 0)
            {
                _REGISTRATION_REQ.Category = "9999";//"0"+ DTBranchCity.Rows[0][3].ToString();
                _REGISTRATION_REQ.City = DTBranchCity.Rows[0][6].ToString();
                _CommanDetails.SystemLogger.WriteTransLog(this, "City : " + DTBranchCity.Rows[0][6].ToString());
            }

            if (_REGISTRATION_REQ.City != "" && _REGISTRATION_REQ.Category != "" && _REGISTRATION_REQ.CustomerName != "")
            {
                int alreadydata = -1;
                DataTable DTNQRCExist = IMPSTransactions.GET_NQRCExistWithDetails(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.City, _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.Category, out alreadydata, _REGISTRATION_REQ.MobileNumber);
                _CommanDetails.SystemLogger.WriteTransLog(this, "DTNQRCExist  Count" + DTNQRCExist.Rows.Count);
                _CommanDetails.SystemLogger.WriteTransLog(this, "DTNQRCExist  staus" + alreadydata);
                if (alreadydata == 0)
                {
                    string BranchCode = Convert.ToString(ConfigurationManager.AppSettings["BankQRBankCode"]) + "1";
                    _CommanDetails.SystemLogger.WriteTransLog(this, "City : " + DTBranchCity.Rows[0][6].ToString());
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Branch : " + BranchCode);
                    _REGISTRATION_REQ.typeofUser = "SelfNQRC";
                    int identifierstatus = -1;
                    DataTable DTIdentifierExist = IMPSTransactions.GET_NQRCIdentifierExistWithDetails(_REGISTRATION_REQ.AccountNumber, "SelfNQRC", out identifierstatus);
                    if (identifierstatus == 0)
                    {
                        _REGISTRATION_REQ.MerchantIdentifier = ConnectionStringEncryptDecrypt.DecryptString(DTIdentifierExist.Rows[0][5].ToString());
                    }
                    else
                    {
                        _REGISTRATION_REQ.MerchantIdentifier = MerchantPANGeneration(BranchCode, "");
                    }
                    _CommanDetails.SystemLogger.WriteTransLog(this, "MerchantIdentifier STATUS : " + _REGISTRATION_REQ.MerchantIdentifier);
                    string Additionaldata = "02" + Convert.ToString(_REGISTRATION_REQ.MobileNumber.Length).PadLeft(2, '0') + _REGISTRATION_REQ.MobileNumber.ToString();
                    string SequenceData = NQRCConfiguration.PAYLOAD_FORMAT_INDICATOR.ToString() + NQRCConfiguration.POINT_OF_INITIATION_METHOD.ToString()
                    + NQRCConfiguration.MERCHANT_IDENTIFIER.ToString() + _REGISTRATION_REQ.MerchantIdentifier
                   + NQRCConfiguration.MERCHANT_CATEGORY_CODE.ToString() + _REGISTRATION_REQ.Category
                   + NQRCConfiguration.TRANSACTION_CURRENCY_CODE.ToString() + NQRCConfiguration.COUNTRY_CODE.ToString()
                   + NQRCConfiguration.MERCHANT_NAME + Convert.ToString(_REGISTRATION_REQ.CustomerName.Length).PadLeft(2, '0')
                   + _REGISTRATION_REQ.CustomerName + NQRCConfiguration.MERCHANT_CITY
                   + Convert.ToString(_REGISTRATION_REQ.City.Length).PadLeft(2, '0')
                   + _REGISTRATION_REQ.City + NQRCConfiguration.MERCHANTADDITIONALDATA + Convert.ToString(Additionaldata.Length).PadLeft(2, '0')
                   + Additionaldata + NQRCConfiguration.MERCHANT_CRC;
                    string CRC = CalcCRC16(SequenceData);
                    _REGISTRATION_REQ.SequecnceData = SequenceData + CRC;
                    if (IMPSTransactions.INSERTSelfNQRCDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.MerchantIdentifier,
                                        _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.SequecnceData,
                                        _REGISTRATION_REQ.typeofUser, _REGISTRATION_REQ.Category,
                                         NQRCConfiguration.TRANSACTION_CURRENCY_CODE.ToString().Substring(4, 3), NQRCConfiguration.COUNTRY_CODE.ToString().Substring(4, 2), _REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.City, BranchCode))
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SelfQRGenerated);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.SelfQRGenerated);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.QRValue = _REGISTRATION_REQ.SequecnceData;
                        _REGISTRATION_RES.AccountType = DTBranchCity.Rows[0][3].ToString();
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                }
                else
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Already QR generated in DB ");
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.NQRCAlreadyExist);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.NQRCAlreadyExist);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    //_REGISTRATION_RES.QRValue = ConnectionStringEncryptDecrypt.DecryptString(DTNQRCExist.Rows[0]["SequecnceData"].ToString());
                    // _REGISTRATION_RES.AccountType = DTBranchCity.Rows[0][3].ToString();
                    _REGISTRATION_REQ.MerchantIdentifier = ConnectionStringEncryptDecrypt.DecryptString(DTNQRCExist.Rows[0]["MerchantIdentifier"].ToString());
                }

                #region SendReqToBhim

                try
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, " MerchantIdentifier : " + _REGISTRATION_REQ.MerchantIdentifier);
                    BhimQrReq request = new BhimQrReq()
                    {
                        MerchantName = _REGISTRATION_REQ.CustomerName,

                        MerchantCode = _REGISTRATION_REQ.MerchantIdentifier,//details[1],//

                        MerchantAccountNumber = _REGISTRATION_REQ.AccountNumber,

                        MerchantMobileNumber = _REGISTRATION_REQ.MobileNumber,


                        MerchantBankCode = ConfigurationManager.AppSettings["BankCode"].ToString(),//ConfigurationManager.AppSettings["BHIMOrgId"].ToString(),//details[4],


                        MerchantBankName = ConfigurationManager.AppSettings["BankName"].ToString(),


                        MerchantCID = _REGISTRATION_REQ.CustomerID,


                        MerchantAddress = "BHUTAN",

                        STATE = "BHUTAN",

                        MerchantCategory = NQRCConfiguration.MERCHANT_CATEGORY_CODE.ToString(),
                        //MerchantCategory = dt.Rows[0]["MerchantCategory"].ToString(),

                        ReqSrc = "MOBILE",

                        ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber,


                    };

                    string BHIMLink = ConfigurationManager.AppSettings["BhimQRCODE"].ToString();
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;
                    System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object sender1, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
                    { return true; };
                    HttpClient clientSave = new HttpClient();
                    clientSave.BaseAddress = new Uri(BHIMLink);
                    clientSave.DefaultRequestHeaders.Accept.Clear();
                    clientSave.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                    //// Live Details
                    clientSave.DefaultRequestHeaders.Add("Authorization", "Basic bWF4cXJiaGFyYXQ6TUB4UVI=");
                    string EmpSaveResponse = string.Empty;
                    var Saveresponse = clientSave.PostAsJsonAsync("", request).Result;
                    string _QRResponse = Saveresponse.Content.ReadAsStringAsync().Result;
                    _CommanDetails.SystemLogger.WriteTransLog(this, "BHIM QR Response : " + _QRResponse);
                    _BhimResp = JS.Deserialize<BhimQrReqRes>(_QRResponse);
                    if (_BhimResp.ResponseCode == "00")
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, " if BHIM QR Response is 00: ");
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BHIMQRGenerated);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.BHIMQRGenerated);
                        _CommanDetails.SystemLogger.WriteTransLog(this, " ResponseCode :  " + _REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.QRValue = _BhimResp.QrData.ToString();
                    }
                    else if (_BhimResp.ResponseCode == "01")
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, " if BHIM QR Response is 01: ");
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.BHIMQRAlreadyExist);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.BHIMQRAlreadyExist);
                        _CommanDetails.SystemLogger.WriteTransLog(this, " ResponseCode :  " + _REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        _REGISTRATION_RES.QRValue = _BhimResp.QrData.ToString();
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    }
                }
                catch (Exception ex)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                }

                #endregion SendReqToBhim
            }
            else
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "City/Name/Category blank ");

                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
            }
            //return status;
        }

        #endregion BhimQR

        public string CalcCRC16(string strInput)
        {
            ushort crc = 0xFFFF;
            // byte[] data = GetBytesFromHexString(strInput);
            byte[] data = Encoding.ASCII.GetBytes(strInput);
            for (int i = 0; i < data.Length; i++)
            {
                crc ^= (ushort)(data[i] << 8);
                for (int j = 0; j < 8; j++)
                {
                    if ((crc & 0x8000) > 0)
                        crc = (ushort)((crc << 1) ^ 0x1021);
                    else
                        crc <<= 1;
                }
            }
            return crc.ToString("X4");
        }

        public string getCardWithCheckSum(string cardwithoutchksum)
        {
            string getnum = cardwithoutchksum;
            int b1 = Convert.ToInt32(getnum.Substring(1, 1));
            int b2 = Convert.ToInt32(getnum.Substring(3, 1));
            int b3 = Convert.ToInt32(getnum.Substring(5, 1));
            int b4 = Convert.ToInt32(getnum.Substring(7, 1));
            int b5 = Convert.ToInt32(getnum.Substring(9, 1));
            int b6 = Convert.ToInt32(getnum.Substring(11, 1));
            int b7 = Convert.ToInt32(getnum.Substring(13, 1));
            int a1 = 2 * (Convert.ToInt32(getnum.Substring(0, 1)));
            if (a1.ToString().Length > 1) { a1 = Convert.ToInt32(a1.ToString().Substring(0, 1)) + Convert.ToInt32(a1.ToString().Substring(1, 1)); }
            int a2 = 2 * (Convert.ToInt32(getnum.Substring(2, 1)));
            if (a2.ToString().Length > 1) { a2 = Convert.ToInt32(a2.ToString().Substring(0, 1)) + Convert.ToInt32(a2.ToString().Substring(1, 1)); }
            int a3 = 2 * (Convert.ToInt32(getnum.Substring(4, 1)));
            if (a3.ToString().Length > 1) { a3 = Convert.ToInt32(a3.ToString().Substring(0, 1)) + Convert.ToInt32(a3.ToString().Substring(1, 1)); }
            int a4 = 2 * (Convert.ToInt32(getnum.Substring(6, 1)));
            if (a4.ToString().Length > 1) { a4 = Convert.ToInt32(a4.ToString().Substring(0, 1)) + Convert.ToInt32(a4.ToString().Substring(1, 1)); }
            int a5 = 2 * (Convert.ToInt32(getnum.Substring(8, 1)));
            if (a5.ToString().Length > 1) { a5 = Convert.ToInt32(a5.ToString().Substring(0, 1)) + Convert.ToInt32(a5.ToString().Substring(1, 1)); }
            int a6 = 2 * (Convert.ToInt32(getnum.Substring(10, 1)));
            if (a6.ToString().Length > 1) { a6 = Convert.ToInt32(a6.ToString().Substring(0, 1)) + Convert.ToInt32(a6.ToString().Substring(1, 1)); }
            int a7 = 2 * (Convert.ToInt32(getnum.Substring(12, 1)));
            if (a7.ToString().Length > 1) { a7 = Convert.ToInt32(a7.ToString().Substring(0, 1)) + Convert.ToInt32(a7.ToString().Substring(1, 1)); }
            int a8 = 2 * (Convert.ToInt32(getnum.Substring(14, 1)));
            if (a8.ToString().Length > 1) { a8 = Convert.ToInt32(a8.ToString().Substring(0, 1)) + Convert.ToInt32(a8.ToString().Substring(1, 1)); }
            string data = a1.ToString() + b1.ToString() + a2.ToString() + b2.ToString() + a3.ToString() + b3.ToString() + a4.ToString() + b4.ToString() + a5.ToString() + b5.ToString() + a6.ToString() + b6.ToString() + a7.ToString() + b7.ToString() + a8.ToString();
            int check = a1 + b1 + a2 + b2 + a3 + b3 + a4 + b4 + a5 + b5 + a6 + b6 + a7 + b7 + a8;
            int test = check % 10;
            int getd = (10 - test) % 10;
            string cardno = cardwithoutchksum.ToString() + getd.ToString();
            return cardno;
        }

        public string MerchantPANGeneration(string BranchCode, string identifier)
        {
            string MerchantPAN = string.Empty;
            string MerchantBIN = string.Empty;
            int status = -1;
            MerchantBIN = Convert.ToString(ConfigurationManager.AppSettings["BankQRBIN"]);
            DataTable DTMerchantPAN = IMPSTransactions.GetPANDetails(identifier, BranchCode, "1", out status);// loadData(string.Empty, string.Empty, string.Empty, DateTime.Now.ToString("yyyyMMddhhmmss"), Convert.ToString(Session["Username"]), string.Empty, ddlMerchantCategory.SelectedValue.ToString());
            _CommanDetails.SystemLogger.WriteTransLog(this, "DTMerchantPAN" + DTMerchantPAN.Rows.Count);
            //if (DTMerchantPAN != null)
            //{

            for (int i = 0; i < DTMerchantPAN.Rows.Count; i++)
            {
                DTMerchantPAN.Rows[i][1] = ConnectionStringEncryptDecrypt.DecryptString(Convert.ToString(DTMerchantPAN.Rows[i][0]));
            }

            string _Series = DTMerchantPAN.Rows.Count == 0 ? "000001" : Convert.ToString(Convert.ToInt32(DTMerchantPAN.Compute("MAX(ClearPAN)", "").ToString().Substring(9, 6)));

            string ComputeSeries = (Convert.ToInt32(_Series) + 1).ToString().PadLeft(6, '0');



            MerchantPAN = MerchantBIN + BranchCode + ComputeSeries;

            MerchantPAN = getCardWithCheckSum(MerchantPAN);

            if (MerchantPAN.Length == 16)
            {
            Loop: DataTable SerialData = SerialloadData(MerchantPAN, BranchCode);

                if (SerialData != null)
                {
                    if (SerialData.Rows.Count.ToString() != "0")
                    {
                        _Series = (Convert.ToInt32(_Series) + 1).ToString();
                        MerchantPAN = MerchantBIN + BranchCode + _Series;
                        MerchantPAN = getCardWithCheckSum(MerchantPAN);
                        SerialData = null;
                        goto Loop;
                    }
                }
            }
            // }
            return MerchantPAN;
        }

        public DataTable SerialloadData(string PAN, string BranchCode)
        {
            DataTable DTSerial = null;
            int status = -1;
            DataTable DTMerchantPAN = IMPSTransactions.GetPANDetails(PAN, BranchCode, "2", out status);//

            return DTSerial;
        }

        public DataTable BTBROADBANDPLANS(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            DataTable _PLANS = new DataTable();
            try
            {
                GET_BTBROADBANDPLANS(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
            return _PLANS;
        }

        public void GET_BTBROADBANDPLANS(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                int TransType = -1;

                TransType = (int)enumTransactionType.BalanceEnquiry;

                int status = -1;
                DataTable Dtaccountdetails = null;
                Dtaccountdetails = IMPSTransactions.BTPLANS();
                _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _MOBILEBANKING_RESP.PLANS = Dtaccountdetails;
                if (_MOBILEBANKING_RESP.PLANS != null && _MOBILEBANKING_RESP.PLANS.Rows.Count > 0)
                    _MOBILEBANKING_RESP.PLANS.TableName = "PLANS";

            }
            catch (Exception ex)
            {
                _MOBILEBANKING_RESP.PLANS = null;
                //_MOBILEBANKING_RESP.ListOfCustomerID.TableName = "ListOfCustomerID";
                _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ForgotMpin_WITHOUTATM(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int status = -1;
                DataTable DTCustomerdata = new DataTable();
                DTCustomerdata = null;
                IMPSTransactions.VALIDATESIGNUP(_REGISTRATION_REQ.ReferenceNumber, (int)enumCycle.SignUp, out status);
                if (status != 0)
                {

                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.DuplicateTransaction);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                else
                {

                    IMPSTransactions.VERIFYCUSTOMERDATA_FP(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.DeviceID, out status);
                    if (status != 0)
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.WrongAccountNo);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    DTCustomerdata = IMPSTransactions.VERIFYCUSTOMERDATA(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out status);


                    if (status != 0)
                    {

                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                        _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                        _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                        return;
                    }
                    else
                    {
                        int statusF = -1;
                        _REGISTRATION_REQ.RegMobileNumber = "975" + _REGISTRATION_REQ.RegMobileNumber;

                        _CommanDetails.SystemLogger.WriteTransLog(this, "Mobile Number( _REGISTRATION_REQ.RegMobileNumber):" + _REGISTRATION_REQ.RegMobileNumber);

                        DataTable DT_Details = IMPSTransactions.GET_FORGOTMPINDTL(_REGISTRATION_REQ.CustomerID, _REGISTRATION_REQ.RegMobileNumber, out statusF);

                        _CommanDetails.SystemLogger.WriteTransLog(this, "statusF " + statusF);
                        if (statusF == 0)
                        {
                            string CID = DT_Details.Rows[0][2].ToString();
                            if (CID == _REGISTRATION_REQ.NationalID)
                            {

                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;

                            }
                            else
                            {

                                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.WrongCID);
                                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                                return;
                            }
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.WrongMobileNo);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void STOPCHEQUEPAYMENT(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int statusF = 0; //added by sk
                                 //commented by sk
                                 // int statusF = -1;
                                 //  DataTable DT_STOPCHEQUEDETAILS = IMPSTransactions.GET_STOPCHEQUEDETAILS(_REGISTRATION_REQ.AccountNumber, out statusF);
                if (statusF == 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                }
                if (statusF == -1)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                if (statusF == 14)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Nochequeisissued);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public void CHEQUEBOOKBLOCKLIST(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int statusF = -1;
                DataTable DT_CHEQUEBOOKBLOCKLIST = IMPSTransactions.GET_CHEQUEBOOKBLOCK(_REGISTRATION_REQ.AccountNumber, out statusF);
                if (statusF == 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.ChequeBookblockList = DT_CHEQUEBOOKBLOCKLIST;
                }
                if (statusF == -1)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                if (statusF == 14)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Nochequeisissued);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public void CHEQUEBOOKBLOCK(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {

                if (IMPSTransactions.INSERT_CHEQUEBOOKBLOCK(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.CustomerName, _REGISTRATION_REQ.ChequeStartNumber, _REGISTRATION_REQ.ChequeEndNumber, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, "INSERT", _REGISTRATION_REQ.CHEQUEISSUEDATE))
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;

                }
                else
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public void RELESECHEQUEPAYMENTLIST(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            try
            {
                int statusF = -1;
                DataTable DT_RELESECHEQUEDETAILS = IMPSTransactions.GET_RELESECHEQUEDETAILS(_REGISTRATION_REQ.AccountNumber, out statusF);
                if (statusF == 0)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    _REGISTRATION_RES.ChequeBookReleseList = DT_RELESECHEQUEDETAILS;

                }
                if (statusF == -1)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IssuerDown);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
                if (statusF == 14)
                {
                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Nochequeisissued);
                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                    _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                    _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                    _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.MobileNumber;
                    return;
                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }

        }

        public DataTable GetCustomerTable(REGISTRATION_REQ RequestMsg, REGISTRATION_RES ResponseMsg)
        {
            DataTable _dt = null;
            try
            {
                _dt = new DataTable();
                _dt.Columns.Add("cust_no", typeof(string));
                _dt.Columns.Add("cust_ac_no", typeof(string));
                _dt.Columns.Add("account_type", typeof(string));
                _dt.Columns.Add("first_name", typeof(string));
                _dt.Columns.Add("last_name", typeof(string));
                _dt.Columns.Add("date_of_birth", typeof(string));
                _dt.Columns.Add("mobile_number", typeof(string));
                _dt.Columns.Add("e_mail", typeof(string));
                _dt.Columns.Add("regtype", typeof(string));
                _dt.Columns.Add("CCY", typeof(string));
                _dt.Columns.Add("InfoValue", typeof(string));
                _dt.Columns.Add("InfoType", typeof(string));
                string[] SplitCustomerName = ResponseMsg.CustomerName.Split(' ');
                _CommanDetails.SystemLogger.WriteTransLog(this, "customer name recieved from cbs : " + ResponseMsg.CustomerName);
                _CommanDetails.SystemLogger.WriteTransLog(this, "customer name recieved from cbs : " + ResponseMsg.CustomerName);
                //_dt.Rows.Add(ResponseMsg.CustomerID, ResponseMsg.AccountNumber, ResponseMsg.AccountType
                //    , (SplitCustomerName.Length > 0 ? SplitCustomerName[0] : ResponseMsg.CustomerName), (SplitCustomerName.Length > 0 ? SplitCustomerName[1] : ResponseMsg.CustomerName)
                //    , RequestMsg.DOB, ResponseMsg.MobileNumber, ResponseMsg.EmailID, ResponseMsg.AccountType, "BTN", RequestMsg.InfoValue, RequestMsg.InfoType);

                _dt.Rows.Add(ResponseMsg.CustomerID,
                    ResponseMsg.AccountNumber,
                    ResponseMsg.AccountType,
                    ResponseMsg.CustomerName,
                    ResponseMsg.CustomerName,
                    RequestMsg.DOB,
                    ResponseMsg.MobileNumber,
                    ResponseMsg.EmailID,
                    (ResponseMsg.AccountType == "SAVING" ? "S" : ResponseMsg.AccountType == "CURRENT" ? "C" : ResponseMsg.AccountType == "OVERDRAFT" ? "O" : ResponseMsg.AccountType == "LOAN" ? "L" : ResponseMsg.AccountType == "TERMDEPOSIT" ? "T" : "J")
                    , "BTN", RequestMsg.InfoValue, RequestMsg.InfoType);
            }
            catch (Exception ex)
            { _CommanDetails.SystemLogger.WriteErrorLog(this, ex); _dt = null; }
            return _dt;
        }

        public string Reverse(string text)
        {
            if (text == null) return null;

            // this was posted by petebob as well 
            char[] array = text.ToCharArray();
            Array.Reverse(array);
            return new String(array);
        }

        #region Process Transactions

        public void ProcessBalanceEnquiry(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                DataTable _accountValidation = IMPSTransactions.ValidateAccount(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.ReferenceNumber);
                if (_accountValidation.Rows.Count > 0)
                { _MOBILEBANKING_REQ.ACCOUNTCREATIONTYPE = (Convert.ToString(_accountValidation.Rows[0][1]) == "SAVING" ? "1" : "2"); }
                else
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Invalid Account For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return;
                }
                _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                _ProcessHost.ProcessBalanceinquiryToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessBalanceEnquiry For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessMiniStatement(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                DataTable _accountValidation = IMPSTransactions.ValidateAccount(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.ReferenceNumber);
                if (_accountValidation.Rows.Count > 0)
                { _MOBILEBANKING_REQ.ACCOUNTCREATIONTYPE = (Convert.ToString(_accountValidation.Rows[0][1]) == "SAVING" ? "1" : "2"); }
                else
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("***** Invalid Account For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine + Environment.NewLine + Environment.NewLine + Environment.NewLine));
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidUser);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return;
                }
                _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                _ProcessHost.ProcessMinistatementToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessMiniStatement For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.AmountAvailable) || _MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.FtLimit))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedAmountLimit);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedAmountLimit);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Excced Amount Limit For Reference Number :  " + _MOBILEBANKING_REQ.ReferenceNumber));
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return;
                    }

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    int StatusUserExist = -1;
                    DataTable DTGetBeneficaryDetail = IMPSTransactions.GetBeneficiaryByMob(_MOBILEBANKING_REQ.BENIFICIARYACC, out StatusUserExist);
                    if (StatusUserExist != 0)
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        return;
                    }
                    _MOBILEBANKING_REQ.BENIFICIARYACC = DTGetBeneficaryDetail.Rows[0]["ACCOUNTNUMBER"].ToString();
                }
                if (_MOBILEBANKING_REQ.TransType == enumTransactionType.SCHEDULEPAYMENT.ToString())
                {
                    _Authentication.TransactionStatus = enumTransactionStatus.Successful;
                }
                else
                {
                    //if(ConfigurationManager.AppSettings["SkipTpin"]=="False")
                   // {
                        _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                   // }
                    //else
                    //{
                    //    _Authentication.TransactionStatus = enumTransactionStatus.Successful;
                    //}
                }
                //_Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                //_SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                    _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                    _ProcessHost.ProcessFundTransferToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    if (_MOBILEBANKING_REQ.IsAccountFT)
                    {
                        TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    else if (_MOBILEBANKING_REQ.IsMobileFT)
                    {
                        TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    return;
                }
                if (_MOBILEBANKING_RESP.ResponseCode == "00")
                {
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string PayerAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 4, 4);
                    string PayeeAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + "," + System.DateTime.Now.ToString("hh:mm:ss tt");
                    _MOBILEBANKING_RESP.BENIFICIARYACC = _MOBILEBANKING_REQ.BENIFICIARYACC;
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Payer", PayerAccountNumber).Replace("@PayeeAcc", PayeeAccountNumber).Replace("@Name", _MOBILEBANKING_REQ.BENIFICIARYNAME).Replace("@Amount", amount).Replace("@MSGID", _MOBILEBANKING_RESP.ReferenceNumber).Replace("@BankName", "DrukPNB").Replace("@Remark", _MOBILEBANKING_REQ.Remark).Trim() + time + "\\n" + "Intra Fund Transfer" + "\n" + " via DrukPay.";
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                    var task = Task.Factory.StartNew(() =>
                    {
                        _MOBILEBANKING_REQ.QRUniquePANNumber = _MOBILEBANKING_REQ.BENIFICIARYACC;
                        SoundboxAsync(_MOBILEBANKING_REQ);
                    });
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessFundTransfer For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void BillProcessFundTransfer(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    if (_MOBILEBANKING_REQ.IsAccountFT)
                    {
                        TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    else if (_MOBILEBANKING_REQ.IsMobileFT)
                    {
                        TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    ////DB hit
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                }
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                }

                _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                // commented to chk add account transfer
                // _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                    _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                    _ProcessHost.BillProcessFundTransferToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    if (_MOBILEBANKING_REQ.IsAccountFT)
                    {
                        TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    else if (_MOBILEBANKING_REQ.IsMobileFT)
                    {
                        TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    }
                    return;
                }
                if (_MOBILEBANKING_REQ.IsAccountFT)
                {
                    TransactionIntraFundTransforACC((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                }
                else if (_MOBILEBANKING_REQ.IsMobileFT)
                {
                    TransactionIntraFundTransforMobile((int)enumCommandTypeEnum.AuthorizationRequestMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                }

                UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessFundTransfer For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessOutwardTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.ACQAmountAvailable) || _MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.ACQFtLimit))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedAmountLimit);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedAmountLimit);
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Excced Amount Limit For Reference Number :  " + _MOBILEBANKING_REQ.ReferenceNumber));
                        return;
                    }

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    ////DB hit
                    TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }

                TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                if (_MOBILEBANKING_REQ.TransType == enumTransactionType.SCHEDULEPAYMENT.ToString())
                {
                    _Authentication.TransactionStatus = enumTransactionStatus.Successful;
                }
                else
                {
                    //_Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                    //// _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                    //_SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                   // if (ConfigurationManager.AppSettings["SkipTpin"] == "False")
                    //{
                        _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                   // }
                    //else
                    //{
                    //    _Authentication.TransactionStatus = enumTransactionStatus.Successful;
                    //}
                }
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {

                    //_MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                    //  _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(_MOBILEBANKING_REQ.Merchantidentifier + "9999999999").PadRight(16, '0');
                    _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(_MOBILEBANKING_REQ.Merchantidentifier + "8888888888").PadRight(16, '0');

                    _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                    string RemitterName = (_MOBILEBANKING_REQ.REMITTERNAME.Length > 20 ? _MOBILEBANKING_REQ.REMITTERNAME.Substring(0, 20) : _MOBILEBANKING_REQ.REMITTERNAME);
                    string BeneficieryName = (_MOBILEBANKING_REQ.BENIFICIARYNAME.Length > 20 ? _MOBILEBANKING_REQ.BENIFICIARYNAME.Substring(0, 20) : _MOBILEBANKING_REQ.BENIFICIARYNAME);
                    string Remarks = (_MOBILEBANKING_REQ.Remark.Length > 20 ? _MOBILEBANKING_REQ.Remark.Substring(0, 20) : _MOBILEBANKING_REQ.Remark);
                    _MOBILEBANKING_REQ.ResponseData = "001003003002006MOBILE"
                                                    + "003" + Convert.ToString(RemitterName.Length).PadLeft(3, '0') + RemitterName
                                                    + "004" + Convert.ToString(BeneficieryName.Length).PadLeft(3, '0') + BeneficieryName
                                                    + "005" + Convert.ToString(Remarks.Length).PadLeft(3, '0') + Remarks
                                                    //+ "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber
                                                    //+ "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber
                                                    + "006" + Convert.ToString(_MOBILEBANKING_REQ.LastTransactionReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.LastTransactionReferenceNumber
                                                    + "007" + "006" + CONFIGURATIONCONFIGDATA.BankBIN
                                                    + "008" + "004" + _MOBILEBANKING_REQ.BankCode
                                                    + "009" + "004" + _MOBILEBANKING_REQ.AcquirerBankID;
                    _ProcessHost.ProcessOutwardTransactionToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return;
                }
                if (_MOBILEBANKING_RESP.ResponseCode == "00")
                {
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string PayerAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 4, 4);
                    string PayeeAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + "," + System.DateTime.Now.ToString("hh:mm:ss tt");
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Payer", PayerAccountNumber).Replace("@PayeeAcc", PayeeAccountNumber).Replace("@Name", _MOBILEBANKING_REQ.BENIFICIARYNAME).Replace("@Amount", amount).Replace("@MSGID", _MOBILEBANKING_RESP.ReferenceNumber).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Trim() + time + "\\n" + "Bips Fund Transfer " + "\n" + " via DrukPay.";
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }

            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessOutwardTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessRechargeTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);

                _CommanDetails.SystemLogger.WriteTransLog(this, "Status : " + status);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.AmountAvailable) || _MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.FtLimit))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedAmountLimit);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedAmountLimit);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Excced Amount Limit For Reference Number :  " + _MOBILEBANKING_REQ.ReferenceNumber));
                        return;
                    }

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    ////DB hit
                    TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }

                TransactionOutwardFundTransfer((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 7);
                _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                //_SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(CONFIGURATIONCONFIGDATA.BankBIN + _MOBILEBANKING_REQ.REMITTERACC).PadRight(16, '0');
                    _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                    string RemitterName = (_MOBILEBANKING_REQ.REMITTERNAME.Length > 20 ? _MOBILEBANKING_REQ.REMITTERNAME.Substring(0, 20) : _MOBILEBANKING_REQ.REMITTERNAME);
                    string BeneficieryName = (_MOBILEBANKING_REQ.BENIFICIARYNAME.Length > 20 ? _MOBILEBANKING_REQ.BENIFICIARYNAME.Substring(0, 20) : _MOBILEBANKING_REQ.BENIFICIARYNAME);
                    string Remarks = (_MOBILEBANKING_REQ.Remark.Length > 20 ? _MOBILEBANKING_REQ.Remark.Substring(0, 20) : _MOBILEBANKING_REQ.Remark);
                    _MOBILEBANKING_REQ.ResponseData = "001003003002006MOBILE"
                                                    + "003" + Convert.ToString(RemitterName).PadLeft(3, '0') + RemitterName
                                                    + "004" + Convert.ToString(BeneficieryName.Length).PadLeft(3, '0') + BeneficieryName
                                                    + "005" + Convert.ToString(Remarks).PadLeft(3, '0') + Remarks
                                                    + "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber
                                                    + "007" + "006" + CONFIGURATIONCONFIGDATA.BankBIN
                                                    + "008" + "004" + _MOBILEBANKING_REQ.BankCode
                                                    + "009" + "004" + _MOBILEBANKING_REQ.AcquirerBankID;
                    _CommanDetails.SystemLogger.WriteTransLog(this, "_MOBILEBANKING_REQ.ResponseData : " + _MOBILEBANKING_REQ.ResponseData);
                    _ProcessHost.ProcessRechargeTransactionToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    return;
                }
                UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessRechargeTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessNQRCTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.ACQAmountAvailable) || _MOBILEBANKING_REQ.TXNAMT > Convert.ToInt32(_MOBILEBANKING_REQ.ACQFtLimit))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.ExceedAmountLimit);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.ExceedAmountLimit);
                        _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Excced Amount Limit For Reference Number :  " + _MOBILEBANKING_REQ.ReferenceNumber));
                        return;
                    }

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    ////DB hit
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                _MOBILEBANKING_REQ.FundTransferType = "NQRC-OUT /" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.BENIFICIARYNAME.Trim() + "/" + "0000000000";
                _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                // _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);   
                _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    _MOBILEBANKING_REQ.BENIFICIARYACC = _MOBILEBANKING_REQ.Merchantidentifier;
                    string RemitterName = (_MOBILEBANKING_REQ.REMITTERNAME.Length > 20 ? _MOBILEBANKING_REQ.REMITTERNAME.Substring(0, 20) : _MOBILEBANKING_REQ.REMITTERNAME);
                    string BeneficieryName = (_MOBILEBANKING_REQ.BENIFICIARYNAME.Length > 20 ? _MOBILEBANKING_REQ.BENIFICIARYNAME.Substring(0, 20) : _MOBILEBANKING_REQ.BENIFICIARYNAME);
                    string Remarks = (_MOBILEBANKING_REQ.Remark.Length > 20 ? _MOBILEBANKING_REQ.Remark.Substring(0, 20) : _MOBILEBANKING_REQ.Remark);
                    _MOBILEBANKING_REQ.ResponseData = "001003003002002QR"
                                                    + "003" + Convert.ToString(RemitterName.Length).PadLeft(3, '0') + RemitterName
                                                    + "004" + Convert.ToString(BeneficieryName.Length).PadLeft(3, '0') + BeneficieryName
                                                    + "005" + Convert.ToString(Remarks.Length).PadLeft(3, '0') + Remarks
                                                    //changed for checking last rrn (added on 30-11-22)
                                                    + "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber//LastTransactionReferenceNumber
                                                                                                                                                                              //+ "006" + Convert.ToString(_MOBILEBANKING_REQ.LastTransactionReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.LastTransactionReferenceNumber//LastTransactionReferenceNumber
                                                    + "007" + "006" + "123456"
                                                    + "008" + "004" + _MOBILEBANKING_REQ.BankCode
                                                    + "009" + "008" + _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 8);
                    _ProcessHost.ProcessNQRCOutwardTransactionToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    return;
                }
                if (_MOBILEBANKING_RESP.ResponseCode == "00")
                {
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string PayerAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 4, 4);
                    string PayeeAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + "," + System.DateTime.Now.ToString("hh:mm:ss tt");
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Payer", PayerAccountNumber).Replace("@PayeeAcc", PayeeAccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName).Replace("@Amount", amount).Replace("@MSGID", _MOBILEBANKING_RESP.ReferenceNumber).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Trim() + time + "\\n" + "Bips/NQRC Fund Transfer" + "\n" + " via DrukPay.";
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }
                // UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessNQRCTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessInwardTransaction(ref MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg)
        {
            try
            {
                MOBILEBANKING_REQ _MOBILEBANKING_REQ = new MOBILEBANKING_REQ();
                //DataTable LastRRN = new DataTable();
                //LastRRN = null;
                //TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);
                RequestMsg.TransactionMode = MaxiSwitch.API.Terminal.enumModeOfTransaction.Issuer;
                RequestMsg.CardScheme = MaxiSwitch.API.Terminal.enumCardScheme.BFS;
                RequestMsg.TransSource = MaxiSwitch.API.Terminal.enumTransactionSource.NFS;

                if (RequestMsg.ProcessingCode.Substring(0, 2) == "34")
                {
                    RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.AccountVerification;
                    RequestMsg.DeliveryChannel = "BWY";
                    RequestMsg.AadharNumber = "PG";
                }

                else if (RequestMsg.ProcessingCode.Substring(0, 2) == "10")
                {
                    RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Debit;
                    RequestMsg.DeliveryChannel = "IMP";
                    RequestMsg.AadharNumber = "PG";
                    //RequestMsg.MiniStateMentData = "P2A/0000|IMPS-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "000000000";
                }

                //Commented by krn on 01-12-22 for Checking last transaction RRN
                //else if (RequestMsg.ProcessingCode.Substring(0, 2) == "26")
                //{
                //    RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Credit;
                //    RequestMsg.DeliveryChannel = "IMP";
                //    RequestMsg.AadharNumber = "BPIS";
                //    RequestMsg.BeneficiaryBankName = RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 14, 4);

                //    RequestMsg.MiniStateMentData = "P2A/0000|IMPS-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "000000000";
                //}

                //Added On 01-12-22 by krn For Checking last transaction RRN
                else if (RequestMsg.ProcessingCode.Substring(0, 2) == "26")
                {
                    //added on 01-12-22
                    // RequestMsg.ReferenceNumber = IMPSTransactions.VERIFYLASTRRN(RequestMsg.TerminalID, 2);  VERIFYLASTInwardRRN
                    //RequestMsg.ReferenceNumber = IMPSTransactions.VERIFYLASTInwardRRN(RequestMsg.TerminalID, 2);  
                    #region commented as per rma
                    //LastRRN = null;
                    //var LastRefNo = string.Empty;
                    //LastRefNo = RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 50).ToString();
                    //LastRefNo = LastRefNo.Substring(6, 12).ToString();
                    //LastRRN = IMPSTransactions.GetRRNCheck(LastRefNo, RequestMsg.FromAccountNumber, "BIPSInwardTransaction", "select");
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "lastAccVerification RefrenceNumber :- " + LastRefNo);
                    //if (LastRRN.Rows.Count < 0)
                    //{
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "inside bips credit request :- " + RequestMsg.MiniStateMentData + "REference Number :- " + RequestMsg.ReferenceNumber);
                    //    RequestMsg.ResponseCode = "14";
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "InvalidBeneficary " + "ReferenceNumber" + RequestMsg.TransactionRefrenceNumber);
                    //    TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);
                    //    RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AccountingAuthorizationResponseMessage;
                    //    return;
                    //}
                    #endregion commented as per rma
                    RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Credit;
                    RequestMsg.DeliveryChannel = "IMP";
                    RequestMsg.AadharNumber = "BPIS";
                    RequestMsg.BeneficiaryBankName = RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 14, 4);
                    RequestMsg.MiniStateMentData = "P2A/0000|IMPS-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "000000000";
                }

                else if (RequestMsg.ProcessingCode.Substring(0, 2) == "28")
                {
                    //LastRRN = null;
                    //var LastRefNo = string.Empty;
                    //LastRefNo = RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 54).ToString();
                    //LastRefNo = LastRefNo.Substring(6, 12).ToString();
                    //_CommanDetails.SystemLogger.WriteTransLog(this, "lastQrVerification RefrenceNumber :- " + LastRefNo);
                    //var LastRefNo = string.Empty;
                    //LastRefNo = RequestMsg.MiniStateMentData;
                    //RequestMsg.ReferenceNumber = IMPSTransactions.VERIFYLASTRRN(RequestMsg.TerminalID, 2);//added on 01-12-22 to get last verification rrn
                    //RequestMsg.ReferenceNumber = IMPSTransactions.VERIFYLASTInwardRRN(RequestMsg.TerminalID, 2);
                    RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Credit;
                    DataTable DTNQRCAccountNumber = null;
                    DTNQRCAccountNumber = IMPSTransactions.GetNQRCPrimaryAccount(RequestMsg.ToAccountNumber);
                    // RequestMsg.DeliveryChannel = "NQR";
                    RequestMsg.DeliveryChannel = "BWY";
                    RequestMsg.AadharNumber = "NQRC";
                    RequestMsg.BeneficiaryBankName = RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 18, 4);
                    RequestMsg.TerminalData = RequestMsg.ToAccountNumber.ToString();
                    RequestMsg.MiniStateMentData = "NQRC-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "0000000000";
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Mini statement Data :- " + RequestMsg.MiniStateMentData);
                    if (DTNQRCAccountNumber.Rows.Count > 0)
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Inside if Condition :- " + RequestMsg.MiniStateMentData);
                        RequestMsg.ToAccountNumber = Convert.ToString(DTNQRCAccountNumber.Rows[0][0]);
                        _CommanDetails.SystemLogger.WriteTransLog(this, "To Account Number :- " + RequestMsg.ToAccountNumber);
                    }
                    else
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "inside else:- " + RequestMsg.ToAccountNumber);
                        RequestMsg.ResponseCode = "14";
                        _CommanDetails.SystemLogger.WriteTransLog(this, "DTNQRCAccountNumber BENIFICIARYACC Null" + DTNQRCAccountNumber.Rows.Count.ToString() + "Reference Number : " + RequestMsg.TransactionRefrenceNumber);
                        TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);
                        RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AccountingAuthorizationResponseMessage;
                        return;
                    }
                    //  if (!RequestMsg.MiniStateMentData.Contains(RequestMsg.ReferenceNumber))
                    //if(!LastRefNo.Contains(RequestMsg.ReferenceNumber))
                    //LastRRN = IMPSTransactions.GetRRNCheck(LastRefNo, RequestMsg.FromAccountNumber, "QRInwardTransaction", "select");
                    //if (LastRRN.Rows.Count < 0)
                    //{
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "inside 2nd if :- " + RequestMsg.MiniStateMentData +"REference Number :- " + RequestMsg.ReferenceNumber);
                    //    RequestMsg.ResponseCode = "14";
                    //    _CommanDetails.SystemLogger.WriteTransLog(this, "InvalidBeneficary " + "ReferenceNumber" + RequestMsg.TransactionRefrenceNumber);
                    //    TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);
                    //    RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AccountingAuthorizationResponseMessage;
                    //    return;
                    //}
                }

                int status;
                if (RequestMsg.ProcessingCode.Substring(0, 2) == "10" && RequestMsg.TransactionType == MaxiSwitch.API.Terminal.enumTransactionType.Debit)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "OTP : " + RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 26, 6));
                    IMPSTransactions.VALIDATEPGOTP(RequestMsg.FromAccountNumber, RequestMsg.TransactionRefrenceNumber, RequestMsg.TerminalID, RequestMsg.MiniStateMentData.Substring(RequestMsg.MiniStateMentData.Length - 26, 6), out status);
                    if (status != 0)
                    {
                        RequestMsg.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.INVALIDOTP);
                        RequestMsg.ReferenceNumber = RequestMsg.TransactionRefrenceNumber;
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Invalid PG OTP for ReferenceNumber : " + RequestMsg.TransactionRefrenceNumber);
                        RequestMsg.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.INVALIDOTP);
                        TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);
                        return;
                    }
                    _CommanDetails.SystemLogger.WriteTransLog(this, "PG OTP Verified Successfully For Reference Number : " + RequestMsg.TransactionRefrenceNumber);
                    RequestMsg.MiniStateMentData = "P2A/0000|IMPS-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "000000000";
                }
                TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 1);

                RequestMsg.ProcessingCode = CommanDetails.GetProcessingCode(0, (int)RequestMsg.TransactionType, (int)RequestMsg.TransactionMode, (int)RequestMsg.CardScheme);
                RequestMsg.CardType = MaxiSwitch.API.Terminal.enumCardType.Debit;
                _CommanDetails.SystemLogger.WriteTransLog(this, "before sent to host : ");
                RequestMsg = _ProcessHost.ProcessInwardTransactionToHost(RequestMsg);
                _CommanDetails.SystemLogger.WriteTransLog(this, "after recieve from host : ");
                _CommanDetails.SystemLogger.WriteTransLog(this, "Responsecode : " + RequestMsg.ResponseCode);
                _CommanDetails.SystemLogger.WriteTransLog(this, "Processing Code" + RequestMsg.ProcessingCode);
                #region soundbox

                if (RequestMsg.ResponseCode == ConstResponseCode.Approved && (RequestMsg.ProcessingCode.Substring(0, 2) == "28" || RequestMsg.ProcessingCode.Substring(0, 2) == "49"))
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "inward Transaction for sent to soundbox");
                    _MOBILEBANKING_REQ.QRUniquePANNumber = RequestMsg.ToAccountNumber;
                    _MOBILEBANKING_REQ.ReferenceNumber = RequestMsg.TransactionRefrenceNumber;
                    _MOBILEBANKING_REQ.TXNAMT = Convert.ToDecimal(RequestMsg.TransactionAmount);
                    var task = Task.Factory.StartNew(() =>
                    {
                        SoundboxAsync(_MOBILEBANKING_REQ);
                    });
                }

                #endregion soundbox
                // TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 7);
                if (!string.IsNullOrEmpty(RequestMsg.MiniStateMentData) && RequestMsg.TransactionType == MaxiSwitch.API.Terminal.enumTransactionType.AccountVerification)
                {
                    string[] ExtendedData = RequestMsg.MiniStateMentData.Split('|');
                    string[] ReserveFeild3 = RequestMsg.MobileNumber.Split('|');
                    //RequestMsg.MobileNumber = (ExtendedData.Length > 0 ? ExtendedData[1] : string.Empty);
                    //RequestMsg.MobileNumber = RequestMsg.MobileNumber.Substring(7, 8);//commented by sk on 7/5/21
                    RequestMsg.MobileNumber = ReserveFeild3[1];
                    ////RequestMsg.EmailID = (ExtendedData.Length > 1 ? ExtendedData[2] : string.Empty);
                    ////*****************Send SMS On Mobile & Email*******************************
                }
                if (RequestMsg.ResponseCode == ConstResponseCode.Approved && RequestMsg.TransactionType == MaxiSwitch.API.Terminal.enumTransactionType.AccountVerification)
                {
                    string OTP;
                    if (ConfigurationManager.AppSettings["IsRandomOTP"].ToString() == "True")
                    {
                        OTP = GetRandomOTP();
                        string SMSBody = "Dear Customer," + Environment.NewLine + "Your DrukPay PG OTP is " + OTP + "." + Environment.NewLine + "It will be valid for 6 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                        SendSmsCommon(SMSBody, RequestMsg.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(null, SMSBody + " MobileNumber CBS : " + RequestMsg.MobileNumber);
                        if (IMPSTransactions.INSERTOTP(RequestMsg.TerminalID, RequestMsg.TransactionRefrenceNumber, OTP, RequestMsg.FromAccountNumber, RequestMsg.MobileNumber, enumTransactionType.ACCOUNTQUERY.ToString()))
                        {
                            RequestMsg.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            RequestMsg.ReferenceNumber = RequestMsg.TransactionRefrenceNumber;
                            _CommanDetails.SystemLogger.WriteTransLog(null, "OTP Inserted Successfully");
                        }
                    }
                    else
                    {
                        OTP = "123456";
                        string SMSBody = "Dear Customer," + Environment.NewLine + "Your DrukPay PG OTP is " + OTP + "." + Environment.NewLine + "It will be valid for 6 minutes." + Environment.NewLine + "Do not share this OTP with anyone for security reasons.";
                        SendSmsCommon(SMSBody, RequestMsg.MobileNumber);
                        _CommanDetails.SystemLogger.WriteTransLog(null, SMSBody + " MobileNumber CBS : " + RequestMsg.MobileNumber);
                        if (IMPSTransactions.INSERTOTP(RequestMsg.TerminalID, RequestMsg.TransactionRefrenceNumber, OTP, RequestMsg.FromAccountNumber, RequestMsg.MobileNumber, enumTransactionType.ACCOUNTQUERY.ToString()))
                        {
                            RequestMsg.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                            RequestMsg.ReferenceNumber = RequestMsg.TransactionRefrenceNumber;
                            _CommanDetails.SystemLogger.WriteTransLog(null, "OTP Inserted Successfully");
                        }
                    }
                }
                TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 7);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(null, "Error Occure In ProcessInwardTransaction For Reference Number : " + RequestMsg.TransactionRefrenceNumber);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
                RequestMsg.ResponseCode = "91";
                if (RequestMsg.CommandType == MaxiSwitch.API.Terminal.enumCommandTypeEnum.AccountingAuthorizationRequestMessage)
                    RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AccountingAuthorizationResponseMessage;
                TransactioninwardFundTransfer((int)enumCommandTypeEnum.AuthorizationRequestMessage, RequestMsg, 7);

            }

        }

        public void ProcessAccountVerification(ref MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg)
        {
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Inward AccountVerification Recieved For Reference Number : " + RequestMsg.TransactionRefrenceNumber + Environment.NewLine);
                RequestMsg.TransactionMode = MaxiSwitch.API.Terminal.enumModeOfTransaction.Issuer;
                RequestMsg.CardScheme = MaxiSwitch.API.Terminal.enumCardScheme.BFS;
                RequestMsg.TransSource = MaxiSwitch.API.Terminal.enumTransactionSource.NFS;
                //RequestMsg.ProcessingCode 
                RequestMsg = _ProcessHost.ProcessForAccountVerificationTransactionToHost(RequestMsg);
                IMPSTransactions.GetRRNCheck(RequestMsg.TransactionRefrenceNumber, RequestMsg.FromAccountNumber, "BipsInwardAccountVerification", RequestMsg.ResponseCode, "Insert");
            }
            catch (Exception Ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In Process Account Verification For Reference Number : " + RequestMsg.TransactionRefrenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, Ex);
            }

        }


        public void ProcessQRVerification(ref MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg)
        {
            try
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Inward QRVerification Recieved For Reference Number : " + RequestMsg.TransactionRefrenceNumber + Environment.NewLine);
                RequestMsg.TransactionMode = MaxiSwitch.API.Terminal.enumModeOfTransaction.Issuer;
                RequestMsg.CardScheme = MaxiSwitch.API.Terminal.enumCardScheme.BFS;
                RequestMsg.TransSource = MaxiSwitch.API.Terminal.enumTransactionSource.NFS;
                //RequestMsg.ProcessingCode 
                RequestMsg = _ProcessHost.ProcessForQRVerificationTransactionToHost(RequestMsg);
                if (RequestMsg.ResponseCode == "00")
                {
                    RequestMsg = _ProcessHost.ProcessForAccountVerificationTransactionToHost(RequestMsg);
                }
                IMPSTransactions.GetRRNCheck(RequestMsg.TransactionRefrenceNumber, RequestMsg.FromAccountNumber, "QRInwardVerification", RequestMsg.ResponseCode, "Insert");

            }
            catch (Exception Ex)
            {

                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In Process QR Verification For Reference Number : " + RequestMsg.TransactionRefrenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, Ex);
            }

        }


        public void ProcessSchedulePaymentsTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    ////DB hit
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                // _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    ////*****************Database Entry In FlexiSchedulePayments Table********************************************\\
                    if (IMPSTransactions.InsertScheduledPayment(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.ReferenceNumber,
                        enumTransactionType.SCHEDULEPAYMENT.ToString(), Convert.ToString(_MOBILEBANKING_REQ.TXNAMT), _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.BENIFICIARYACC,
                        _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.ACQNQRCBankName, _MOBILEBANKING_REQ.Remark, _MOBILEBANKING_REQ.Frequency,
                       _MOBILEBANKING_REQ.ScheduledOn, _MOBILEBANKING_REQ.StopSchedulerOn, _MOBILEBANKING_REQ.NextScheduleOn, (_MOBILEBANKING_REQ.Frequency > 0 ? 1 : 0)))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "SUCCESS";
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidTransaction);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    return;
                }
                UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessNQRCTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessGetScheduledPaymentsList(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////*****************Database Entry In FlexiSchedulePayments Table********************************************\\
                IMPSTransactions.GetScheduledPaymentsList(_MOBILEBANKING_REQ.CUSTOMERID, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.FromDate, _MOBILEBANKING_REQ.ToDate, _MOBILEBANKING_REQ.Flag, ref _MOBILEBANKING_RESP.ScheduledPaymentList);
                if (!string.IsNullOrEmpty(_MOBILEBANKING_RESP.ScheduledPaymentList))
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "SUCCESS";
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.AccountNumberNotFound);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                }
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessGetScheduledPaymentsList For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessBHIMTransactions(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg = new MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg();

            try
            {
                RequestMsg.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                RequestMsg.ToAccountNumber = _MOBILEBANKING_REQ.BENIFICIARYACC;
                RequestMsg.TransactionMode = MaxiSwitch.API.Terminal.enumModeOfTransaction.Issuer;
                RequestMsg.CardScheme = MaxiSwitch.API.Terminal.enumCardScheme.BFS;
                RequestMsg.TransSource = MaxiSwitch.API.Terminal.enumTransactionSource.NFS;
                RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Credit;
                RequestMsg.DeliveryChannel = "BWY";
                RequestMsg.MiniStateMentData = "BHIM-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "0000000000";
                RequestMsg.ProcessingCode = CommanDetails.GetProcessingCode(0, (int)RequestMsg.TransactionType, (int)RequestMsg.TransactionMode, (int)RequestMsg.CardScheme);
                RequestMsg.CardType = MaxiSwitch.API.Terminal.enumCardType.Debit;
                RequestMsg.CardNumber = "9999999999999999";
                RequestMsg.MerchantCategoryCode = _MOBILEBANKING_REQ.MerchantCategoryCode;
                RequestMsg.PanEntryMode = _MOBILEBANKING_REQ.PanEntryMode;
                RequestMsg.TerminalID = "9999999999999999";
                RequestMsg.CardAccepterName = "DrukPNB";
                RequestMsg.FromAccountNumber = "9999999999999999";
                RequestMsg.AcquirerInstCode = "502942";
                RequestMsg.TransactionAmount = _MOBILEBANKING_REQ.TXNAMT.ToString();
                RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AuthorizationRequestMessage;
                RequestMsg.SystemsTraceAuditNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                RequestMsg = _ProcessHost.ProcessInwardTransactionToHost(RequestMsg);
                _CommanDetails.SystemLogger.WriteTransLog(this, "Response code recieved from host for BHIM : " + RequestMsg.ResponseCode);
                if (RequestMsg.ResponseCode == ConstResponseCode.Approved)
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ReferenceNumber = RequestMsg.ReferenceNumber;
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(RequestMsg.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ReferenceNumber = RequestMsg.ReferenceNumber;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ProcessBHIMStatusCheckTransactions(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg RequestMsg = new MaxiSwitch.API.Terminal.SwitchConsumerRequestReqMsg();

            try
            {
                RequestMsg.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                RequestMsg.ToAccountNumber = _MOBILEBANKING_REQ.BENIFICIARYACC;
                RequestMsg.TransactionMode = MaxiSwitch.API.Terminal.enumModeOfTransaction.Issuer;
                RequestMsg.CardScheme = MaxiSwitch.API.Terminal.enumCardScheme.BFS;
                RequestMsg.TransSource = MaxiSwitch.API.Terminal.enumTransactionSource.NFS;
                RequestMsg.TransactionType = MaxiSwitch.API.Terminal.enumTransactionType.Credit;
                RequestMsg.DeliveryChannel = "BWY";
                RequestMsg.MiniStateMentData = "NQRC-IN/" + RequestMsg.TransactionRefrenceNumber + "/" + RequestMsg.ToAccountNumber + "/" + "0000000000";
                RequestMsg.MiniStateMentData = "19";
                RequestMsg.ProcessingCode = "970000";//"401010";//CommanDetails.GetProcessingCode(0, (int)RequestMsg.TransactionType, (int)RequestMsg.TransactionMode, (int)RequestMsg.CardScheme);
                RequestMsg.CardType = MaxiSwitch.API.Terminal.enumCardType.Debit;
                RequestMsg.CardNumber = "9999999999999999";
                RequestMsg.MerchantCategoryCode = _MOBILEBANKING_REQ.MerchantCategoryCode;
                RequestMsg.PanEntryMode = _MOBILEBANKING_REQ.PanEntryMode;
                RequestMsg.TerminalID = "9999999999999999";
                RequestMsg.CardAccepterName = "DrukPNB";
                //RequestMsg.FromAccountNumber = "9999999999999999";
                RequestMsg.FromAccountNumber = _MOBILEBANKING_REQ.BENIFICIARYACC;
                RequestMsg.AcquirerInstCode = "502942";
                RequestMsg.TransactionAmount = "0";// _MOBILEBANKING_REQ.TXNAMT.ToString();
                RequestMsg.CommandType = MaxiSwitch.API.Terminal.enumCommandTypeEnum.AuthorizationRequestMessage;
                RequestMsg.SystemsTraceAuditNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                RequestMsg.CustomerName = "BHI" + "|" + _MOBILEBANKING_REQ.TXNAMT.ToString();
                RequestMsg.LocalTransactionDateTime = DateTime.Parse(DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss"));
                RequestMsg = _ProcessHost.ProcessInwardTransactionToHost(RequestMsg);
                _CommanDetails.SystemLogger.WriteTransLog(this, "Response code recieved from host for BHIM : " + RequestMsg.ResponseCode);
                if (RequestMsg.ResponseCode == ConstResponseCode.Approved)
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ReferenceNumber = RequestMsg.ReferenceNumber;
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(RequestMsg.ResponseCode);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.ReferenceNumber = RequestMsg.ReferenceNumber;
                }

            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ProcessStandingInstructionsTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    ////DB hit
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Card Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                _Authentication.TransactionRefrenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                //_SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                _SSM.VerifyPin(ref _Authentication, _MOBILEBANKING_REQ.CUST_AC_NO, _MOBILEBANKING_REQ.mPIN, _MOBILEBANKING_REQ.DeviceID);
                if (_Authentication.TransactionStatus == enumTransactionStatus.Successful)
                {
                    ////*****************Database Entry In FlexiSchedulePayments Table********************************************\\
                    if (IMPSTransactions.InsertScheduledPayment(_MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.ReferenceNumber,
                        enumTransactionType.StandingInstructions.ToString(), Convert.ToString(_MOBILEBANKING_REQ.TXNAMT), _MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.BENIFICIARYACC,
                        _MOBILEBANKING_REQ.AcquirerBankID, _MOBILEBANKING_REQ.ACQNQRCBankName, _MOBILEBANKING_REQ.Remark, _MOBILEBANKING_REQ.Frequency,
                       _MOBILEBANKING_REQ.ScheduledOn, _MOBILEBANKING_REQ.StopSchedulerOn, _MOBILEBANKING_REQ.NextScheduleOn, (_MOBILEBANKING_REQ.Frequency > 0 ? 1 : 0)))
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "SUCCESS";
                    }
                    else
                    {
                        _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.InvalidTransaction);
                        _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                        _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_REQ.DeviceID;
                        _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_REQ.ReferenceNumber;
                        _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_REQ.CUST_AC_NO;
                        _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_REQ.MobileNumber;
                        _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    }
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.IncorrectMPIN);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.DeviceID = _MOBILEBANKING_RESP.DeviceID;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    _MOBILEBANKING_RESP.CUST_AC_NO = _MOBILEBANKING_RESP.CUST_AC_NO;
                    _MOBILEBANKING_RESP.MobileNumber = _MOBILEBANKING_RESP.MobileNumber;
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILED";
                    return;
                }
                UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessStandingInstructionsTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        //added by krn on 21-11-22
        public void ProcessAccountVerificationTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));

                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    _MOBILEBANKING_RESP.ReferenceNumber = _MOBILEBANKING_RESP.ReferenceNumber;
                    TransactionAccountVerification((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 1);
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("Account Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }
                TransactionAccountVerification((int)enumCommandTypeEnum.AuthorizationResponseMessage, _MOBILEBANKING_REQ, _MOBILEBANKING_RESP, 2);

                //_MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(_MOBILEBANKING_REQ.Merchantidentifier + "8888888888").PadRight(16, '0');
                //_MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(_MOBILEBANKING_REQ.Merchantidentifier + "8888888888").PadRight(16, '0');
                //_MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString("6370530000009994");
                DataTable DTAcquireCode = IMPSTransactions.GetAcquireCodeDetails(_MOBILEBANKING_REQ.BeneficiaryBankCode, "SELECT");
                if (DTAcquireCode.Rows.Count > 0)
                {
                    _MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(DTAcquireCode.Rows[0][4] + "8888888888").PadRight(16, '0');
                    _CommanDetails.SystemLogger.WriteTransLog(null, "Inside Merchantidentifier : - " + _MOBILEBANKING_REQ.Merchantidentifier);
                    _MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                }
                //_MOBILEBANKING_REQ.Merchantidentifier = ConfigurationManager.AppSettings["Merchantidentifier"].ToString();
                //_MOBILEBANKING_REQ.Merchantidentifier = _MOBILEBANKING_REQ.Merchantidentifier.Length > 16 ? _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 16) : _MOBILEBANKING_REQ.Merchantidentifier;
                string RemitterName = (_MOBILEBANKING_REQ.REMITTERNAME.Length > 20 ? _MOBILEBANKING_REQ.REMITTERNAME.Substring(0, 20) : _MOBILEBANKING_REQ.REMITTERNAME);
                string BeneficieryName = (_MOBILEBANKING_REQ.BENIFICIARYNAME.Length > 20 ? _MOBILEBANKING_REQ.BENIFICIARYNAME.Substring(0, 20) : _MOBILEBANKING_REQ.BENIFICIARYNAME);
                string Remarks = (_MOBILEBANKING_REQ.Remark.Length > 20 ? _MOBILEBANKING_REQ.Remark.Substring(0, 20) : _MOBILEBANKING_REQ.Remark);

                _MOBILEBANKING_REQ.ResponseData = "001003003002006MOBILE"
                                                + "003" + Convert.ToString(RemitterName.Length).PadLeft(3, '0') + RemitterName
                                                + "004" + Convert.ToString(BeneficieryName.Length).PadLeft(3, '0') + BeneficieryName
                                                + "005" + Convert.ToString(Remarks.Length).PadLeft(3, '0') + Remarks
                                                + "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber
                                                + "007" + "006" + CONFIGURATIONCONFIGDATA.BankBIN
                                                + "008" + "004" + _MOBILEBANKING_REQ.BankCode
                                                //+ "009" + "004" + _MOBILEBANKING_REQ.AcquirerBankID;
                                                + "009" + "004" + _MOBILEBANKING_REQ.AcquirerBankID;


                _ProcessHost.ProcessAccountVerificationTransactionToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);
                UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                //if (_MOBILEBANKING_RESP.ResponseCode == "00")
                //{
                //    //string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                //    string PayerAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 4, 4);
                //    string PayeeAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                //    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + "," + System.DateTime.Now.ToString("hh:mm:ss tt");
                //    //_MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                //    //_MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Payer", PayerAccountNumber).Replace("@PayeeAcc", PayeeAccountNumber).Replace("@Name", _MOBILEBANKING_REQ.BENIFICIARYNAME).Replace("@Amount", amount).Replace("@MSGID", _MOBILEBANKING_RESP.ReferenceNumber).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Trim() + time + "\n" + " via DrukPay.";
                //}
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In Process Account Verification Transaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        //added by krn on 22-11-22
        public void ProcessQRCodeVerificationTransaction(ref MOBILEBANKING_RESP _MOBILEBANKING_RESP, MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            try
            {
                ////DB hit
                int status = -1;
                IMPSTransactions _ImpsTransaction = new IMPSTransactions();
                _ImpsTransaction.VERIFYIMPSACCOUNT(_MOBILEBANKING_REQ.REMITTERACC, _MOBILEBANKING_REQ.MobileNumber, _MOBILEBANKING_REQ.DeviceID, _MOBILEBANKING_REQ.TXNAMT,
                                                  ref _MOBILEBANKING_REQ.AmountAvailable, ref _MOBILEBANKING_REQ.FtLimit, ref _MOBILEBANKING_REQ.AccountUseLimit,
                                                  ref _MOBILEBANKING_REQ.AccountUseCount, ref _MOBILEBANKING_REQ.LastDate, ref _MOBILEBANKING_REQ.LastTime,
                                                  ref _MOBILEBANKING_REQ.MaxPinCount, ref _MOBILEBANKING_REQ.MaxPinUseCount, ref _MOBILEBANKING_REQ.PinOffset, out status
                                                  , ref _MOBILEBANKING_REQ.ACQAmountAvailable, ref _MOBILEBANKING_REQ.ACQFtLimit,
                                                  ref _MOBILEBANKING_REQ.BNgulAmountAvailable, ref _MOBILEBANKING_REQ.BNgulFtLimit);
                if (status == 0)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this,
                     string.Format("CardStatus    : {0}" + "\t" + "TransType      : {1}" + "\t" + "PinOffset      : {2}" + "\t" + "AmountAvailable: {3}" + "\t" +
                                  "FTLimit       : {4}" + "\t" + "AccountUseLimit   : {5}" + "\t" + "AccountUseCount   : {6}" + "\t" + "UsedLastDate   : {7}" + "\t" +
                                  "UsedLastTime   : {8}" + "\t" + "MaxPinCount    : {9}" + "\t" + "MaxPinUseCount : {10}" + "\t" + "AccountNumber  : {11}"
                                   , enumResponseCode.Approved, null, _MOBILEBANKING_REQ.PinOffset, _MOBILEBANKING_REQ.AmountAvailable, _MOBILEBANKING_REQ.FtLimit, _MOBILEBANKING_REQ.AccountUseLimit
                                   , _MOBILEBANKING_REQ.AccountUseCount, _MOBILEBANKING_REQ.LastDate, _MOBILEBANKING_REQ.LastTime, _MOBILEBANKING_REQ.MaxPinCount, _MOBILEBANKING_REQ.MaxPinUseCount, _MOBILEBANKING_REQ.CUST_AC_NO));
                    _CommanDetails.SystemLogger.WriteTransLog(this, "after status");
                    if (_MOBILEBANKING_REQ.LastDate == "000000" && _MOBILEBANKING_REQ.LastTime == "000000")
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.Now;
                    else
                        _MOBILEBANKING_REQ.LastDateTime = DateTime.ParseExact(_MOBILEBANKING_REQ.LastDate + _MOBILEBANKING_REQ.LastTime, "ddMMyyHHmmss", CultureInfo.InvariantCulture);
                }
                else
                {
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(status.ToString());
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(_MOBILEBANKING_RESP.ResponseCode);
                    _MOBILEBANKING_RESP.MSGSTAT = "FAILURE";
                    _MOBILEBANKING_RESP.ResponseData = null;
                    ////DB hit
                    _CommanDetails.SystemLogger.WriteTransLog(this, string.Format("OR Code Verification Failed For Reference Number : {0} \t Account Verification Status :{1} \t Response Code :{2} "
                                                                , _MOBILEBANKING_REQ.TransactionRefrenceNumber, _MOBILEBANKING_RESP.ResponseDesc, _MOBILEBANKING_REQ.ResponseCode));
                    return;
                }

                _MOBILEBANKING_REQ.FundTransferType = "NQRC-Verification /" + _MOBILEBANKING_REQ.ReferenceNumber + "/" + _MOBILEBANKING_REQ.BENIFICIARYNAME.Trim() + "/" + "0000000000";

                //_MOBILEBANKING_REQ.Merchantidentifier = Convert.ToString(_MOBILEBANKING_REQ.Merchantidentifier);
                _MOBILEBANKING_REQ.BENIFICIARYACC = _MOBILEBANKING_REQ.Merchantidentifier;

                string RemitterName = (_MOBILEBANKING_REQ.REMITTERNAME.Length > 20 ? _MOBILEBANKING_REQ.REMITTERNAME.Substring(0, 20) : _MOBILEBANKING_REQ.REMITTERNAME);
                string BeneficieryName = (_MOBILEBANKING_REQ.BENIFICIARYNAME.Length > 20 ? _MOBILEBANKING_REQ.BENIFICIARYNAME.Substring(0, 20) : _MOBILEBANKING_REQ.BENIFICIARYNAME);
                string Remarks = (_MOBILEBANKING_REQ.Remark.Length > 20 ? _MOBILEBANKING_REQ.Remark.Substring(0, 20) : _MOBILEBANKING_REQ.Remark);
                _MOBILEBANKING_REQ.ResponseData = "001003003002002QR"
                                                + "003" + Convert.ToString(RemitterName.Length).PadLeft(3, '0') + RemitterName
                                                + "004" + Convert.ToString(BeneficieryName.Length).PadLeft(3, '0') + BeneficieryName
                                                + "005" + Convert.ToString(Remarks.Length).PadLeft(3, '0') + Remarks
                                                + "006" + Convert.ToString(_MOBILEBANKING_REQ.ReferenceNumber.Length).PadLeft(3, '0') + _MOBILEBANKING_REQ.ReferenceNumber
                                                + "007" + "006" + "123456"
                                                + "008" + "004" + _MOBILEBANKING_REQ.BankCode
                                                + "009" + "008" + _MOBILEBANKING_REQ.Merchantidentifier.Substring(0, 8);
                _ProcessHost.ProcessQRCodeVerificationTransactionToHost(ref _MOBILEBANKING_RESP, _MOBILEBANKING_REQ);

                if (_MOBILEBANKING_RESP.ResponseCode == "00")
                {
                    string amount = Convert.ToDouble(_MOBILEBANKING_REQ.TXNAMT.ToString()).ToString("N");
                    string PayerAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.REMITTERACC.Substring(_MOBILEBANKING_REQ.REMITTERACC.Length - 4, 4);
                    string PayeeAccountNumber = "XXXXXXXXX" + _MOBILEBANKING_REQ.BENIFICIARYACC.Substring(_MOBILEBANKING_REQ.BENIFICIARYACC.Length - 4, 4);
                    string time = DateTime.Now.ToString("dddd, dd MMMM yyyy") + "," + System.DateTime.Now.ToString("hh:mm:ss tt");
                    _MOBILEBANKING_RESP.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.OutwardNQRCMSG);
                    _MOBILEBANKING_RESP.ResponseDesc = CommanDetails.GetResponseCodeDescription(ConstResponseCode.OutwardNQRCMSG).Replace("@Payer", PayerAccountNumber).Replace("@PayeeAcc", PayeeAccountNumber).Replace("@Name", _MOBILEBANKING_REQ.MerchantName).Replace("@Amount", amount).Replace("@MSGID", _MOBILEBANKING_RESP.ReferenceNumber).Replace("@BankName", _MOBILEBANKING_REQ.NQRCBankName).Replace("@Remark", _MOBILEBANKING_REQ.Remark).Trim() + time + "\n" + " via DrukPay.";
                    UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
                }
                // UpdateTransactionDetails(ref _MOBILEBANKING_REQ);
            }
            catch (Exception ex)
            {
                _CommanDetails.SystemLogger.WriteTransLog(this, "Error Occured In ProcessNQRCTransaction For Reference Number : " + _MOBILEBANKING_REQ.ReferenceNumber + Environment.NewLine);
                _CommanDetails.SystemLogger.WriteErrorLog(null, ex);
            }
        }

        public void ProcessPushNotification(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("PushNotification "));
            int TransType = -1;
            TransType = (int)enumTransactionType.RequestMoney;
            int status = -1;
            DataTable DtTokendetails = null;
            DataTable DtUservalidation = null;
            // string Remitter = _REGISTRATION_REQ.REMITTERNAME;
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            //Remitter = textInfo.ToTitleCase(Remitter.ToLower());
            //_REGISTRATION_REQ.REMITTERNAME = Remitter;
            try
            {
                if (_REGISTRATION_REQ.ISALLNOTICIFATION == false)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(null, "Transaction Notification");
                    int StatusUserExist = -1;
                    DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, out StatusUserExist);
                    _CommanDetails.SystemLogger.WriteTransLog(null, "GetAccountDetails status  : " + StatusUserExist);
                    if (StatusUserExist == 0)
                    {
                        _REGISTRATION_REQ.BenificiaryMobileNumber = DtUservalidation.Rows[0][0].ToString();
                        _CommanDetails.SystemLogger.WriteTransLog(null, "BenificiaryMobileNumber  : " + _REGISTRATION_REQ.BenificiaryMobileNumber);
                        DtTokendetails = IMPSTransactions.GetTokenDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(null, "GetTokenDetails status  : " + status);
                        if (DtTokendetails.Rows.Count > 0 && DtTokendetails.Rows[0][0].ToString().Length > 8 && DtTokendetails.Rows[0][0].ToString() != "TokenID")
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Device Type   : {0} ", DtTokendetails.Rows[0][4].ToString()));
                            #region Android/ios
                            string SERVERKEY = DtTokendetails.Rows[0][4].ToString() == "android" ? CONFIGURATIONCONFIGDATA.SERVERKEY : CONFIGURATIONCONFIGDATA.SERVERKEYIos;
                            // DtTokendetails.Rows[0][4].ToString() == "Android" || DtTokendetails.Rows[0][4].ToString() == "android")
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));
                            if (status == 0)
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Successful Token  : {0} ", status.ToString()));
                                /*logic of send Token*/
                                string RETURNVALUE = string.Empty;
                                try
                                {
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("SERVERKEY  : {0} ", SERVERKEY.ToString()));
                                    DateTime currentTime = DateTime.Now;
                                    DateTime x24HRMinsLater = currentTime.AddMinutes(1440);
                                    _REGISTRATION_REQ.ExpiredDate = x24HRMinsLater.ToString();
                                    _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("_REGISTRATION_REQ.ExpiredDate  : {0} ", _REGISTRATION_REQ.ExpiredDate.ToString()));
                                    //IMPSTransactions.InsertTokenDetails(_REGISTRATION_REQ.DeviceID, _REGISTRATION_REQ.ReferenceNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, _REGISTRATION_REQ.AccountNumber, DtTokendetails.Rows[0][0].ToString(), "0", "0", "", 1, Convert.ToDecimal(_REGISTRATION_REQ.Amount), _REGISTRATION_REQ.Remark, out status, _REGISTRATION_REQ.MobileNumber, _REGISTRATION_REQ.ExpiredDate, DtTokendetails.Rows[0][2].ToString(), "", "", _REGISTRATION_REQ.REMITTERNAME, "");
                                    if (status == 0)
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("InsertTokenDetails : {0} ", "InsertTokenDetails SUCCESS"));
                                        string RESULT = "-1", RESULTMSG = "-1";
                                        string WEBADDR = CONFIGURATIONCONFIGDATA.WEBADDR.ToString();
                                        string REQUESTMONEYNOTIFICATIONTITLE = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;
                                        string Requestmsg = DtTokendetails.Rows[0][2].ToString();
                                        string regID = DtTokendetails.Rows[0][0].ToString();
                                        string deviceid = DtTokendetails.Rows[0][1].ToString();
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Requestmsg  : {0} ", Requestmsg.ToString()));
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID  : {0} ", regID.ToString()));
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("WEBADDR  : {0} ", WEBADDR.ToString()));
                                        System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                                        System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                        System.Security.Cryptography.X509Certificates.X509Chain chain,
                                        System.Net.Security.SslPolicyErrors sslPolicyErrors)
                                        {
                                            return true;
                                        };
                                        HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(WEBADDR.ToString());
                                        //WebProxy WEBproxy = new WebProxy("172.19.10.222", 3128);
                                        //WEBproxy.BypassProxyOnLocal = false;
                                        //httpWebRequest.Proxy = WEBproxy;
                                        httpWebRequest.ContentType = "application/json";
                                        httpWebRequest.Headers.Add("Authorization:key=" + SERVERKEY);
                                        httpWebRequest.Method = "POST";
                                        string reqmsg = _REGISTRATION_REQ.ResponseDesc;
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("reqmsg : {0} ", reqmsg.ToString()));
                                        DataTable DtRequestdetails = IMPSTransactions.GetRequestMoneyDashBoardDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out status);
                                        _REGISTRATION_RES.NotificationCount = DtRequestdetails.Rows.Count.ToString();
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtRequestdetails.Rows.Count.ToString()));
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));
                                        string json;
                                        using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                                        {
                                            json = "{\"to\": \"" + regID + "\",\"notification\": {\"title\": \" " + REQUESTMONEYNOTIFICATIONTITLE + "\",\"body\": \"" + reqmsg + "\",\"badge\": \"" + DtRequestdetails.Rows.Count.ToString() + "\"},\"priority\":10}";
                                            streamWriter.Write(json);
                                            streamWriter.Flush();
                                        }
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("json : {0} ", json.ToString()));
                                        var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                                        {
                                            RESULT = streamReader.ReadToEnd();
                                        }
                                        RETURNVALUE = RESULT;
                                        var data = JObject.Parse(RETURNVALUE);

                                        if (data.ToString().Contains("NotRegistered") == true)
                                        {
                                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Usernotregister);
                                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.Usernotregister);
                                            _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                            _REGISTRATION_RES.AccountNumber = _REGISTRATION_REQ.AccountNumber;
                                            _REGISTRATION_RES.MobileNumber = _REGISTRATION_REQ.BenificiaryMobileNumber;
                                            _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
                                            _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
                                            return;
                                        }
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("data : {0} ", data.ToString()));
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("regID 1 : {0} ", regID.ToString()));
                                        string success = Convert.ToString(data["success"]);
                                        string failure = Convert.ToString(data["failure"]);
                                        string message_id = data["results"][0]["message_id"].ToString();
                                        string multicastID = Convert.ToString(data["multicast_id"]);
                                        _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("multicastID : {0} For Reference Number : {1}", multicastID.ToString(), _REGISTRATION_REQ.ReferenceNumber));
                                        /////db entry
                                        if (Convert.ToInt16(success) > 0)
                                        {
                                            IMPSTransactions.InsertNotification(deviceid, regID.ToString(), reqmsg.ToString(), "Mob");
                                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                        _REGISTRATION_RES.DeviceID = _REGISTRATION_REQ.DeviceID;
                                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                                        _REGISTRATION_RES.Remark = _REGISTRATION_REQ.Remark;
                                        _REGISTRATION_RES.Amount = _REGISTRATION_REQ.Amount;
                                        return;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                                    _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                    _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
                                }
                            }

                            #endregion Android/ios
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            return;
                        }
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    }
                }
                else
                {
                    int StatusUserExist = -1;
                    DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out StatusUserExist);
                    if (StatusUserExist == 0)
                    {
                        _REGISTRATION_RES.Transactionhistory = IMPSTransactions.GetTransactionNotificationHistory(_REGISTRATION_REQ.DeviceID);
                        _REGISTRATION_RES.Otherhistory = IMPSTransactions.GetotherNotificationHistory(_REGISTRATION_REQ.DeviceID);
                        _REGISTRATION_RES.Otherhistory.Merge(_REGISTRATION_RES.Transactionhistory);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_REGISTRATION_RES.ResponseCode);

                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    }

                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        public void ProcessPushNotificationNew(ref REGISTRATION_RES _REGISTRATION_RES, REGISTRATION_REQ _REGISTRATION_REQ)
        {
            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("PushNotification "));
            int TransType = -1;
            TransType = (int)enumTransactionType.RequestMoney;
            int status = -1;
            DataTable DtTokendetails = null;
            DataTable DtUservalidation = null;
            DataTable DTBrearerToken = null;
            // string Remitter = _REGISTRATION_REQ.REMITTERNAME;
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            //Remitter = textInfo.ToTitleCase(Remitter.ToLower());
            //_REGISTRATION_REQ.REMITTERNAME = Remitter;
            try
            {
                if (_REGISTRATION_REQ.ISALLNOTICIFATION == false)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(null, "Transaction Notification");
                    int StatusUserExist = -1;
                    DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.BenificiaryAccountNumber, _REGISTRATION_REQ.BenificiaryMobileNumber, out StatusUserExist);
                    _CommanDetails.SystemLogger.WriteTransLog(null, "GetAccountDetails status  : " + StatusUserExist);
                    if (StatusUserExist == 0)
                    {
                        string NotificationTitle = CONFIGURATIONCONFIGDATA.REQUESTMONEYNOTIFICATIONTITLE;
                        string reqmsg = _REGISTRATION_REQ.ResponseDesc;
                        _REGISTRATION_REQ.BenificiaryMobileNumber = DtUservalidation.Rows[0][0].ToString();
                        _CommanDetails.SystemLogger.WriteTransLog(null, "BenificiaryMobileNumber  : " + _REGISTRATION_REQ.BenificiaryMobileNumber);
                        DtTokendetails = IMPSTransactions.GetTokenDetails(_REGISTRATION_REQ.BenificiaryMobileNumber, out status);
                        _CommanDetails.SystemLogger.WriteTransLog(null, "GetTokenDetails status  : " + status);
                        if (DtTokendetails.Rows.Count > 0 && DtTokendetails.Rows[0][0].ToString().Length > 8 && DtTokendetails.Rows[0][0].ToString() != "TokenID")
                        {
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Device Type   : {0} ", DtTokendetails.Rows[0][4].ToString()));
                            string devicetype = DtTokendetails.Rows[0][4].ToString();
                            string deviceid = DtTokendetails.Rows[0][1].ToString();
                            #region Android/ios
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Get Tokendetails Row Count (): {0} ", DtTokendetails.Rows.Count.ToString()));
                            _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("status : {0} ", status.ToString()));
                            if (status == 0)
                            {
                                _CommanDetails.SystemLogger.WriteTransLog(null, string.Format("Successful Token  : {0} ", status.ToString()));
                                /*logic of send Token*/
                                string RETURNVALUE = string.Empty;

                                // to get brearertoken
                                DTBrearerToken = IMPSTransactions.GetfbToken(devicetype);
                                if(DTBrearerToken.Rows.Count > 0)
                                {
                                    string FBURL = devicetype == "android" ? ConfigurationManager.AppSettings["ANDROIDURL"].ToString() : ConfigurationManager.AppSettings["IOSURL"].ToString();
                                    var clientHandler = new HttpClientHandler();
                                    var client = new HttpClient(clientHandler);
                                    client.BaseAddress = new Uri(FBURL);
                                    client.DefaultRequestHeaders.Accept.Clear();
                                    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", DTBrearerToken.Rows[0][2].ToString()); // Authorization Token in this variable

                                    //---------------Assigning Of data To Model --------------

                                    Root rootObj = new Root();
                                    rootObj.message = new Message();
                                    rootObj.message.token = DtTokendetails.Rows[0][0].ToString(); //FCM Token id

                                    rootObj.message.data = new Data();
                                    rootObj.message.data.title = "Data Title";
                                    rootObj.message.data.body = "Data Body";
                                    //rootObj.message.data.key_1 = "Sample Key";
                                    //rootObj.message.data.key_2 = "Sample Key2";
                                    rootObj.message.notification = new Notification();
                                    rootObj.message.notification.title = NotificationTitle;
                                    rootObj.message.notification.body = reqmsg;

                                    //-------------Convert Model To JSON ----------------------

                                    var jsonObj = new JavaScriptSerializer().Serialize(rootObj);

                                    //------------------------Calling Of FCM Notify API-------------------

                                    var data = new StringContent(jsonObj, Encoding.UTF8, "application/json");
                                    data.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                                    var response = client.PostAsync(FBURL, data).Result;

                                    //---------- Deserialize Json Response from API ----------------------------------

                                    var jsonResponse = response.Content.ReadAsStringAsync().Result;
                                    var responseObj = new JavaScriptSerializer().DeserializeObject(jsonResponse);
                                    var dictionary = (Dictionary<string, object>)responseObj;
                                    if (jsonResponse.Contains("error"))
                                    {
                                        _CommanDetails.SystemLogger.WriteTransLog(null, "Failed Response From Firebase  : " );
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                        return;
                                    }
                                    else
                                    {
                                        IMPSTransactions.InsertNotification(deviceid, DtTokendetails.Rows[0][0].ToString(), reqmsg, "Mob");
                                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                                        return;
                                    }
                                }
                            }

                            #endregion Android/ios
                        }
                        else
                        {
                            _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.UnableToProcess);
                            _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_REGISTRATION_RES.ResponseCode);
                            _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                            return;
                        }
                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    }
                }
                else
                {
                    int StatusUserExist = -1;
                    DtUservalidation = IMPSTransactions.GetAccountDetails(_REGISTRATION_REQ.AccountNumber, _REGISTRATION_REQ.MobileNumber, out StatusUserExist);
                    if (StatusUserExist == 0)
                    {
                        _REGISTRATION_RES.Transactionhistory = IMPSTransactions.GetTransactionNotificationHistory(_REGISTRATION_REQ.DeviceID);
                        _REGISTRATION_RES.Otherhistory = IMPSTransactions.GetotherNotificationHistory(_REGISTRATION_REQ.DeviceID);
                        _REGISTRATION_RES.Otherhistory.Merge(_REGISTRATION_RES.Transactionhistory);
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.Approved);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(_REGISTRATION_RES.ResponseCode);

                    }
                    else
                    {
                        _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescriptionHost(ConstResponseCode.invalidmobile);
                        _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                    }

                }
            }
            catch (Exception ex)
            {
                _REGISTRATION_RES.ResponseCode = CommanDetails.GetResponseCodeHost(ConstResponseCode.SystemError);
                _REGISTRATION_RES.ResponseDesc = CommanDetails.GetResponseCodeDescription(_REGISTRATION_RES.ResponseCode);
                _REGISTRATION_RES.ReferenceNumber = _REGISTRATION_REQ.ReferenceNumber;
                _CommanDetails.SystemLogger.WriteErrorLog(this, ex);
            }
        }

        #endregion Process Transactions

        #region Sounbx

        public void SoundboxAsync(MOBILEBANKING_REQ _MOBILEBANKING_REQ)
        {
            #region SoundBox
            _CommanDetails.SystemLogger.WriteTransLog(this, "Request of sound box For Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber);
            DataTable SoundBoxToken = new DataTable();
                try
                {
                    DataTable SoundBoxDtl = IMPSTransactions.GetSoundBoxDetails(_MOBILEBANKING_REQ.QRUniquePANNumber);
                    if (SoundBoxDtl.Rows.Count > 0)
                    {
                        _CommanDetails.SystemLogger.WriteTransLog(this, "SoundBoxDtl" + SoundBoxDtl.Rows.Count + " For Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber);
                        SoundBoxToken = IMPSTransactions.GetsoundboxToken();
                        if (SoundBoxToken.Rows.Count <= 0)
                        {
                            _schedular.RefreshsoundboxToken();
                            SoundBoxToken = IMPSTransactions.GetsoundboxToken();
                        }
                            _MOBILEBANKING_REQ.AccessToken = SoundBoxToken.Rows[0][0].ToString();
                            _MOBILEBANKING_REQ.RefreshToken = SoundBoxToken.Rows[0][1].ToString();
                        System.Net.ServicePointManager.ServerCertificateValidationCallback = delegate (object s,
                                       System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                       System.Security.Cryptography.X509Certificates.X509Chain chain,
                                       System.Net.Security.SslPolicyErrors sslPolicyErrors)
                        {
                            return true;
                        };
                        ServicePointManager.Expect100Continue = true;
                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                        var httpWebRequest = (HttpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["Payment_URL"].ToString());
                        httpWebRequest.ContentType = "application/json";
                        httpWebRequest.ServicePoint.Expect100Continue = false;
                        httpWebRequest.Method = "POST";
                        httpWebRequest.Headers.Add("x-api-key", ConfigurationManager.AppSettings["Apikey"].ToString());
                        httpWebRequest.Headers.Add("Authorization", "Bearer " + _MOBILEBANKING_REQ.AccessToken);
                        httpWebRequest.PreAuthenticate = true;
                        string json = string.Empty;
                        var result = "";
                        using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                        {
                            json = "{\"event_type\": \"PAYMENT_RECEIVED\",\"device_id\":\"" + SoundBoxDtl.Rows[0][0].ToString() + "\",\"amount\":\"" + _MOBILEBANKING_REQ.TXNAMT + "\"\r\n}";
                            streamWriter.Write(json);
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Json :" + json);
                        }
                        //db entry
                        IMPSTransactions.InsertQSAPIDtl(_MOBILEBANKING_REQ.ReferenceNumber, SoundBoxDtl.Rows[0][2].ToString(), ConnectionStringEncryptDecrypt.EncryptString(SoundBoxDtl.Rows[0][3].ToString()), SoundBoxDtl.Rows[0][0].ToString(), SoundBoxDtl.Rows[0][0].ToString(), json, "", "", "", 1);
                        //db entry

                        var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                        {
                            result = streamReader.ReadToEnd();
                            _CommanDetails.SystemLogger.WriteTransLog(this, "Json Response Received :" + result);

                            if (httpResponse.StatusCode == HttpStatusCode.Created)
                            {
                                var userObj = JObject.Parse(result);
                            _MOBILEBANKING_REQ.ResponseCode = "00";
                            }
                        }
                        _CommanDetails.SystemLogger.WriteTransLog(this, "Json :" + json + " For Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber);
                        IMPSTransactions.InsertQSAPIDtl(_MOBILEBANKING_REQ.ReferenceNumber, SoundBoxDtl.Rows[0][2].ToString(), ConnectionStringEncryptDecrypt.EncryptString(SoundBoxDtl.Rows[0][3].ToString()), SoundBoxDtl.Rows[0][0].ToString(), SoundBoxDtl.Rows[0][0].ToString(), json, result, _MOBILEBANKING_REQ.ResponseCode, "", 2);

                    }
                }
                catch (Exception ex)
                {
                    _CommanDetails.SystemLogger.WriteTransLog(this, "Error in Json Response Received :" + ex.ToString() + " For Reference Number :" + _MOBILEBANKING_REQ.ReferenceNumber);
                }
          

            #endregion  SoundBox
        }

        public string Encryptsecretkeyspec(string key, string text)
        {
            System.Text.UTF8Encoding UTF8 = new System.Text.UTF8Encoding();
            AesManaged tdes = new AesManaged();
            tdes.Key = UTF8.GetBytes(key);
            tdes.Mode = CipherMode.ECB;
            tdes.Padding = PaddingMode.PKCS7;
            ICryptoTransform crypt = tdes.CreateEncryptor();
            byte[] plain = Encoding.UTF8.GetBytes(text);
            byte[] cipher = crypt.TransformFinalBlock(plain, 0, plain.Length);
            string encryptedText = Convert.ToBase64String(cipher);
            return encryptedText;
        }
        private string Md5Hex(string data)
        {

            System.Security.Cryptography.MD5CryptoServiceProvider x =
            new System.Security.Cryptography.MD5CryptoServiceProvider();
            byte[] bs = System.Text.Encoding.UTF8.GetBytes(data);
            bs = x.ComputeHash(bs);
            System.Text.StringBuilder s = new System.Text.StringBuilder();
            foreach (byte b in bs)
            {
                s.Append(b.ToString("x2").ToLower());
            }
            data = s.ToString();
            return data;
        }



        #endregion Soundbox
    }

    public class SMSJson
    {
        public IList<Datum> data { get; set; }
        public object error_string { get; set; }
        public int timestamp { get; set; }
    }

    public class Datum
    {
        public string Status { get; set; }
        public string error { get; set; }
        public string smslog_id { get; set; }
        public string queue { get; set; }
        public string to { get; set; }
    }

    public class OTPmPINStatus
    {
        public static bool SmsStatus { get; set; }
        public static bool MailStatus { get; set; }
    }

    public enum enumCommandTypeEnum
    {
        Unknown = 0,
        AuthorizationRequestMessage = 1,
        AuthorizationResponseMessage = 2,
        ReversalAdviceRequestMessage = 3,
        ReversalAdviceResponseMessage = 4,
        //added by sk on 16122022
        AccountingAuthorizationRequestMessage = 7,
        AccountingAuthorizationResponseMessage = 8,
    }

    public enum enumModeOfTransaction
    {
        Unknown = 0,
        Issuer = 1,
        Acquirer = 2,
        OnUs = 3,
        BillPay = 4,
        Loans_paymnet = 5,
        CreateRDTD = 6,
        NPPF = 7,
        Water = 8,
        NQRC = 9,
        BIPS = 10,
        PG = 11,
        PGVerification = 12,
        PGTransaction = 13,
    }

    public enum enumSource
    {
        Unknown = 0,
        FLEXCUBE = 1,
        BHUTANTELECOM = 2,
        DRUKCOM = 3,
        TASHICELLBROADBAND = 4,
        TASHICELLFIXLINE = 5,
        BPCOUTSTANDINGAMOUNT = 6,
        BPCBILLPAYMENT = 7,
        CREDITCARDBILLPAYMENT = 8,
        TCRECHARGE = 9,
        TASHICELLPOSTPAID = 10,
        TCELLPOSTPAIDOUTSTANDINGAMOUNT = 11,
        TCELLLEASELINEOUTSTANDINGAMOUNT = 12,
        TCELLLEASELINEPAYMENT = 13,
        VIEWLOANDETAILS = 14,
        VIEWRECURRING = 15,
        VIEWTERM = 16,
        CREATERECURRING = 17,
        CREATETERM = 18,
        LOANPAYMENT = 19,
        WATERBILLPAY = 20,
        GETLISTOFNPPFLOANACC = 21,
        GETLISTOFNPPFRENTALACC = 22,
        NPPFLOANPAYMENT = 23,
        NPPFRENTPAYMENT = 24,
        WATEROUTSTANDING = 25,
        ETHOMETHO = 26,
        DONATION = 27,
        TAXOUTSTANDING = 28,
        TAXPAYMENT = 29,
        NORLING = 30,
        RICB_CREDITINVESTMENT = 31,
        RICB_LIFEINSURANCE = 32,
        RICB_ANNUITY = 33,
        BTPOSTPAIDOUTSTANDING = 34,
        BTBROANDBANDOUTSTANDING = 35,
        BTLANDLINEOUTSTANDING = 36,
        BTPOSTPAIDPAYMENT = 37,
        BTBROADBANDPOSTPAIDPAYMENT = 38,
        BTBROADBANDPREPAIDPAYMENT = 39,
        BTLANDLINEPAYMENT = 40,
        RICBLIFEINSURANCEPAYMENT = 41,
        RICBANNUTITYPAYMENT = 42,
        RICBCREDITPAY = 43,

        BTLEASELINEOUTSTANDING = 44,
        BTLEASELINEPAYMENT = 45,
        BNGULPAYMENT = 46,
        SHOWVOTING = 47,
        BTRECHARGE = 48
    }

    public enum enumBPC
    {
        ValidateConsumerNumber = 1,
        ReturnOutstandingAmount = 2,
        BankSystemTransfer = 3,
    }

    public enum enumRechargeRequestType
    {
        Unknown = 0,
        BTREQMSG = 10,
        BTGETSTATUS = 40,
        DRUKCOM = 3,
        TASHICELLBROADBAND = 4,
        TASHICELLFIXLINE = 5,
    }

    public enum enumTransactionType
    {
        BalanceEnquiry = 31,
        MiniStatement = 38,
        FundTransfer = 40,                /////// Intra Fund Transfer Account
        MerchantPayment = 41,
        BillPayment = 42,
        OutstandingAmount = 43,
        AddBenificiary = 44,
        GetBankDetails = 45,
        GetBenificiary = 46,
        GetKeys = 47,
        SIGNUP = 48,
        VERIFYOTP = 49,
        CREATEPASSWORD = 50,
        LOGIN = 51,
        SIGNIN = 52,
        GetBenificiaryDetails = 53,
        DeleteBenificiary = 54,
        ForgotPassword = 55,
        GetCardDetails = 56,
        BlockCard = 57,
        UnBlockCard = 58,
        GetCardStatus = 59,
        GetChannelStatus = 60,
        GetActivityHistory = 61,
        SETATMLIMIT = 62,
        SETPOSLIMIT = 63,
        SETATMSTATUS = 64,
        SETPOSSTATUS = 65,
        Get_ManageAccount = 66,
        FT = 67,
        GETQRDATA = 68,
        GetBranchAtmLocation = 69,
        ChangeMpin = 70,
        ChequeDeposit = 71,
        ChangePassword = 72,
        GETADDACCOUNT = 73,
        ADDACCOUNT = 74,
        AccountStatementRequest = 75,
        BTRecharge = 76,
        GetBPCOutstandingAmount = 77,
        BPCPayment = 78,
        TCELLPREPAID = 79,
        TCELLLEASELINE = 80,
        TCELLPOSTPAIDOUTSTANDINGAMOUNT = 81,
        TCELLPOSTPAID = 82,
        TCELLLEASELINEOUTSTANDINGAMOUNT = 83,
        TCELLLEASELINEPAYMENT = 84,
        CREDITCARD_LIST = 85,
        CREDITCARDPAYMENT = 86,
        DRUKCOM = 87,
        ChequeBook = 88,
        DebitCard = 89,
        CardLess = 90,
        ViewLoanDetails = 91,
        ViewRecurringLoan = 92,
        ViewTermLoan = 93,
        CreateRecurring = 94,
        CreateTerm = 95,
        LoanPayment = 96,
        PAYMENT = 97,
        GetListOfCustomerID = 98,
        GetListOfLoanAccount = 99,
        GetListOfProducts = 100,
        OtherBank = 101,
        GetListOfNppfLoanAccount = 102,
        NPPFLoanPayment = 103,
        WaterOutstandingDetails = 104,
        WaterBillPay = 105,
        GetListOfNppfRentAccount = 106,
        NPPFRentPayment = 107,
        NPPFPayment = 108,
        ETHOMETHO = 109,
        DonorList = 110,
        DONATION = 111,
        TAXOUTSTANDING = 112,
        TAXPAYMENT = 113,
        NORLING = 114,
        FEEDBACK = 115,
        ProductList = 116,
        Mislinious = 117,
        BTPOSTPAID = 118,
        BTPOSTPAIDPAYMENT = 119,
        RICBPAYMENT = 120,
        GetRICBOutstandingAmount = 121,
        Manual_Reversal = 122,
        ForgotMpin = 123,
        CreateNewMpin = 124,
        RequestMoney = 125,
        BTLeaseLine = 126,
        BNgul = 127,
        ShowDetails = 128,
        ContestantDetails = 129,
        ShowPayment = 130,
        CreateGreenpin = 131,
        MpayAccountlist = 132,
        MpayAccountBlock = 133,
        RequestMoneyBlockMobileNumber = 134,
        CreateGreenpinValidation = 135,
        RequestToken = 136,
        AutoCBSWiseMobileUpdate = 137,
        NQRCIntraFundTransfer = 138,
        SelfQRGeneration = 139,
        OnusQRTransaction = 140,
        AcquireQRTransaction = 141,

        //InWardQRTransaction = 142,
        IssuerQRTransaction = 142,
        ForgotTpinWithAccountDetails = 143,
        STOPCHEQUEPAYMENT = 144,
        CHEQUEBOOKBLOCK = 145,
        CHEQUEBOOKBLOCKLIST = 146,
        RELESECHEQUEPAYMENT = 147,
        RELESECHEQUEPAYMENTLIST = 148,
        BiometricLOGIN = 149,
        REQUESTUSERID = 150,
        GETDATA = 151,
        ACCOUNTQUERY = 152,
        GETPURPOSE = 153,
        SCHEDULEPAYMENT = 154,
        UpdatePOSChannel = 155,
        GetCountryWiseChannel = 156,
        StandingInstructions = 157,
        UpdateAccountDetails = 158,
        GetImages = 200,

    }

    public enum enumTransSource
    {
        Mobile = 7,
        RMA = 2,

    }

    public enum enumRegistrationType
    {
        AccountNumber = 0,
        Mobile = 1,
        ALL = 2,
    }

    public enum enumCycle
    {
        SignUp = 1,
        ValideOTP = 2,
        CreatePass = 3,
    }

    public enum FundTransferType
    {
        Inward = 1,
        Ouward = 2,
        BNgulCashIn = 3,
        VottingFundTransfer = 4,
    }

    public enum enumCHANNEL : int
    {
        ATM,
        POS,
        ECM,
    }

    public class MonthlyDetail
    {
        private string months;
        private string payment;
        private string interestPaid;
        private string principalPaid;
        private string balance;

        public MonthlyDetail()
        {

        }

        public string getMonths()
        {
            return months;
        }

        public string getPayment()
        {
            return payment;
        }

        public string getInterestPaid()
        {
            return interestPaid;
        }

        public string getPrincipalPaid()
        {
            return principalPaid;
        }

        public string getBalance()
        {
            return balance;
        }

        public void setMonths(string Value)
        {
            months = Value;
        }

        public void setPayment(string Value)
        {
            payment = Value;
        }

        public void setInterestPaid(string Value)
        {
            interestPaid = Value;
        }

        public void setPrincipalPaid(string Value)
        {
            principalPaid = Value;
        }

        public void setBalance(string Value)
        {
            balance = Value;
        }


    }

    public class QSDatapayload
    {
        public string accessKeyId;
        public string _voiceZipInfo;
        public int submitType;
        public string commandKey;
        public string sn;
        public int source;
        public string content;
        public string voiceType;
        public int broadcastNumber;
    }

    public class VoiceZipperInfo
    {
        public string code;
        public string type;
        public string lang;
        public string voiceText;
    }

    public class QS2Response
    {
        public string msg { get; set; }
        public string code { get; set; }
        public string data { get; set; }
        public string timestamp { get; set; }
        public string signatureValue { get; set; }

    }

    public class SoundBox
    {
        public AuthenticationResult AuthenticationResult { get; set; }
        public ChallengeParameters ChallengeParameters { get; set; }
    }

    public class AuthenticationResult
    {
        public string AccessToken { get; set; }
        public int ExpiresIn { get; set; }
        public string IdToken { get; set; }
        public string RefreshToken { get; set; }
        public string TokenType { get; set; }
    }

    public class ChallengeParameters
    {
    }
}